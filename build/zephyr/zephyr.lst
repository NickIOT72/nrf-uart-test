
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 1e 00 20 29 29 00 00 73 69 00 00 fd 28 00 00     ... ))..si...(..
  10:	fd 28 00 00 fd 28 00 00 fd 28 00 00 00 00 00 00     .(...(...(......
	...
  2c:	35 22 00 00 fd 28 00 00 00 00 00 00 e1 21 00 00     5"...(.......!..
  3c:	fd 28 00 00                                         .(..

00000040 <_irq_vector_table>:
  40:	e5 22 00 00 e5 22 00 00 e5 22 00 00 e5 22 00 00     ."..."..."..."..
  50:	e5 22 00 00 e5 22 00 00 e5 22 00 00 e5 22 00 00     ."..."..."..."..
  60:	e5 22 00 00 e5 22 00 00 e5 22 00 00 e5 22 00 00     ."..."..."..."..
  70:	e5 22 00 00 e5 22 00 00 e5 22 00 00 e5 22 00 00     ."..."..."..."..
  80:	e5 22 00 00 e5 22 00 00 e5 22 00 00 e5 22 00 00     ."..."..."..."..
  90:	e5 22 00 00 e5 22 00 00 e5 22 00 00 e5 22 00 00     ."..."..."..."..
  a0:	e5 22 00 00 e5 22 00 00 e5 22 00 00 e5 22 00 00     ."..."..."..."..
  b0:	e5 22 00 00 e5 22 00 00 e5 22 00 00 e5 22 00 00     ."..."..."..."..
  c0:	e5 22 00 00 e5 22 00 00 e5 22 00 00 e5 22 00 00     ."..."..."..."..
  d0:	e5 22 00 00 e5 22 00 00 e5 22 00 00 e5 22 00 00     ."..."..."..."..
  e0:	e5 22 00 00 e5 22 00 00 e5 22 00 00 e5 22 00 00     ."..."..."..."..
  f0:	e5 22 00 00 e5 22 00 00 e5 22 00 00 e5 22 00 00     ."..."..."..."..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b80c 	b.w	130 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f808 	bl	134 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__aeabi_idiv0>:
     130:	4770      	bx	lr
     132:	bf00      	nop

00000134 <__udivmoddi4>:
     134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     138:	4607      	mov	r7, r0
     13a:	468c      	mov	ip, r1
     13c:	4608      	mov	r0, r1
     13e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     140:	4615      	mov	r5, r2
     142:	463c      	mov	r4, r7
     144:	4619      	mov	r1, r3
     146:	2b00      	cmp	r3, #0
     148:	f040 80c6 	bne.w	2d8 <__data_size+0x11b>
     14c:	4282      	cmp	r2, r0
     14e:	fab2 f782 	clz	r7, r2
     152:	d946      	bls.n	1e2 <__data_size+0x25>
     154:	b14f      	cbz	r7, 16a <CONFIG_IDLE_STACK_SIZE+0x2a>
     156:	f1c7 0e20 	rsb	lr, r7, #32
     15a:	fa24 fe0e 	lsr.w	lr, r4, lr
     15e:	fa00 f307 	lsl.w	r3, r0, r7
     162:	40bd      	lsls	r5, r7
     164:	ea4e 0c03 	orr.w	ip, lr, r3
     168:	40bc      	lsls	r4, r7
     16a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     16e:	fa1f fe85 	uxth.w	lr, r5
     172:	fbbc f9f8 	udiv	r9, ip, r8
     176:	0c22      	lsrs	r2, r4, #16
     178:	fb08 c319 	mls	r3, r8, r9, ip
     17c:	fb09 fa0e 	mul.w	sl, r9, lr
     180:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     184:	459a      	cmp	sl, r3
     186:	d928      	bls.n	1da <__data_size+0x1d>
     188:	18eb      	adds	r3, r5, r3
     18a:	f109 30ff 	add.w	r0, r9, #4294967295
     18e:	d204      	bcs.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     190:	459a      	cmp	sl, r3
     192:	d902      	bls.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     194:	f1a9 0002 	sub.w	r0, r9, #2
     198:	442b      	add	r3, r5
     19a:	eba3 030a 	sub.w	r3, r3, sl
     19e:	b2a4      	uxth	r4, r4
     1a0:	fbb3 f2f8 	udiv	r2, r3, r8
     1a4:	fb08 3312 	mls	r3, r8, r2, r3
     1a8:	fb02 fe0e 	mul.w	lr, r2, lr
     1ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1b0:	45a6      	cmp	lr, r4
     1b2:	d914      	bls.n	1de <__data_size+0x21>
     1b4:	192c      	adds	r4, r5, r4
     1b6:	f102 33ff 	add.w	r3, r2, #4294967295
     1ba:	d203      	bcs.n	1c4 <__data_size+0x7>
     1bc:	45a6      	cmp	lr, r4
     1be:	d901      	bls.n	1c4 <__data_size+0x7>
     1c0:	1e93      	subs	r3, r2, #2
     1c2:	442c      	add	r4, r5
     1c4:	eba4 040e 	sub.w	r4, r4, lr
     1c8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1cc:	b11e      	cbz	r6, 1d6 <__data_size+0x19>
     1ce:	40fc      	lsrs	r4, r7
     1d0:	2300      	movs	r3, #0
     1d2:	6034      	str	r4, [r6, #0]
     1d4:	6073      	str	r3, [r6, #4]
     1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1da:	4648      	mov	r0, r9
     1dc:	e7dd      	b.n	19a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2d>
     1de:	4613      	mov	r3, r2
     1e0:	e7f0      	b.n	1c4 <__data_size+0x7>
     1e2:	b902      	cbnz	r2, 1e6 <__data_size+0x29>
     1e4:	deff      	udf	#255	; 0xff
     1e6:	bb87      	cbnz	r7, 24a <__data_size+0x8d>
     1e8:	1a83      	subs	r3, r0, r2
     1ea:	2101      	movs	r1, #1
     1ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1f0:	b2aa      	uxth	r2, r5
     1f2:	fbb3 fcfe 	udiv	ip, r3, lr
     1f6:	0c20      	lsrs	r0, r4, #16
     1f8:	fb0e 331c 	mls	r3, lr, ip, r3
     1fc:	fb0c f802 	mul.w	r8, ip, r2
     200:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     204:	4598      	cmp	r8, r3
     206:	d963      	bls.n	2d0 <__data_size+0x113>
     208:	18eb      	adds	r3, r5, r3
     20a:	f10c 30ff 	add.w	r0, ip, #4294967295
     20e:	d204      	bcs.n	21a <__data_size+0x5d>
     210:	4598      	cmp	r8, r3
     212:	d902      	bls.n	21a <__data_size+0x5d>
     214:	f1ac 0002 	sub.w	r0, ip, #2
     218:	442b      	add	r3, r5
     21a:	eba3 0308 	sub.w	r3, r3, r8
     21e:	b2a4      	uxth	r4, r4
     220:	fbb3 fcfe 	udiv	ip, r3, lr
     224:	fb0e 331c 	mls	r3, lr, ip, r3
     228:	fb0c f202 	mul.w	r2, ip, r2
     22c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     230:	42a2      	cmp	r2, r4
     232:	d94f      	bls.n	2d4 <__data_size+0x117>
     234:	192c      	adds	r4, r5, r4
     236:	f10c 33ff 	add.w	r3, ip, #4294967295
     23a:	d204      	bcs.n	246 <__data_size+0x89>
     23c:	42a2      	cmp	r2, r4
     23e:	d902      	bls.n	246 <__data_size+0x89>
     240:	f1ac 0302 	sub.w	r3, ip, #2
     244:	442c      	add	r4, r5
     246:	1aa4      	subs	r4, r4, r2
     248:	e7be      	b.n	1c8 <__data_size+0xb>
     24a:	f1c7 0c20 	rsb	ip, r7, #32
     24e:	fa20 f80c 	lsr.w	r8, r0, ip
     252:	fa00 f307 	lsl.w	r3, r0, r7
     256:	fa24 fc0c 	lsr.w	ip, r4, ip
     25a:	40bd      	lsls	r5, r7
     25c:	ea4c 0203 	orr.w	r2, ip, r3
     260:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     264:	b2ab      	uxth	r3, r5
     266:	fbb8 fcfe 	udiv	ip, r8, lr
     26a:	0c11      	lsrs	r1, r2, #16
     26c:	fb0e 801c 	mls	r0, lr, ip, r8
     270:	fb0c f903 	mul.w	r9, ip, r3
     274:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     278:	4581      	cmp	r9, r0
     27a:	fa04 f407 	lsl.w	r4, r4, r7
     27e:	d923      	bls.n	2c8 <__data_size+0x10b>
     280:	1828      	adds	r0, r5, r0
     282:	f10c 31ff 	add.w	r1, ip, #4294967295
     286:	d204      	bcs.n	292 <__data_size+0xd5>
     288:	4581      	cmp	r9, r0
     28a:	d902      	bls.n	292 <__data_size+0xd5>
     28c:	f1ac 0102 	sub.w	r1, ip, #2
     290:	4428      	add	r0, r5
     292:	eba0 0009 	sub.w	r0, r0, r9
     296:	b292      	uxth	r2, r2
     298:	fbb0 fcfe 	udiv	ip, r0, lr
     29c:	fb0e 001c 	mls	r0, lr, ip, r0
     2a0:	fb0c f803 	mul.w	r8, ip, r3
     2a4:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     2a8:	4598      	cmp	r8, r3
     2aa:	d90f      	bls.n	2cc <__data_size+0x10f>
     2ac:	18eb      	adds	r3, r5, r3
     2ae:	f10c 32ff 	add.w	r2, ip, #4294967295
     2b2:	d204      	bcs.n	2be <__data_size+0x101>
     2b4:	4598      	cmp	r8, r3
     2b6:	d902      	bls.n	2be <__data_size+0x101>
     2b8:	f1ac 0202 	sub.w	r2, ip, #2
     2bc:	442b      	add	r3, r5
     2be:	eba3 0308 	sub.w	r3, r3, r8
     2c2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2c6:	e791      	b.n	1ec <__data_size+0x2f>
     2c8:	4661      	mov	r1, ip
     2ca:	e7e2      	b.n	292 <__data_size+0xd5>
     2cc:	4662      	mov	r2, ip
     2ce:	e7f6      	b.n	2be <__data_size+0x101>
     2d0:	4660      	mov	r0, ip
     2d2:	e7a2      	b.n	21a <__data_size+0x5d>
     2d4:	4663      	mov	r3, ip
     2d6:	e7b6      	b.n	246 <__data_size+0x89>
     2d8:	4283      	cmp	r3, r0
     2da:	d905      	bls.n	2e8 <__data_size+0x12b>
     2dc:	b10e      	cbz	r6, 2e2 <__data_size+0x125>
     2de:	e9c6 7000 	strd	r7, r0, [r6]
     2e2:	2100      	movs	r1, #0
     2e4:	4608      	mov	r0, r1
     2e6:	e776      	b.n	1d6 <__data_size+0x19>
     2e8:	fab3 f183 	clz	r1, r3
     2ec:	b981      	cbnz	r1, 310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2ee:	4283      	cmp	r3, r0
     2f0:	d301      	bcc.n	2f6 <__data_size+0x139>
     2f2:	42ba      	cmp	r2, r7
     2f4:	d80a      	bhi.n	30c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc>
     2f6:	1abc      	subs	r4, r7, r2
     2f8:	eb60 0303 	sbc.w	r3, r0, r3
     2fc:	2001      	movs	r0, #1
     2fe:	469c      	mov	ip, r3
     300:	2e00      	cmp	r6, #0
     302:	d068      	beq.n	3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     304:	e9c6 4c00 	strd	r4, ip, [r6]
     308:	2100      	movs	r1, #0
     30a:	e764      	b.n	1d6 <__data_size+0x19>
     30c:	4608      	mov	r0, r1
     30e:	e7f7      	b.n	300 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE>
     310:	f1c1 0c20 	rsb	ip, r1, #32
     314:	408b      	lsls	r3, r1
     316:	fa22 f40c 	lsr.w	r4, r2, ip
     31a:	431c      	orrs	r4, r3
     31c:	fa02 f501 	lsl.w	r5, r2, r1
     320:	fa00 f301 	lsl.w	r3, r0, r1
     324:	fa27 f20c 	lsr.w	r2, r7, ip
     328:	fa20 fb0c 	lsr.w	fp, r0, ip
     32c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     330:	4313      	orrs	r3, r2
     332:	fbbb f8f9 	udiv	r8, fp, r9
     336:	fa1f fe84 	uxth.w	lr, r4
     33a:	fb09 bb18 	mls	fp, r9, r8, fp
     33e:	0c1a      	lsrs	r2, r3, #16
     340:	fb08 fa0e 	mul.w	sl, r8, lr
     344:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     348:	4592      	cmp	sl, r2
     34a:	fa07 f701 	lsl.w	r7, r7, r1
     34e:	d93e      	bls.n	3ce <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xce>
     350:	18a2      	adds	r2, r4, r2
     352:	f108 30ff 	add.w	r0, r8, #4294967295
     356:	d204      	bcs.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     358:	4592      	cmp	sl, r2
     35a:	d902      	bls.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     35c:	f1a8 0002 	sub.w	r0, r8, #2
     360:	4422      	add	r2, r4
     362:	eba2 020a 	sub.w	r2, r2, sl
     366:	b29b      	uxth	r3, r3
     368:	fbb2 f8f9 	udiv	r8, r2, r9
     36c:	fb09 2218 	mls	r2, r9, r8, r2
     370:	fb08 fe0e 	mul.w	lr, r8, lr
     374:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     378:	4596      	cmp	lr, r2
     37a:	d92a      	bls.n	3d2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd2>
     37c:	18a2      	adds	r2, r4, r2
     37e:	f108 33ff 	add.w	r3, r8, #4294967295
     382:	d204      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     384:	4596      	cmp	lr, r2
     386:	d902      	bls.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     388:	f1a8 0302 	sub.w	r3, r8, #2
     38c:	4422      	add	r2, r4
     38e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     392:	fba0 9305 	umull	r9, r3, r0, r5
     396:	eba2 020e 	sub.w	r2, r2, lr
     39a:	429a      	cmp	r2, r3
     39c:	46ce      	mov	lr, r9
     39e:	4698      	mov	r8, r3
     3a0:	d302      	bcc.n	3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     3a2:	d106      	bne.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a4:	454f      	cmp	r7, r9
     3a6:	d204      	bcs.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3a8:	ebb9 0e05 	subs.w	lr, r9, r5
     3ac:	eb63 0804 	sbc.w	r8, r3, r4
     3b0:	3801      	subs	r0, #1
     3b2:	b186      	cbz	r6, 3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     3b4:	ebb7 030e 	subs.w	r3, r7, lr
     3b8:	eb62 0708 	sbc.w	r7, r2, r8
     3bc:	fa07 fc0c 	lsl.w	ip, r7, ip
     3c0:	40cb      	lsrs	r3, r1
     3c2:	ea4c 0303 	orr.w	r3, ip, r3
     3c6:	40cf      	lsrs	r7, r1
     3c8:	e9c6 3700 	strd	r3, r7, [r6]
     3cc:	e79c      	b.n	308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>
     3ce:	4640      	mov	r0, r8
     3d0:	e7c7      	b.n	362 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x62>
     3d2:	4643      	mov	r3, r8
     3d4:	e7db      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3d6:	4631      	mov	r1, r6
     3d8:	e6fd      	b.n	1d6 <__data_size+0x19>
	...

000003dc <uart_cb>:
bool condUart = false;
int lastlen = 0;

/* STEP 7 - Define the callback function for UART */
static void uart_cb(const struct device *dev, struct uart_event *evt, void *user_data)
{
     3dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct uart_data_t *buf;

	switch (evt->type)
     3e0:	780a      	ldrb	r2, [r1, #0]
     3e2:	2a02      	cmp	r2, #2
{
     3e4:	460c      	mov	r4, r1
	switch (evt->type)
     3e6:	d004      	beq.n	3f2 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xa>
     3e8:	2a05      	cmp	r2, #5
     3ea:	d056      	beq.n	49a <CONFIG_FLASH_SIZE+0x9a>
		uart_rx_enable(dev, rx_buf, sizeof rx_buf, RECEIVE_TIMEOUT);
		break;
	default:
		break;
	}
}
     3ec:	b003      	add	sp, #12
     3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (lastlen == 0)//
     3f2:	4d2f      	ldr	r5, [pc, #188]	; (4b0 <CONFIG_FLASH_SIZE+0xb0>)
		k_msleep(SLEEP_RECEIVE);
     3f4:	2019      	movs	r0, #25
     3f6:	f005 fe5d 	bl	60b4 <k_msleep.isra.0>
		buf = CONTAINER_OF(evt->data.rx.buf, struct uart_data_t, data);
     3fa:	f8d4 9004 	ldr.w	r9, [r4, #4]
		if (lastlen == 0)//
     3fe:	6829      	ldr	r1, [r5, #0]
		buf->len = evt->data.rx.len;
     400:	68e3      	ldr	r3, [r4, #12]
     402:	f8a9 300a 	strh.w	r3, [r9, #10]
		if (lastlen == 0)//
     406:	b1f1      	cbz	r1, 446 <CONFIG_FLASH_SIZE+0x46>
		int lastpos = (evt->data.rx.offset - buf->len + 1) % RECEIVE_BUFF_SIZE;
     408:	68a0      	ldr	r0, [r4, #8]
     40a:	b29a      	uxth	r2, r3
     40c:	1c44      	adds	r4, r0, #1
     40e:	1aa4      	subs	r4, r4, r2
     410:	f04f 080a 	mov.w	r8, #10
     414:	fbb4 f6f8 	udiv	r6, r4, r8
     418:	fb08 4416 	mls	r4, r8, r6, r4
		printk("(data: %2d,len: %2d, %2d, %2d, %2d)UART RECEIVED: ", lastlen, buf->len, lastpos, evt->data.rx.offset, evt->data.rx.len);
     41c:	e9cd 0300 	strd	r0, r3, [sp]
     420:	4824      	ldr	r0, [pc, #144]	; (4b4 <CONFIG_FLASH_SIZE+0xb4>)
     422:	4623      	mov	r3, r4
     424:	f005 feb6 	bl	6194 <printk>
		if (lastlen < RECEIVE_BUFF_SIZE)
     428:	682f      	ldr	r7, [r5, #0]
     42a:	2f09      	cmp	r7, #9
		int counttt = 0;
     42c:	f04f 0600 	mov.w	r6, #0
		if (lastlen < RECEIVE_BUFF_SIZE)
     430:	dd2e      	ble.n	490 <CONFIG_FLASH_SIZE+0x90>
		printk("\r\n");
     432:	4821      	ldr	r0, [pc, #132]	; (4b8 <CONFIG_FLASH_SIZE+0xb8>)
     434:	f005 feae 	bl	6194 <printk>
		condUart = true;
     438:	4b20      	ldr	r3, [pc, #128]	; (4bc <CONFIG_FLASH_SIZE+0xbc>)
     43a:	2201      	movs	r2, #1
     43c:	701a      	strb	r2, [r3, #0]
		lastlen += counttt;
     43e:	682b      	ldr	r3, [r5, #0]
     440:	4433      	add	r3, r6
     442:	602b      	str	r3, [r5, #0]
}
     444:	e7d2      	b.n	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     446:	481e      	ldr	r0, [pc, #120]	; (4c0 <CONFIG_FLASH_SIZE+0xc0>)
			for (int i = 0; i < RECEIVE_BUFF_SIZE; i++)
     448:	460a      	mov	r2, r1
     44a:	3201      	adds	r2, #1
     44c:	2a0a      	cmp	r2, #10
				BUFFER_RX[i] = 0;
     44e:	f800 1b01 	strb.w	r1, [r0], #1
			for (int i = 0; i < RECEIVE_BUFF_SIZE; i++)
     452:	d1fa      	bne.n	44a <CONFIG_FLASH_SIZE+0x4a>
     454:	e7d8      	b.n	408 <CONFIG_FLASH_SIZE+0x8>
				char charRead = buf->data[(i + lastpos) % RECEIVE_BUFF_SIZE];
     456:	193a      	adds	r2, r7, r4
     458:	fb92 f1f8 	sdiv	r1, r2, r8
     45c:	fb08 2211 	mls	r2, r8, r1, r2
     460:	f819 1002 	ldrb.w	r1, [r9, r2]
				if (charRead == '1' || charRead == '2' || charRead == '3')
     464:	f1a1 0231 	sub.w	r2, r1, #49	; 0x31
     468:	2a02      	cmp	r2, #2
     46a:	d805      	bhi.n	478 <CONFIG_FLASH_SIZE+0x78>
					BUFFER_RX[lastlen + counttt] = charRead;
     46c:	4453      	add	r3, sl
					printk("%c", charRead);
     46e:	4658      	mov	r0, fp
					BUFFER_RX[lastlen + counttt] = charRead;
     470:	5599      	strb	r1, [r3, r6]
					printk("%c", charRead);
     472:	f005 fe8f 	bl	6194 <printk>
					counttt += 1;
     476:	3601      	adds	r6, #1
				if (lastlen + counttt >= RECEIVE_BUFF_SIZE)
     478:	682b      	ldr	r3, [r5, #0]
     47a:	4433      	add	r3, r6
     47c:	2b09      	cmp	r3, #9
     47e:	dcd8      	bgt.n	432 <CONFIG_FLASH_SIZE+0x32>
			for (int i = lastlen; i < lastlen + buf->len; i++)
     480:	3701      	adds	r7, #1
     482:	682b      	ldr	r3, [r5, #0]
     484:	f8b9 200a 	ldrh.w	r2, [r9, #10]
     488:	441a      	add	r2, r3
     48a:	4297      	cmp	r7, r2
     48c:	dbe3      	blt.n	456 <CONFIG_FLASH_SIZE+0x56>
     48e:	e7d0      	b.n	432 <CONFIG_FLASH_SIZE+0x32>
					BUFFER_RX[lastlen + counttt] = charRead;
     490:	f8df a02c 	ldr.w	sl, [pc, #44]	; 4c0 <CONFIG_FLASH_SIZE+0xc0>
					printk("%c", charRead);
     494:	f8df b02c 	ldr.w	fp, [pc, #44]	; 4c4 <CONFIG_FLASH_SIZE+0xc4>
     498:	e7f3      	b.n	482 <CONFIG_FLASH_SIZE+0x82>
{
#ifdef CONFIG_UART_ASYNC_API
	const struct uart_driver_api *api =
				(const struct uart_driver_api *)dev->api;

	return api->rx_enable(dev, buf, len, timeout);
     49a:	6883      	ldr	r3, [r0, #8]
     49c:	490a      	ldr	r1, [pc, #40]	; (4c8 <CONFIG_FLASH_SIZE+0xc8>)
     49e:	68dc      	ldr	r4, [r3, #12]
     4a0:	220a      	movs	r2, #10
     4a2:	2364      	movs	r3, #100	; 0x64
     4a4:	46a4      	mov	ip, r4
}
     4a6:	b003      	add	sp, #12
     4a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4ac:	4760      	bx	ip
     4ae:	bf00      	nop
     4b0:	200009d8 	.word	0x200009d8
     4b4:	00007d40 	.word	0x00007d40
     4b8:	00007d8b 	.word	0x00007d8b
     4bc:	2000131a 	.word	0x2000131a
     4c0:	20001310 	.word	0x20001310
     4c4:	00007d73 	.word	0x00007d73
     4c8:	2000131b 	.word	0x2000131b

000004cc <main>:

int main(void)
{
     4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int ret;

	/* STEP 4.2 - Verify that the UART device is ready */
	if (!device_is_ready(uart))
     4d0:	4c33      	ldr	r4, [pc, #204]	; (5a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb8>)
     4d2:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     4d4:	f006 ff87 	bl	73e6 <z_device_is_ready>
     4d8:	b928      	cbnz	r0, 4e6 <main+0x1a>
	{
		printk("UART device not ready\r\n");
     4da:	4832      	ldr	r0, [pc, #200]	; (5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>)
		return 1;
	}
	/* STEP 5.2 - Verify that the LED devices are ready */
	if (!device_is_ready(led0.port))
	{
		printk("GPIO device is not ready\r\n");
     4dc:	f005 fe5a 	bl	6194 <printk>
			}
			condUart = false;
			lastlen = 0;
		}
	}
     4e0:	2001      	movs	r0, #1
     4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     4e6:	4830      	ldr	r0, [pc, #192]	; (5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>)
     4e8:	f006 ff7d 	bl	73e6 <z_device_is_ready>
	if (!device_is_ready(led0.port))
     4ec:	b908      	cbnz	r0, 4f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa>
		printk("GPIO device is not ready\r\n");
     4ee:	482f      	ldr	r0, [pc, #188]	; (5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>)
     4f0:	e7f4      	b.n	4dc <main+0x10>
	ret = gpio_pin_configure_dt(&led0, GPIO_OUTPUT_ACTIVE);
     4f2:	482f      	ldr	r0, [pc, #188]	; (5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>)
     4f4:	f005 fdbc 	bl	6070 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0)
     4f8:	2800      	cmp	r0, #0
     4fa:	dbf1      	blt.n	4e0 <main+0x14>
	ret = gpio_pin_configure_dt(&led1, GPIO_OUTPUT_ACTIVE);
     4fc:	482d      	ldr	r0, [pc, #180]	; (5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>)
     4fe:	f005 fdb7 	bl	6070 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0)
     502:	2800      	cmp	r0, #0
     504:	dbec      	blt.n	4e0 <main+0x14>
	ret = gpio_pin_configure_dt(&led2, GPIO_OUTPUT_ACTIVE);
     506:	482c      	ldr	r0, [pc, #176]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
     508:	f005 fdb2 	bl	6070 <gpio_pin_configure_dt.constprop.0>
	if (ret < 0)
     50c:	2800      	cmp	r0, #0
     50e:	dbe7      	blt.n	4e0 <main+0x14>
	ret = uart_callback_set(uart, uart_cb, NULL);
     510:	6820      	ldr	r0, [r4, #0]
	if (api->callback_set == NULL) {
     512:	6883      	ldr	r3, [r0, #8]
     514:	681b      	ldr	r3, [r3, #0]
     516:	2b00      	cmp	r3, #0
     518:	d0e2      	beq.n	4e0 <main+0x14>
	return api->callback_set(dev, callback, user_data);
     51a:	4928      	ldr	r1, [pc, #160]	; (5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>)
     51c:	2200      	movs	r2, #0
     51e:	4798      	blx	r3
	if (ret)
     520:	2800      	cmp	r0, #0
     522:	d1dd      	bne.n	4e0 <main+0x14>
	ret = uart_tx(uart, tx_buf, sizeof(tx_buf), SYS_FOREVER_US);
     524:	6820      	ldr	r0, [r4, #0]
	return api->tx(dev, buf, len, timeout);
     526:	6883      	ldr	r3, [r0, #8]
     528:	4925      	ldr	r1, [pc, #148]	; (5c0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd8>)
     52a:	685d      	ldr	r5, [r3, #4]
     52c:	226d      	movs	r2, #109	; 0x6d
     52e:	f04f 33ff 	mov.w	r3, #4294967295
     532:	47a8      	blx	r5
	if (ret)
     534:	2800      	cmp	r0, #0
     536:	d1d3      	bne.n	4e0 <main+0x14>
	ret = uart_rx_enable(uart, rx_buf, sizeof rx_buf, RECEIVE_TIMEOUT);
     538:	6820      	ldr	r0, [r4, #0]
	return api->rx_enable(dev, buf, len, timeout);
     53a:	6883      	ldr	r3, [r0, #8]
     53c:	4921      	ldr	r1, [pc, #132]	; (5c4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xdc>)
     53e:	68dc      	ldr	r4, [r3, #12]
     540:	220a      	movs	r2, #10
     542:	2364      	movs	r3, #100	; 0x64
     544:	47a0      	blx	r4
	if (ret)
     546:	2800      	cmp	r0, #0
     548:	d1ca      	bne.n	4e0 <main+0x14>
		if (condUart)
     54a:	4d1f      	ldr	r5, [pc, #124]	; (5c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe0>)
					gpio_pin_toggle_dt(&led2);
     54c:	4f1a      	ldr	r7, [pc, #104]	; (5b8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd0>)
		k_msleep(SLEEP_TIME_MS);
     54e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     552:	f005 fdaf 	bl	60b4 <k_msleep.isra.0>
		if (condUart)
     556:	782b      	ldrb	r3, [r5, #0]
     558:	2b00      	cmp	r3, #0
     55a:	d0f8      	beq.n	54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
     55c:	4e1b      	ldr	r6, [pc, #108]	; (5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>)
					gpio_pin_toggle_dt(&led1);
     55e:	f8df 8054 	ldr.w	r8, [pc, #84]	; 5b4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xcc>
					gpio_pin_toggle_dt(&led0);
     562:	f8df 904c 	ldr.w	r9, [pc, #76]	; 5b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc8>
			for (int j = 0; j < 10; j++)
     566:	2400      	movs	r4, #0
				if (BUFFER_RX[j] == '1')
     568:	f816 3b01 	ldrb.w	r3, [r6], #1
     56c:	2b31      	cmp	r3, #49	; 0x31
     56e:	d10e      	bne.n	58e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa6>
					gpio_pin_toggle_dt(&led0);
     570:	4648      	mov	r0, r9
					gpio_pin_toggle_dt(&led2);
     572:	f005 fd97 	bl	60a4 <gpio_pin_toggle_dt.isra.0>
					k_msleep(SLEEP_TIME_MS);
     576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     57a:	f005 fd9b 	bl	60b4 <k_msleep.isra.0>
			for (int j = 0; j < 10; j++)
     57e:	3401      	adds	r4, #1
     580:	2c0a      	cmp	r4, #10
     582:	d1f1      	bne.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
			lastlen = 0;
     584:	4a12      	ldr	r2, [pc, #72]	; (5d0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe8>)
			condUart = false;
     586:	2300      	movs	r3, #0
     588:	702b      	strb	r3, [r5, #0]
			lastlen = 0;
     58a:	6013      	str	r3, [r2, #0]
     58c:	e7df      	b.n	54e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x66>
				else if (BUFFER_RX[j] == '2')
     58e:	2b32      	cmp	r3, #50	; 0x32
     590:	d101      	bne.n	596 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xae>
					gpio_pin_toggle_dt(&led1);
     592:	4640      	mov	r0, r8
     594:	e7ed      	b.n	572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
				else if (BUFFER_RX[j] == '3')
     596:	2b33      	cmp	r3, #51	; 0x33
     598:	d1f1      	bne.n	57e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x96>
					gpio_pin_toggle_dt(&led2);
     59a:	4638      	mov	r0, r7
     59c:	e7e9      	b.n	572 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8a>
     59e:	bf00      	nop
     5a0:	20000000 	.word	0x20000000
     5a4:	00007d76 	.word	0x00007d76
     5a8:	000077e4 	.word	0x000077e4
     5ac:	00007d8e 	.word	0x00007d8e
     5b0:	00007a58 	.word	0x00007a58
     5b4:	00007a60 	.word	0x00007a60
     5b8:	00007a68 	.word	0x00007a68
     5bc:	000003dd 	.word	0x000003dd
     5c0:	20000150 	.word	0x20000150
     5c4:	2000131b 	.word	0x2000131b
     5c8:	2000131a 	.word	0x2000131a
     5cc:	20001310 	.word	0x20001310
     5d0:	200009d8 	.word	0x200009d8

000005d4 <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
     5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5d8:	b08b      	sub	sp, #44	; 0x2c
     5da:	4606      	mov	r6, r0
     5dc:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
     5e0:	9304      	str	r3, [sp, #16]
     5e2:	4614      	mov	r4, r2
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
     5e4:	460f      	mov	r7, r1
     5e6:	b1b1      	cbz	r1, 616 <cbprintf_package_copy+0x42>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
     5e8:	78b5      	ldrb	r5, [r6, #2]
     5ea:	9505      	str	r5, [sp, #20]
	ro_cpy = ros_nbr &&
     5ec:	bb35      	cbnz	r5, 63c <cbprintf_package_copy+0x68>
     5ee:	46aa      	mov	sl, r5
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
     5f0:	78f3      	ldrb	r3, [r6, #3]
     5f2:	9301      	str	r3, [sp, #4]
	rw_cpy = rws_nbr > 0 &&
     5f4:	b113      	cbz	r3, 5fc <cbprintf_package_copy+0x28>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     5f6:	f01b 0f02 	tst.w	fp, #2
     5fa:	d122      	bne.n	642 <cbprintf_package_copy+0x6e>
     5fc:	f1ba 0f00 	cmp.w	sl, #0
     600:	d11f      	bne.n	642 <cbprintf_package_copy+0x6e>
		if (packaged) {
     602:	b124      	cbz	r4, 60e <cbprintf_package_copy+0x3a>
			memcpy(packaged, in_packaged, in_len);
     604:	463a      	mov	r2, r7
     606:	4631      	mov	r1, r6
     608:	4620      	mov	r0, r4
     60a:	f006 f9d6 	bl	69ba <memcpy>
			}

			str_pos++;
		}

		return out_len;
     60e:	4638      	mov	r0, r7
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
     610:	b00b      	add	sp, #44	; 0x2c
     612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_nbr     = buf[1];
     616:	f890 9001 	ldrb.w	r9, [r0, #1]
	buf += ros_nbr;
     61a:	78b5      	ldrb	r5, [r6, #2]
     61c:	7800      	ldrb	r0, [r0, #0]
     61e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
     622:	4435      	add	r5, r6
	for (int i = 0; i < s_nbr; i++) {
     624:	468a      	mov	sl, r1
     626:	45ca      	cmp	sl, r9
     628:	d2de      	bcs.n	5e8 <cbprintf_package_copy+0x14>
		buf++;
     62a:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
     62c:	4628      	mov	r0, r5
     62e:	f006 f9b4 	bl	699a <strlen>
     632:	3001      	adds	r0, #1
     634:	4405      	add	r5, r0
	for (int i = 0; i < s_nbr; i++) {
     636:	f10a 0a01 	add.w	sl, sl, #1
     63a:	e7f4      	b.n	626 <cbprintf_package_copy+0x52>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     63c:	f00b 0a01 	and.w	sl, fp, #1
     640:	e7d6      	b.n	5f0 <cbprintf_package_copy+0x1c>
	args_size = buf[0] * sizeof(int);
     642:	f896 9000 	ldrb.w	r9, [r6]
     646:	ea4f 0389 	mov.w	r3, r9, lsl #2
     64a:	9303      	str	r3, [sp, #12]
	uint8_t *str_pos = &buf[args_size];
     64c:	eb06 0989 	add.w	r9, r6, r9, lsl #2
	if (packaged == NULL) {
     650:	2c00      	cmp	r4, #0
     652:	d15b      	bne.n	70c <cbprintf_package_copy+0x138>
		if (ro_cpy) {
     654:	f1ba 0f00 	cmp.w	sl, #0
     658:	d032      	beq.n	6c0 <cbprintf_package_copy+0xec>
     65a:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
     65c:	454d      	cmp	r5, r9
     65e:	d11d      	bne.n	69c <cbprintf_package_copy+0xc8>
     660:	46a9      	mov	r9, r5
		bool drop_ro_str_pos = !(flags &
     662:	f8dd a004 	ldr.w	sl, [sp, #4]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     666:	f8df c204 	ldr.w	ip, [pc, #516]	; 86c <CONFIG_ISR_STACK_SIZE+0x6c>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     66a:	4981      	ldr	r1, [pc, #516]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
		bool drop_ro_str_pos = !(flags &
     66c:	f00b 0805 	and.w	r8, fp, #5
		for (int i = 0; i < rws_nbr; i++) {
     670:	464d      	mov	r5, r9
     672:	44ca      	add	sl, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     674:	f00b 0202 	and.w	r2, fp, #2
		for (int i = 0; i < rws_nbr; i++) {
     678:	45aa      	cmp	sl, r5
     67a:	d0c8      	beq.n	60e <cbprintf_package_copy+0x3a>
			const char *str = *(const char **)&buf32[*str_pos];
     67c:	f815 0b01 	ldrb.w	r0, [r5], #1
     680:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
     684:	4560      	cmp	r0, ip
     686:	d324      	bcc.n	6d2 <cbprintf_package_copy+0xfe>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     688:	4288      	cmp	r0, r1
     68a:	d222      	bcs.n	6d2 <cbprintf_package_copy+0xfe>
     68c:	f01b 0f01 	tst.w	fp, #1
     690:	d139      	bne.n	706 <cbprintf_package_copy+0x132>
			if (is_ro && drop_ro_str_pos) {
     692:	f1b8 0f00 	cmp.w	r8, #0
     696:	d1ef      	bne.n	678 <cbprintf_package_copy+0xa4>
				out_len--;
     698:	3f01      	subs	r7, #1
		for (int i = 0; i < rws_nbr; i++) {
     69a:	e7ed      	b.n	678 <cbprintf_package_copy+0xa4>
				const char *str = *(const char **)&buf32[*str_pos];
     69c:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
     6a0:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
     6a4:	f006 f979 	bl	699a <strlen>
				if (strl && strl_cnt < strl_len) {
     6a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return 1 + strlen(str);
     6aa:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     6ac:	b133      	cbz	r3, 6bc <cbprintf_package_copy+0xe8>
     6ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
     6b0:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     6b2:	bf3e      	ittt	cc
     6b4:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     6b6:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     6ba:	3401      	addcc	r4, #1
				out_len += len;
     6bc:	4407      	add	r7, r0
			for (int i = 0; i < ros_nbr; i++) {
     6be:	e7cd      	b.n	65c <cbprintf_package_copy+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     6c0:	b12d      	cbz	r5, 6ce <cbprintf_package_copy+0xfa>
     6c2:	f01b 0404 	ands.w	r4, fp, #4
     6c6:	d0cc      	beq.n	662 <cbprintf_package_copy+0x8e>
				str_pos += ros_nbr;
     6c8:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
     6ca:	4654      	mov	r4, sl
     6cc:	e7c9      	b.n	662 <cbprintf_package_copy+0x8e>
     6ce:	462c      	mov	r4, r5
     6d0:	e7c7      	b.n	662 <cbprintf_package_copy+0x8e>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     6d2:	2a00      	cmp	r2, #0
     6d4:	d0d0      	beq.n	678 <cbprintf_package_copy+0xa4>
     6d6:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
     6da:	9201      	str	r2, [sp, #4]
     6dc:	f006 f95d 	bl	699a <strlen>
				if (strl && strl_cnt < strl_len) {
     6e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
     6e2:	f8df c188 	ldr.w	ip, [pc, #392]	; 86c <CONFIG_ISR_STACK_SIZE+0x6c>
     6e6:	9a01      	ldr	r2, [sp, #4]
     6e8:	4961      	ldr	r1, [pc, #388]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
		return 1 + strlen(str);
     6ea:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     6ec:	b133      	cbz	r3, 6fc <cbprintf_package_copy+0x128>
     6ee:	9b16      	ldr	r3, [sp, #88]	; 0x58
     6f0:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     6f2:	bf3e      	ittt	cc
     6f4:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     6f6:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     6fa:	3401      	addcc	r4, #1
				out_len += len;
     6fc:	4407      	add	r7, r0
			if (is_ro && drop_ro_str_pos) {
     6fe:	f1b9 0f00 	cmp.w	r9, #0
     702:	d0b9      	beq.n	678 <cbprintf_package_copy+0xa4>
     704:	e7c5      	b.n	692 <cbprintf_package_copy+0xbe>
     706:	f04f 0901 	mov.w	r9, #1
     70a:	e7e6      	b.n	6da <cbprintf_package_copy+0x106>
	memcpy(dst, in_packaged, args_size);
     70c:	9a03      	ldr	r2, [sp, #12]
     70e:	4631      	mov	r1, r6
     710:	4620      	mov	r0, r4
     712:	f006 f952 	bl	69ba <memcpy>
	dst += args_size;
     716:	9b03      	ldr	r3, [sp, #12]
     718:	18e3      	adds	r3, r4, r3
     71a:	9302      	str	r3, [sp, #8]
	if (ro_cpy) {
     71c:	f1ba 0f00 	cmp.w	sl, #0
     720:	d00a      	beq.n	738 <cbprintf_package_copy+0x164>
		memcpy(cpy_str_pos, str_pos, ros_nbr);
     722:	4649      	mov	r1, r9
     724:	462a      	mov	r2, r5
     726:	a806      	add	r0, sp, #24
     728:	f006 f947 	bl	69ba <memcpy>
		dst_hdr[2] = 0;
     72c:	2300      	movs	r3, #0
     72e:	70a3      	strb	r3, [r4, #2]
		str_pos += ros_nbr;
     730:	44a9      	add	r9, r5
	dst += args_size;
     732:	f8dd 8008 	ldr.w	r8, [sp, #8]
     736:	e00d      	b.n	754 <cbprintf_package_copy+0x180>
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     738:	b1bd      	cbz	r5, 76a <cbprintf_package_copy+0x196>
     73a:	f01b 0f04 	tst.w	fp, #4
     73e:	d014      	beq.n	76a <cbprintf_package_copy+0x196>
			memcpy(dst, str_pos, ros_nbr);
     740:	462a      	mov	r2, r5
     742:	4649      	mov	r1, r9
     744:	9802      	ldr	r0, [sp, #8]
     746:	f006 f938 	bl	69ba <memcpy>
			dst += ros_nbr;
     74a:	9b02      	ldr	r3, [sp, #8]
			str_pos += ros_nbr;
     74c:	44a9      	add	r9, r5
			dst += ros_nbr;
     74e:	eb03 0805 	add.w	r8, r3, r5
		scpy_cnt = 0;
     752:	4655      	mov	r5, sl
     754:	9b01      	ldr	r3, [sp, #4]
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     756:	f00b 0e02 	and.w	lr, fp, #2
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     75a:	f00b 0001 	and.w	r0, fp, #1
     75e:	464a      	mov	r2, r9
     760:	eb09 0c03 	add.w	ip, r9, r3
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     764:	f00b 0b04 	and.w	fp, fp, #4
     768:	e025      	b.n	7b6 <cbprintf_package_copy+0x1e2>
			dst_hdr[2] = 0;
     76a:	2500      	movs	r5, #0
     76c:	70a5      	strb	r5, [r4, #2]
     76e:	e7e0      	b.n	732 <cbprintf_package_copy+0x15e>
		const char *str = *(const char **)&buf32[*str_pos];
     770:	f812 3b01 	ldrb.w	r3, [r2], #1
     774:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 86c <CONFIG_ISR_STACK_SIZE+0x6c>
     778:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
     77c:	4551      	cmp	r1, sl
     77e:	d303      	bcc.n	788 <cbprintf_package_copy+0x1b4>
     780:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 870 <CONFIG_ISR_STACK_SIZE+0x70>
     784:	4551      	cmp	r1, sl
     786:	d305      	bcc.n	794 <cbprintf_package_copy+0x1c0>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     788:	f1be 0f00 	cmp.w	lr, #0
     78c:	d103      	bne.n	796 <cbprintf_package_copy+0x1c2>
				*dst++ = *str_pos;
     78e:	f808 3b01 	strb.w	r3, [r8], #1
	for (int i = 0; i < rws_nbr; i++) {
     792:	e010      	b.n	7b6 <cbprintf_package_copy+0x1e2>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     794:	b138      	cbz	r0, 7a6 <cbprintf_package_copy+0x1d2>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     796:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
     79a:	1c69      	adds	r1, r5, #1
     79c:	4455      	add	r5, sl
     79e:	f805 3c10 	strb.w	r3, [r5, #-16]
     7a2:	b2cd      	uxtb	r5, r1
     7a4:	e007      	b.n	7b6 <cbprintf_package_copy+0x1e2>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     7a6:	f1bb 0f00 	cmp.w	fp, #0
     7aa:	d004      	beq.n	7b6 <cbprintf_package_copy+0x1e2>
				*dst++ = *str_pos;
     7ac:	f808 3b01 	strb.w	r3, [r8], #1
				dst_hdr[2]++;
     7b0:	78a3      	ldrb	r3, [r4, #2]
     7b2:	3301      	adds	r3, #1
     7b4:	70a3      	strb	r3, [r4, #2]
	for (int i = 0; i < rws_nbr; i++) {
     7b6:	4594      	cmp	ip, r2
     7b8:	d1da      	bne.n	770 <cbprintf_package_copy+0x19c>
	dst_hdr[1] += scpy_cnt;
     7ba:	7863      	ldrb	r3, [r4, #1]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     7bc:	9a01      	ldr	r2, [sp, #4]
	dst_hdr[1] += scpy_cnt;
     7be:	442b      	add	r3, r5
     7c0:	7063      	strb	r3, [r4, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     7c2:	9b02      	ldr	r3, [sp, #8]
     7c4:	eba8 0b03 	sub.w	fp, r8, r3
     7c8:	78a3      	ldrb	r3, [r4, #2]
     7ca:	ebab 0b03 	sub.w	fp, fp, r3
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     7ce:	9b05      	ldr	r3, [sp, #20]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     7d0:	f884 b003 	strb.w	fp, [r4, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     7d4:	4413      	add	r3, r2
     7d6:	1aff      	subs	r7, r7, r3
     7d8:	9b03      	ldr	r3, [sp, #12]
     7da:	1aff      	subs	r7, r7, r3
	memcpy(dst, str_pos, strs_len);
     7dc:	9b01      	ldr	r3, [sp, #4]
     7de:	4640      	mov	r0, r8
     7e0:	463a      	mov	r2, r7
     7e2:	eb09 0103 	add.w	r1, r9, r3
	dst += strs_len;
     7e6:	44b8      	add	r8, r7
	memcpy(dst, str_pos, strs_len);
     7e8:	f006 f8e7 	bl	69ba <memcpy>
		return dst - dst_hdr;
     7ec:	eba8 0004 	sub.w	r0, r8, r4
	if (scpy_cnt == 0) {
     7f0:	2d00      	cmp	r5, #0
     7f2:	f43f af0d 	beq.w	610 <cbprintf_package_copy+0x3c>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
     7f6:	9b04      	ldr	r3, [sp, #16]
     7f8:	1a1c      	subs	r4, r3, r0
	if (rem <= scpy_cnt) {
     7fa:	42a5      	cmp	r5, r4
     7fc:	d302      	bcc.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
		return -ENOSPC;
     7fe:	f06f 001b 	mvn.w	r0, #27
     802:	e705      	b.n	610 <cbprintf_package_copy+0x3c>
	for (int i = 0; i < scpy_cnt; i++) {
     804:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
     808:	ab06      	add	r3, sp, #24
		uint16_t str_len = strl ? strl[i] : 0;
     80a:	9a15      	ldr	r2, [sp, #84]	; 0x54
		uint8_t loc = cpy_str_pos[i];
     80c:	f813 3009 	ldrb.w	r3, [r3, r9]
		const char *str = *(const char **)&buf32[loc];
     810:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     814:	b1c2      	cbz	r2, 848 <CONFIG_ISR_STACK_SIZE+0x48>
     816:	f832 7019 	ldrh.w	r7, [r2, r9, lsl #1]
		*dst = loc;
     81a:	46c2      	mov	sl, r8
		rem--;
     81c:	f104 3bff 	add.w	fp, r4, #4294967295
		*dst = loc;
     820:	f80a 3b01 	strb.w	r3, [sl], #1
	if (strl) {
     824:	b197      	cbz	r7, 84c <CONFIG_ISR_STACK_SIZE+0x4c>
		memcpy(dst, str, strl);
     826:	463a      	mov	r2, r7
     828:	4650      	mov	r0, sl
     82a:	f006 f8c6 	bl	69ba <memcpy>
	for (int i = 0; i < scpy_cnt; i++) {
     82e:	f109 0901 	add.w	r9, r9, #1
     832:	454d      	cmp	r5, r9
		rem -= cpy_len;
     834:	ebab 0407 	sub.w	r4, fp, r7
		dst += cpy_len;
     838:	eb0a 0807 	add.w	r8, sl, r7
	for (int i = 0; i < scpy_cnt; i++) {
     83c:	dce4      	bgt.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
	return len - rem;
     83e:	9b04      	ldr	r3, [sp, #16]
     840:	441f      	add	r7, r3
     842:	eba7 000b 	sub.w	r0, r7, fp
     846:	e6e3      	b.n	610 <cbprintf_package_copy+0x3c>
		uint16_t str_len = strl ? strl[i] : 0;
     848:	9f15      	ldr	r7, [sp, #84]	; 0x54
     84a:	e7e6      	b.n	81a <CONFIG_ISR_STACK_SIZE+0x1a>
     84c:	3901      	subs	r1, #1
	if (strl) {
     84e:	2301      	movs	r3, #1
	for (size_t i = 0; i < num; i++) {
     850:	429c      	cmp	r4, r3
     852:	d0d4      	beq.n	7fe <cbprintf_package_copy+0x22a>
		dst[i] = src[i];
     854:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     858:	f808 2003 	strb.w	r2, [r8, r3]
		if (src[i] == '\0') {
     85c:	1c58      	adds	r0, r3, #1
     85e:	b912      	cbnz	r2, 866 <CONFIG_ISR_STACK_SIZE+0x66>
		if (cpy_len < 0) {
     860:	1e1f      	subs	r7, r3, #0
     862:	dae4      	bge.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
     864:	e7cb      	b.n	7fe <cbprintf_package_copy+0x22a>
     866:	4603      	mov	r3, r0
     868:	e7f2      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
     86a:	bf00      	nop
     86c:	00007764 	.word	0x00007764
     870:	000084dc 	.word	0x000084dc

00000874 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     874:	680b      	ldr	r3, [r1, #0]
     876:	3301      	adds	r3, #1
     878:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     87a:	4b01      	ldr	r3, [pc, #4]	; (880 <char_out+0xc>)
     87c:	681b      	ldr	r3, [r3, #0]
     87e:	4718      	bx	r3
     880:	20000004 	.word	0x20000004

00000884 <__printk_hook_install>:
	_char_out = fn;
     884:	4b01      	ldr	r3, [pc, #4]	; (88c <__printk_hook_install+0x8>)
     886:	6018      	str	r0, [r3, #0]
}
     888:	4770      	bx	lr
     88a:	bf00      	nop
     88c:	20000004 	.word	0x20000004

00000890 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     890:	b507      	push	{r0, r1, r2, lr}
     892:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     894:	2100      	movs	r1, #0
{
     896:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     898:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     89a:	4803      	ldr	r0, [pc, #12]	; (8a8 <vprintk+0x18>)
     89c:	a901      	add	r1, sp, #4
     89e:	f000 f8f9 	bl	a94 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     8a2:	b003      	add	sp, #12
     8a4:	f85d fb04 	ldr.w	pc, [sp], #4
     8a8:	00000875 	.word	0x00000875

000008ac <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     8ac:	b530      	push	{r4, r5, lr}
     8ae:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     8b0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     8b4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     8b6:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     8b8:	a901      	add	r1, sp, #4
     8ba:	4805      	ldr	r0, [pc, #20]	; (8d0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     8bc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     8be:	f000 f8e9 	bl	a94 <cbvprintf>

	if (ctx.count < ctx.max) {
     8c2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     8c6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     8c8:	bfb8      	it	lt
     8ca:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     8cc:	b005      	add	sp, #20
     8ce:	bd30      	pop	{r4, r5, pc}
     8d0:	0000616f 	.word	0x0000616f

000008d4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     8d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     8d8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     8dc:	f019 0808 	ands.w	r8, r9, #8
{
     8e0:	4604      	mov	r4, r0
     8e2:	4693      	mov	fp, r2
	if (processing) {
     8e4:	d00d      	beq.n	902 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     8e6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     8e8:	bf0c      	ite	eq
     8ea:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     8ee:	f049 0920 	orrne.w	r9, r9, #32
     8f2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     8f6:	f38b 8811 	msr	BASEPRI, fp
     8fa:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     8fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     902:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     906:	2902      	cmp	r1, #2
     908:	d107      	bne.n	91a <process_event+0x46>
			evt = process_recheck(mgr);
     90a:	4620      	mov	r0, r4
     90c:	f005 fc5c 	bl	61c8 <process_recheck>
		if (evt == EVT_NOP) {
     910:	2800      	cmp	r0, #0
     912:	d0f0      	beq.n	8f6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     914:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     916:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     918:	d14e      	bne.n	9b8 <process_event+0xe4>
			res = mgr->last_res;
     91a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     91c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     91e:	2f00      	cmp	r7, #0
     920:	da15      	bge.n	94e <process_event+0x7a>
		*clients = mgr->clients;
     922:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     924:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     928:	e9c4 8800 	strd	r8, r8, [r4]
     92c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     930:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     932:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     934:	8b21      	ldrh	r1, [r4, #24]
     936:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     93a:	45ca      	cmp	sl, r9
     93c:	d002      	beq.n	944 <process_event+0x70>
		if (do_monitors
     93e:	68a3      	ldr	r3, [r4, #8]
     940:	2b00      	cmp	r3, #0
     942:	d15a      	bne.n	9fa <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     944:	b90d      	cbnz	r5, 94a <process_event+0x76>
		    || (transit != NULL)) {
     946:	2e00      	cmp	r6, #0
     948:	d071      	beq.n	a2e <process_event+0x15a>
     94a:	2300      	movs	r3, #0
     94c:	e056      	b.n	9fc <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     94e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     952:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     954:	2a01      	cmp	r2, #1
     956:	d81e      	bhi.n	996 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     958:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     95c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     95e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     960:	b289      	uxth	r1, r1
     962:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     966:	d10a      	bne.n	97e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     968:	b13d      	cbz	r5, 97a <process_event+0xa6>
     96a:	8b63      	ldrh	r3, [r4, #26]
     96c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     96e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     970:	3301      	adds	r3, #1
     972:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     974:	2a00      	cmp	r2, #0
     976:	d1fa      	bne.n	96e <process_event+0x9a>
     978:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     97a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     97e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     980:	4620      	mov	r0, r4
     982:	f005 fc21 	bl	61c8 <process_recheck>
     986:	4606      	mov	r6, r0
     988:	2800      	cmp	r0, #0
     98a:	d0d3      	beq.n	934 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     98c:	8b23      	ldrh	r3, [r4, #24]
     98e:	f043 0320 	orr.w	r3, r3, #32
     992:	8323      	strh	r3, [r4, #24]
     994:	e7cd      	b.n	932 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     996:	2b04      	cmp	r3, #4
     998:	d10c      	bne.n	9b4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     99a:	f021 0107 	bic.w	r1, r1, #7
     99e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     9a0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     9a2:	4620      	mov	r0, r4
     9a4:	f005 fc10 	bl	61c8 <process_recheck>
     9a8:	4605      	mov	r5, r0
     9aa:	2800      	cmp	r0, #0
     9ac:	d0c1      	beq.n	932 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     9ae:	f041 0120 	orr.w	r1, r1, #32
     9b2:	8321      	strh	r1, [r4, #24]
     9b4:	2500      	movs	r5, #0
     9b6:	e7bc      	b.n	932 <process_event+0x5e>
		} else if (evt == EVT_START) {
     9b8:	2803      	cmp	r0, #3
     9ba:	d109      	bne.n	9d0 <process_event+0xfc>
			transit = mgr->transitions->start;
     9bc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9be:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     9c2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9c4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     9c8:	8323      	strh	r3, [r4, #24]
}
     9ca:	2500      	movs	r5, #0
		res = 0;
     9cc:	462f      	mov	r7, r5
     9ce:	e7b1      	b.n	934 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     9d0:	2804      	cmp	r0, #4
     9d2:	d106      	bne.n	9e2 <process_event+0x10e>
			transit = mgr->transitions->stop;
     9d4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9d6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     9da:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9dc:	f043 0304 	orr.w	r3, r3, #4
     9e0:	e7f2      	b.n	9c8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     9e2:	2805      	cmp	r0, #5
     9e4:	d106      	bne.n	9f4 <process_event+0x120>
			transit = mgr->transitions->reset;
     9e6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9e8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     9ec:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     9ee:	f043 0305 	orr.w	r3, r3, #5
     9f2:	e7e9      	b.n	9c8 <process_event+0xf4>
     9f4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     9f6:	462e      	mov	r6, r5
     9f8:	e7e8      	b.n	9cc <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     9fa:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     9fc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     a00:	8321      	strh	r1, [r4, #24]
     a02:	f38b 8811 	msr	BASEPRI, fp
     a06:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     a0a:	b9fb      	cbnz	r3, a4c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     a0c:	bb85      	cbnz	r5, a70 <process_event+0x19c>
			if (transit != NULL) {
     a0e:	b116      	cbz	r6, a16 <process_event+0x142>
				transit(mgr, transition_complete);
     a10:	491f      	ldr	r1, [pc, #124]	; (a90 <process_event+0x1bc>)
     a12:	4620      	mov	r0, r4
     a14:	47b0      	blx	r6
	__asm__ volatile(
     a16:	f04f 0320 	mov.w	r3, #32
     a1a:	f3ef 8b11 	mrs	fp, BASEPRI
     a1e:	f383 8812 	msr	BASEPRI_MAX, r3
     a22:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     a26:	8b23      	ldrh	r3, [r4, #24]
     a28:	f023 0308 	bic.w	r3, r3, #8
     a2c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     a2e:	8b23      	ldrh	r3, [r4, #24]
     a30:	06da      	lsls	r2, r3, #27
     a32:	d525      	bpl.n	a80 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a34:	f023 0310 	bic.w	r3, r3, #16
     a38:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     a3a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     a3c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     a40:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     a44:	2900      	cmp	r1, #0
     a46:	f47f af5e 	bne.w	906 <process_event+0x32>
out:
     a4a:	e754      	b.n	8f6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     a4c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     a4e:	2900      	cmp	r1, #0
     a50:	d0dc      	beq.n	a0c <process_event+0x138>
	return node->next;
     a52:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     a56:	f8d1 b004 	ldr.w	fp, [r1, #4]
     a5a:	463b      	mov	r3, r7
     a5c:	4652      	mov	r2, sl
     a5e:	4620      	mov	r0, r4
     a60:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     a62:	f1b9 0f00 	cmp.w	r9, #0
     a66:	d0d1      	beq.n	a0c <process_event+0x138>
     a68:	4649      	mov	r1, r9
     a6a:	f8d9 9000 	ldr.w	r9, [r9]
     a6e:	e7f2      	b.n	a56 <process_event+0x182>
     a70:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     a72:	463b      	mov	r3, r7
     a74:	4652      	mov	r2, sl
     a76:	4620      	mov	r0, r4
     a78:	682d      	ldr	r5, [r5, #0]
     a7a:	f005 fbc1 	bl	6200 <notify_one>
     a7e:	e7c5      	b.n	a0c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     a80:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     a84:	bf1e      	ittt	ne
     a86:	f023 0320 	bicne.w	r3, r3, #32
     a8a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     a8c:	2102      	movne	r1, #2
     a8e:	e7d5      	b.n	a3c <process_event+0x168>
     a90:	0000622d 	.word	0x0000622d

00000a94 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a98:	b091      	sub	sp, #68	; 0x44
     a9a:	468b      	mov	fp, r1
     a9c:	9002      	str	r0, [sp, #8]
     a9e:	4692      	mov	sl, r2
     aa0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     aa2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     aa4:	f89a 0000 	ldrb.w	r0, [sl]
     aa8:	b908      	cbnz	r0, aae <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     aaa:	4628      	mov	r0, r5
     aac:	e35f      	b.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
		if (*fp != '%') {
     aae:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     ab0:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     ab4:	d007      	beq.n	ac6 <cbvprintf+0x32>
			OUTC('%');
     ab6:	9b02      	ldr	r3, [sp, #8]
     ab8:	4659      	mov	r1, fp
     aba:	4798      	blx	r3
     abc:	2800      	cmp	r0, #0
     abe:	f2c0 8356 	blt.w	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
     ac2:	3501      	adds	r5, #1
			break;
     ac4:	e212      	b.n	eec <cbvprintf+0x458>
		} state = {
     ac6:	2218      	movs	r2, #24
     ac8:	2100      	movs	r1, #0
     aca:	a80a      	add	r0, sp, #40	; 0x28
     acc:	f005 ff80 	bl	69d0 <memset>
	if (*sp == '%') {
     ad0:	f89a 3001 	ldrb.w	r3, [sl, #1]
     ad4:	2b25      	cmp	r3, #37	; 0x25
     ad6:	d078      	beq.n	bca <cbvprintf+0x136>
     ad8:	2200      	movs	r2, #0
     ada:	4610      	mov	r0, r2
     adc:	4696      	mov	lr, r2
     ade:	4694      	mov	ip, r2
     ae0:	4616      	mov	r6, r2
     ae2:	4639      	mov	r1, r7
		switch (*sp) {
     ae4:	f817 3b01 	ldrb.w	r3, [r7], #1
     ae8:	2b2b      	cmp	r3, #43	; 0x2b
     aea:	f000 809d 	beq.w	c28 <cbvprintf+0x194>
     aee:	f200 8094 	bhi.w	c1a <cbvprintf+0x186>
     af2:	2b20      	cmp	r3, #32
     af4:	f000 809b 	beq.w	c2e <cbvprintf+0x19a>
     af8:	2b23      	cmp	r3, #35	; 0x23
     afa:	f000 809b 	beq.w	c34 <cbvprintf+0x1a0>
     afe:	b12e      	cbz	r6, b0c <cbvprintf+0x78>
     b00:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     b04:	f046 0604 	orr.w	r6, r6, #4
     b08:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     b0c:	f1bc 0f00 	cmp.w	ip, #0
     b10:	d005      	beq.n	b1e <cbvprintf+0x8a>
     b12:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     b16:	f046 0608 	orr.w	r6, r6, #8
     b1a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     b1e:	f1be 0f00 	cmp.w	lr, #0
     b22:	d005      	beq.n	b30 <cbvprintf+0x9c>
     b24:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     b28:	f046 0610 	orr.w	r6, r6, #16
     b2c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     b30:	b128      	cbz	r0, b3e <cbvprintf+0xaa>
     b32:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     b36:	f040 0020 	orr.w	r0, r0, #32
     b3a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     b3e:	b12a      	cbz	r2, b4c <cbvprintf+0xb8>
     b40:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     b48:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     b4c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     b50:	f002 0044 	and.w	r0, r2, #68	; 0x44
     b54:	2844      	cmp	r0, #68	; 0x44
     b56:	d103      	bne.n	b60 <cbvprintf+0xcc>
		conv->flag_zero = false;
     b58:	f36f 1286 	bfc	r2, #6, #1
     b5c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     b60:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b64:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     b6a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     b6e:	d17b      	bne.n	c68 <cbvprintf+0x1d4>
		conv->width_star = true;
     b70:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b74:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     b78:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     b7a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     b7e:	781a      	ldrb	r2, [r3, #0]
     b80:	2a2e      	cmp	r2, #46	; 0x2e
     b82:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     b86:	bf0c      	ite	eq
     b88:	2101      	moveq	r1, #1
     b8a:	2100      	movne	r1, #0
     b8c:	f361 0241 	bfi	r2, r1, #1, #1
     b90:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     b94:	d174      	bne.n	c80 <cbvprintf+0x1ec>
	if (*sp == '*') {
     b96:	785a      	ldrb	r2, [r3, #1]
     b98:	2a2a      	cmp	r2, #42	; 0x2a
     b9a:	d06a      	beq.n	c72 <cbvprintf+0x1de>
	++sp;
     b9c:	3301      	adds	r3, #1
	size_t val = 0;
     b9e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     ba0:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     ba2:	4618      	mov	r0, r3
     ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
     ba8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     bac:	2f09      	cmp	r7, #9
     bae:	f240 808e 	bls.w	cce <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     bb2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     bb6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     bb8:	f3c2 0040 	ubfx	r0, r2, #1, #1
     bbc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     bc0:	f361 0241 	bfi	r2, r1, #1, #1
     bc4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     bc8:	e05a      	b.n	c80 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     bca:	f10a 0702 	add.w	r7, sl, #2
     bce:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     bd2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     bd6:	07d9      	lsls	r1, r3, #31
     bd8:	f140 8149 	bpl.w	e6e <cbvprintf+0x3da>
			width = va_arg(ap, int);
     bdc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     be0:	f1b9 0f00 	cmp.w	r9, #0
     be4:	da07      	bge.n	bf6 <cbvprintf+0x162>
				conv->flag_dash = true;
     be6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     bea:	f042 0204 	orr.w	r2, r2, #4
     bee:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     bf2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     bf6:	075a      	lsls	r2, r3, #29
     bf8:	f140 8142 	bpl.w	e80 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
     bfc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     c00:	f1b8 0f00 	cmp.w	r8, #0
     c04:	f280 8141 	bge.w	e8a <cbvprintf+0x3f6>
				conv->prec_present = false;
     c08:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     c0c:	f36f 0341 	bfc	r3, #1, #1
     c10:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     c14:	f04f 38ff 	mov.w	r8, #4294967295
     c18:	e137      	b.n	e8a <cbvprintf+0x3f6>
		switch (*sp) {
     c1a:	2b2d      	cmp	r3, #45	; 0x2d
     c1c:	d00c      	beq.n	c38 <cbvprintf+0x1a4>
     c1e:	2b30      	cmp	r3, #48	; 0x30
     c20:	f47f af6d 	bne.w	afe <cbvprintf+0x6a>
			conv->flag_zero = true;
     c24:	2201      	movs	r2, #1
	} while (loop);
     c26:	e75c      	b.n	ae2 <cbvprintf+0x4e>
			conv->flag_plus = true;
     c28:	f04f 0c01 	mov.w	ip, #1
     c2c:	e759      	b.n	ae2 <cbvprintf+0x4e>
			conv->flag_space = true;
     c2e:	f04f 0e01 	mov.w	lr, #1
     c32:	e756      	b.n	ae2 <cbvprintf+0x4e>
			conv->flag_hash = true;
     c34:	2001      	movs	r0, #1
     c36:	e754      	b.n	ae2 <cbvprintf+0x4e>
		switch (*sp) {
     c38:	2601      	movs	r6, #1
     c3a:	e752      	b.n	ae2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     c3c:	fb0c 0202 	mla	r2, ip, r2, r0
     c40:	3a30      	subs	r2, #48	; 0x30
     c42:	4633      	mov	r3, r6
     c44:	461e      	mov	r6, r3
     c46:	f816 0b01 	ldrb.w	r0, [r6], #1
     c4a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     c4e:	2f09      	cmp	r7, #9
     c50:	d9f4      	bls.n	c3c <cbvprintf+0x1a8>
	if (sp != wp) {
     c52:	4299      	cmp	r1, r3
     c54:	d093      	beq.n	b7e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     c56:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     c5a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     c5c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     c5e:	f362 0141 	bfi	r1, r2, #1, #1
     c62:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     c66:	e78a      	b.n	b7e <cbvprintf+0xea>
     c68:	460b      	mov	r3, r1
	size_t val = 0;
     c6a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     c6c:	f04f 0c0a 	mov.w	ip, #10
     c70:	e7e8      	b.n	c44 <cbvprintf+0x1b0>
		conv->prec_star = true;
     c72:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     c76:	f042 0204 	orr.w	r2, r2, #4
     c7a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     c7e:	3302      	adds	r3, #2
	switch (*sp) {
     c80:	461f      	mov	r7, r3
     c82:	f817 2b01 	ldrb.w	r2, [r7], #1
     c86:	2a6c      	cmp	r2, #108	; 0x6c
     c88:	d041      	beq.n	d0e <cbvprintf+0x27a>
     c8a:	d825      	bhi.n	cd8 <cbvprintf+0x244>
     c8c:	2a68      	cmp	r2, #104	; 0x68
     c8e:	d02b      	beq.n	ce8 <cbvprintf+0x254>
     c90:	2a6a      	cmp	r2, #106	; 0x6a
     c92:	d046      	beq.n	d22 <cbvprintf+0x28e>
     c94:	2a4c      	cmp	r2, #76	; 0x4c
     c96:	d04c      	beq.n	d32 <cbvprintf+0x29e>
     c98:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     c9a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     c9e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     ca2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     ca6:	2a78      	cmp	r2, #120	; 0x78
     ca8:	f200 80d9 	bhi.w	e5e <cbvprintf+0x3ca>
     cac:	2a57      	cmp	r2, #87	; 0x57
     cae:	d84d      	bhi.n	d4c <cbvprintf+0x2b8>
     cb0:	2a41      	cmp	r2, #65	; 0x41
     cb2:	d003      	beq.n	cbc <cbvprintf+0x228>
     cb4:	3a45      	subs	r2, #69	; 0x45
     cb6:	2a02      	cmp	r2, #2
     cb8:	f200 80d1 	bhi.w	e5e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
     cbc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     cc0:	2204      	movs	r2, #4
     cc2:	f362 0302 	bfi	r3, r2, #0, #3
     cc6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     cca:	2301      	movs	r3, #1
			break;
     ccc:	e09e      	b.n	e0c <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
     cce:	fb06 2101 	mla	r1, r6, r1, r2
     cd2:	3930      	subs	r1, #48	; 0x30
     cd4:	4603      	mov	r3, r0
     cd6:	e764      	b.n	ba2 <cbvprintf+0x10e>
	switch (*sp) {
     cd8:	2a74      	cmp	r2, #116	; 0x74
     cda:	d026      	beq.n	d2a <cbvprintf+0x296>
     cdc:	2a7a      	cmp	r2, #122	; 0x7a
     cde:	d1db      	bne.n	c98 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     ce0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     ce4:	2206      	movs	r2, #6
     ce6:	e00d      	b.n	d04 <cbvprintf+0x270>
		if (*++sp == 'h') {
     ce8:	785a      	ldrb	r2, [r3, #1]
     cea:	2a68      	cmp	r2, #104	; 0x68
     cec:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     cf0:	d106      	bne.n	d00 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     cf2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     cf4:	f361 02c6 	bfi	r2, r1, #3, #4
     cf8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     cfc:	1c9f      	adds	r7, r3, #2
     cfe:	e7cc      	b.n	c9a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     d00:	4613      	mov	r3, r2
     d02:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     d04:	f362 03c6 	bfi	r3, r2, #3, #4
     d08:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     d0c:	e7c5      	b.n	c9a <cbvprintf+0x206>
		if (*++sp == 'l') {
     d0e:	785a      	ldrb	r2, [r3, #1]
     d10:	2a6c      	cmp	r2, #108	; 0x6c
     d12:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     d16:	d101      	bne.n	d1c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     d18:	2104      	movs	r1, #4
     d1a:	e7eb      	b.n	cf4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     d1c:	4613      	mov	r3, r2
     d1e:	2203      	movs	r2, #3
     d20:	e7f0      	b.n	d04 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     d22:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d26:	2205      	movs	r2, #5
     d28:	e7ec      	b.n	d04 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     d2a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     d2e:	2207      	movs	r2, #7
     d30:	e7e8      	b.n	d04 <cbvprintf+0x270>
		conv->unsupported = true;
     d32:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     d36:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     d3a:	f023 0302 	bic.w	r3, r3, #2
     d3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     d42:	f043 0302 	orr.w	r3, r3, #2
     d46:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     d4a:	e7a6      	b.n	c9a <cbvprintf+0x206>
	switch (conv->specifier) {
     d4c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     d50:	2920      	cmp	r1, #32
     d52:	f200 8084 	bhi.w	e5e <cbvprintf+0x3ca>
     d56:	a001      	add	r0, pc, #4	; (adr r0, d5c <cbvprintf+0x2c8>)
     d58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     d5c:	00000e21 	.word	0x00000e21
     d60:	00000e5f 	.word	0x00000e5f
     d64:	00000e5f 	.word	0x00000e5f
     d68:	00000e5f 	.word	0x00000e5f
     d6c:	00000e5f 	.word	0x00000e5f
     d70:	00000e5f 	.word	0x00000e5f
     d74:	00000e5f 	.word	0x00000e5f
     d78:	00000e5f 	.word	0x00000e5f
     d7c:	00000e5f 	.word	0x00000e5f
     d80:	00000cbd 	.word	0x00000cbd
     d84:	00000e5f 	.word	0x00000e5f
     d88:	00000e21 	.word	0x00000e21
     d8c:	00000de1 	.word	0x00000de1
     d90:	00000cbd 	.word	0x00000cbd
     d94:	00000cbd 	.word	0x00000cbd
     d98:	00000cbd 	.word	0x00000cbd
     d9c:	00000e5f 	.word	0x00000e5f
     da0:	00000de1 	.word	0x00000de1
     da4:	00000e5f 	.word	0x00000e5f
     da8:	00000e5f 	.word	0x00000e5f
     dac:	00000e5f 	.word	0x00000e5f
     db0:	00000e5f 	.word	0x00000e5f
     db4:	00000e29 	.word	0x00000e29
     db8:	00000e21 	.word	0x00000e21
     dbc:	00000e45 	.word	0x00000e45
     dc0:	00000e5f 	.word	0x00000e5f
     dc4:	00000e5f 	.word	0x00000e5f
     dc8:	00000e45 	.word	0x00000e45
     dcc:	00000e5f 	.word	0x00000e5f
     dd0:	00000e21 	.word	0x00000e21
     dd4:	00000e5f 	.word	0x00000e5f
     dd8:	00000e5f 	.word	0x00000e5f
     ddc:	00000e21 	.word	0x00000e21
		conv->specifier_cat = SPECIFIER_SINT;
     de0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     de4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     de6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     dea:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     dee:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     df0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     df4:	bf02      	ittt	eq
     df6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     dfa:	f041 0101 	orreq.w	r1, r1, #1
     dfe:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     e02:	2a63      	cmp	r2, #99	; 0x63
     e04:	d131      	bne.n	e6a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     e06:	3b00      	subs	r3, #0
     e08:	bf18      	it	ne
     e0a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     e0c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e10:	f3c2 0140 	ubfx	r1, r2, #1, #1
     e14:	430b      	orrs	r3, r1
     e16:	f363 0241 	bfi	r2, r3, #1, #1
     e1a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     e1e:	e6d8      	b.n	bd2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     e20:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     e24:	2002      	movs	r0, #2
     e26:	e7de      	b.n	de6 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
     e28:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e2c:	f003 0378 	and.w	r3, r3, #120	; 0x78
     e30:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     e34:	2103      	movs	r1, #3
     e36:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     e3a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     e3c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     e40:	4143      	adcs	r3, r0
     e42:	e7e3      	b.n	e0c <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
     e44:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     e48:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     e4a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     e4e:	f361 0202 	bfi	r2, r1, #0, #3
     e52:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     e56:	bf14      	ite	ne
     e58:	2301      	movne	r3, #1
     e5a:	2300      	moveq	r3, #0
     e5c:	e7d6      	b.n	e0c <cbvprintf+0x378>
		conv->invalid = true;
     e5e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     e62:	f043 0301 	orr.w	r3, r3, #1
     e66:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     e6a:	2300      	movs	r3, #0
     e6c:	e7ce      	b.n	e0c <cbvprintf+0x378>
		} else if (conv->width_present) {
     e6e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     e72:	2a00      	cmp	r2, #0
			width = conv->width_value;
     e74:	bfb4      	ite	lt
     e76:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     e7a:	f04f 39ff 	movge.w	r9, #4294967295
     e7e:	e6ba      	b.n	bf6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     e80:	079b      	lsls	r3, r3, #30
     e82:	f57f aec7 	bpl.w	c14 <cbvprintf+0x180>
			precision = conv->prec_value;
     e86:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     e8a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     e8e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     e90:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     e94:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     e98:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     e9c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     e9e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     ea2:	d138      	bne.n	f16 <cbvprintf+0x482>
			switch (length_mod) {
     ea4:	1ecb      	subs	r3, r1, #3
     ea6:	2b04      	cmp	r3, #4
     ea8:	d822      	bhi.n	ef0 <cbvprintf+0x45c>
     eaa:	e8df f003 	tbb	[pc, r3]
     eae:	0903      	.short	0x0903
     eb0:	2109      	.short	0x2109
     eb2:	21          	.byte	0x21
     eb3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     eb4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     eb8:	17da      	asrs	r2, r3, #31
     eba:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     ebe:	e006      	b.n	ece <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
     ec0:	3407      	adds	r4, #7
     ec2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     ec6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     eca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     ece:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ed2:	f013 0603 	ands.w	r6, r3, #3
     ed6:	d056      	beq.n	f86 <cbvprintf+0x4f2>
			OUTS(sp, fp);
     ed8:	9802      	ldr	r0, [sp, #8]
     eda:	463b      	mov	r3, r7
     edc:	4652      	mov	r2, sl
     ede:	4659      	mov	r1, fp
     ee0:	f005 fa6d 	bl	63be <outs>
     ee4:	2800      	cmp	r0, #0
     ee6:	f2c0 8142 	blt.w	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
     eea:	4405      	add	r5, r0
			continue;
     eec:	46ba      	mov	sl, r7
     eee:	e5d9      	b.n	aa4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ef0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     ef4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ef6:	ea4f 72e3 	mov.w	r2, r3, asr #31
     efa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     efe:	d105      	bne.n	f0c <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
     f00:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     f04:	930a      	str	r3, [sp, #40]	; 0x28
     f06:	2300      	movs	r3, #0
     f08:	930b      	str	r3, [sp, #44]	; 0x2c
     f0a:	e7e0      	b.n	ece <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
     f0c:	2902      	cmp	r1, #2
     f0e:	d1de      	bne.n	ece <cbvprintf+0x43a>
				value->sint = (short)value->sint;
     f10:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     f14:	e7d0      	b.n	eb8 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
     f16:	2b02      	cmp	r3, #2
     f18:	d123      	bne.n	f62 <cbvprintf+0x4ce>
			switch (length_mod) {
     f1a:	1ecb      	subs	r3, r1, #3
     f1c:	2b04      	cmp	r3, #4
     f1e:	d813      	bhi.n	f48 <cbvprintf+0x4b4>
     f20:	e8df f003 	tbb	[pc, r3]
     f24:	120a0a03 	.word	0x120a0a03
     f28:	12          	.byte	0x12
     f29:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     f2a:	6822      	ldr	r2, [r4, #0]
     f2c:	920a      	str	r2, [sp, #40]	; 0x28
     f2e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     f30:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     f32:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     f34:	4604      	mov	r4, r0
     f36:	e7ca      	b.n	ece <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
     f38:	1de0      	adds	r0, r4, #7
     f3a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     f3e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     f42:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     f46:	e7f5      	b.n	f34 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
     f48:	f854 3b04 	ldr.w	r3, [r4], #4
     f4c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     f4e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     f50:	f04f 0300 	mov.w	r3, #0
     f54:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     f56:	d0d3      	beq.n	f00 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
     f58:	2902      	cmp	r1, #2
     f5a:	d1b8      	bne.n	ece <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
     f5c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     f60:	e7d0      	b.n	f04 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
     f62:	2b04      	cmp	r3, #4
     f64:	d109      	bne.n	f7a <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
     f66:	1de3      	adds	r3, r4, #7
     f68:	f023 0307 	bic.w	r3, r3, #7
     f6c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     f70:	e9d3 2300 	ldrd	r2, r3, [r3]
     f74:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     f78:	e7a9      	b.n	ece <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
     f7a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     f7c:	bf04      	itt	eq
     f7e:	f854 3b04 	ldreq.w	r3, [r4], #4
     f82:	930a      	streq	r3, [sp, #40]	; 0x28
     f84:	e7a3      	b.n	ece <cbvprintf+0x43a>
		switch (conv->specifier) {
     f86:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     f8a:	2878      	cmp	r0, #120	; 0x78
     f8c:	d8ae      	bhi.n	eec <cbvprintf+0x458>
     f8e:	2862      	cmp	r0, #98	; 0x62
     f90:	d822      	bhi.n	fd8 <cbvprintf+0x544>
     f92:	2825      	cmp	r0, #37	; 0x25
     f94:	f43f ad8f 	beq.w	ab6 <cbvprintf+0x22>
     f98:	2858      	cmp	r0, #88	; 0x58
     f9a:	d1a7      	bne.n	eec <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
     f9c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     fa0:	9300      	str	r3, [sp, #0]
     fa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     fa6:	ab04      	add	r3, sp, #16
     fa8:	aa0c      	add	r2, sp, #48	; 0x30
     faa:	f005 f9c2 	bl	6332 <encode_uint>
     fae:	4682      	mov	sl, r0
			if (precision >= 0) {
     fb0:	f1b8 0f00 	cmp.w	r8, #0
     fb4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     fb8:	db0c      	blt.n	fd4 <cbvprintf+0x540>
				conv->flag_zero = false;
     fba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     fbe:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     fc2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     fc6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     fc8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     fcc:	d902      	bls.n	fd4 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
     fce:	eba8 0303 	sub.w	r3, r8, r3
     fd2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     fd4:	4680      	mov	r8, r0
     fd6:	e03d      	b.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
		switch (conv->specifier) {
     fd8:	3863      	subs	r0, #99	; 0x63
     fda:	2815      	cmp	r0, #21
     fdc:	d886      	bhi.n	eec <cbvprintf+0x458>
     fde:	a201      	add	r2, pc, #4	; (adr r2, fe4 <cbvprintf+0x550>)
     fe0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     fe4:	00001065 	.word	0x00001065
     fe8:	000010c9 	.word	0x000010c9
     fec:	00000eed 	.word	0x00000eed
     ff0:	00000eed 	.word	0x00000eed
     ff4:	00000eed 	.word	0x00000eed
     ff8:	00000eed 	.word	0x00000eed
     ffc:	000010c9 	.word	0x000010c9
    1000:	00000eed 	.word	0x00000eed
    1004:	00000eed 	.word	0x00000eed
    1008:	00000eed 	.word	0x00000eed
    100c:	00000eed 	.word	0x00000eed
    1010:	00001123 	.word	0x00001123
    1014:	000010f1 	.word	0x000010f1
    1018:	000010f5 	.word	0x000010f5
    101c:	00000eed 	.word	0x00000eed
    1020:	00000eed 	.word	0x00000eed
    1024:	0000103d 	.word	0x0000103d
    1028:	00000eed 	.word	0x00000eed
    102c:	000010f1 	.word	0x000010f1
    1030:	00000eed 	.word	0x00000eed
    1034:	00000eed 	.word	0x00000eed
    1038:	000010f1 	.word	0x000010f1
			if (precision >= 0) {
    103c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1040:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1044:	db0a      	blt.n	105c <CONFIG_FPROTECT_BLOCK_SIZE+0x5c>
				len = strnlen(bps, precision);
    1046:	4641      	mov	r1, r8
    1048:	4650      	mov	r0, sl
    104a:	f005 fcad 	bl	69a8 <strnlen>
			bpe = bps + len;
    104e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1052:	2600      	movs	r6, #0
		if (bps == NULL) {
    1054:	f1ba 0f00 	cmp.w	sl, #0
    1058:	d10c      	bne.n	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
    105a:	e747      	b.n	eec <cbvprintf+0x458>
				len = strlen(bps);
    105c:	4650      	mov	r0, sl
    105e:	f005 fc9c 	bl	699a <strlen>
    1062:	e7f4      	b.n	104e <CONFIG_FPROTECT_BLOCK_SIZE+0x4e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1066:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    106a:	2600      	movs	r6, #0
			bps = buf;
    106c:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1070:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1074:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1078:	b106      	cbz	r6, 107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
			nj_len += 1U;
    107a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    107c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1080:	06d0      	lsls	r0, r2, #27
    1082:	d568      	bpl.n	1156 <CONFIG_FPROTECT_BLOCK_SIZE+0x156>
			nj_len += 2U;
    1084:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1086:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1088:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    108a:	bf48      	it	mi
    108c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    108e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1090:	bf48      	it	mi
    1092:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1094:	f1b9 0f00 	cmp.w	r9, #0
    1098:	dd76      	ble.n	1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
			if (!conv->flag_dash) {
    109a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    109e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    10a2:	f3c2 0380 	ubfx	r3, r2, #2, #1
    10a6:	9303      	str	r3, [sp, #12]
    10a8:	0753      	lsls	r3, r2, #29
    10aa:	d46d      	bmi.n	1188 <CONFIG_FPROTECT_BLOCK_SIZE+0x188>
				if (conv->flag_zero) {
    10ac:	0650      	lsls	r0, r2, #25
    10ae:	d561      	bpl.n	1174 <CONFIG_FPROTECT_BLOCK_SIZE+0x174>
					if (sign != 0) {
    10b0:	b146      	cbz	r6, 10c4 <CONFIG_FPROTECT_BLOCK_SIZE+0xc4>
						OUTC(sign);
    10b2:	9b02      	ldr	r3, [sp, #8]
    10b4:	4659      	mov	r1, fp
    10b6:	4630      	mov	r0, r6
    10b8:	4798      	blx	r3
    10ba:	2800      	cmp	r0, #0
    10bc:	db57      	blt.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
						sign = 0;
    10be:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    10c0:	3501      	adds	r5, #1
						sign = 0;
    10c2:	461e      	mov	r6, r3
					pad = '0';
    10c4:	2330      	movs	r3, #48	; 0x30
    10c6:	e056      	b.n	1176 <CONFIG_FPROTECT_BLOCK_SIZE+0x176>
			if (conv->flag_plus) {
    10c8:	071e      	lsls	r6, r3, #28
    10ca:	d40f      	bmi.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
				sign = ' ';
    10cc:	f013 0610 	ands.w	r6, r3, #16
    10d0:	bf18      	it	ne
    10d2:	2620      	movne	r6, #32
			sint = value->sint;
    10d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    10d8:	2b00      	cmp	r3, #0
    10da:	f6bf af5f 	bge.w	f9c <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    10de:	4252      	negs	r2, r2
    10e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    10e4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    10e8:	262d      	movs	r6, #45	; 0x2d
    10ea:	e757      	b.n	f9c <cbvprintf+0x508>
				sign = '+';
    10ec:	262b      	movs	r6, #43	; 0x2b
    10ee:	e7f1      	b.n	10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>
		switch (conv->specifier) {
    10f0:	2600      	movs	r6, #0
    10f2:	e753      	b.n	f9c <cbvprintf+0x508>
			if (value->ptr != NULL) {
    10f4:	980a      	ldr	r0, [sp, #40]	; 0x28
    10f6:	b340      	cbz	r0, 114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    10f8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    10fc:	9300      	str	r3, [sp, #0]
    10fe:	aa0c      	add	r2, sp, #48	; 0x30
    1100:	ab04      	add	r3, sp, #16
    1102:	2100      	movs	r1, #0
    1104:	f005 f915 	bl	6332 <encode_uint>
				conv->altform_0c = true;
    1108:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    110c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1110:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1114:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1118:	4682      	mov	sl, r0
				conv->altform_0c = true;
    111a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    111e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1120:	e746      	b.n	fb0 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    1122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1124:	2907      	cmp	r1, #7
    1126:	f63f aee1 	bhi.w	eec <cbvprintf+0x458>
    112a:	e8df f001 	tbb	[pc, r1]
    112e:	040c      	.short	0x040c
    1130:	08080c06 	.word	0x08080c06
    1134:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1136:	701d      	strb	r5, [r3, #0]
		break;
    1138:	e6d8      	b.n	eec <cbvprintf+0x458>
		*(short *)dp = (short)count;
    113a:	801d      	strh	r5, [r3, #0]
		break;
    113c:	e6d6      	b.n	eec <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    113e:	17ea      	asrs	r2, r5, #31
    1140:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1144:	e6d2      	b.n	eec <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1146:	601d      	str	r5, [r3, #0]
		break;
    1148:	e6d0      	b.n	eec <cbvprintf+0x458>
			bps = "(nil)";
    114a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1214 <CONFIG_FPROTECT_BLOCK_SIZE+0x214>
    114e:	4606      	mov	r6, r0
			bpe = bps + 5;
    1150:	f10a 0805 	add.w	r8, sl, #5
    1154:	e78e      	b.n	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
		} else if (conv->altform_0) {
    1156:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1158:	bf48      	it	mi
    115a:	3301      	addmi	r3, #1
    115c:	e793      	b.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
					OUTC(pad);
    115e:	4618      	mov	r0, r3
    1160:	9303      	str	r3, [sp, #12]
    1162:	4659      	mov	r1, fp
    1164:	9b02      	ldr	r3, [sp, #8]
    1166:	4798      	blx	r3
    1168:	2800      	cmp	r0, #0
    116a:	9b03      	ldr	r3, [sp, #12]
    116c:	da04      	bge.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
#undef OUTS
#undef OUTC
}
    116e:	b011      	add	sp, #68	; 0x44
    1170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1174:	2320      	movs	r3, #32
    1176:	444d      	add	r5, r9
    1178:	464a      	mov	r2, r9
				while (width-- > 0) {
    117a:	2a00      	cmp	r2, #0
    117c:	eba5 0109 	sub.w	r1, r5, r9
    1180:	f109 39ff 	add.w	r9, r9, #4294967295
    1184:	dceb      	bgt.n	115e <CONFIG_FPROTECT_BLOCK_SIZE+0x15e>
    1186:	460d      	mov	r5, r1
		if (sign != 0) {
    1188:	b136      	cbz	r6, 1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>
			OUTC(sign);
    118a:	9b02      	ldr	r3, [sp, #8]
    118c:	4659      	mov	r1, fp
    118e:	4630      	mov	r0, r6
    1190:	4798      	blx	r3
    1192:	2800      	cmp	r0, #0
    1194:	dbeb      	blt.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    1196:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1198:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    119c:	06d9      	lsls	r1, r3, #27
    119e:	d401      	bmi.n	11a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a4>
    11a0:	071a      	lsls	r2, r3, #28
    11a2:	d506      	bpl.n	11b2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b2>
				OUTC('0');
    11a4:	9b02      	ldr	r3, [sp, #8]
    11a6:	4659      	mov	r1, fp
    11a8:	2030      	movs	r0, #48	; 0x30
    11aa:	4798      	blx	r3
    11ac:	2800      	cmp	r0, #0
    11ae:	dbde      	blt.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    11b0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    11b2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    11b6:	06db      	lsls	r3, r3, #27
    11b8:	d507      	bpl.n	11ca <CONFIG_FPROTECT_BLOCK_SIZE+0x1ca>
				OUTC(conv->specifier);
    11ba:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    11be:	9b02      	ldr	r3, [sp, #8]
    11c0:	4659      	mov	r1, fp
    11c2:	4798      	blx	r3
    11c4:	2800      	cmp	r0, #0
    11c6:	dbd2      	blt.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    11c8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    11ca:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    11cc:	442e      	add	r6, r5
    11ce:	1b73      	subs	r3, r6, r5
    11d0:	2b00      	cmp	r3, #0
    11d2:	dc16      	bgt.n	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
			OUTS(bps, bpe);
    11d4:	9802      	ldr	r0, [sp, #8]
    11d6:	4643      	mov	r3, r8
    11d8:	4652      	mov	r2, sl
    11da:	4659      	mov	r1, fp
    11dc:	f005 f8ef 	bl	63be <outs>
    11e0:	2800      	cmp	r0, #0
    11e2:	dbc4      	blt.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    11e4:	4405      	add	r5, r0
		while (width > 0) {
    11e6:	44a9      	add	r9, r5
    11e8:	eba9 0305 	sub.w	r3, r9, r5
    11ec:	2b00      	cmp	r3, #0
    11ee:	f77f ae7d 	ble.w	eec <cbvprintf+0x458>
			OUTC(' ');
    11f2:	9b02      	ldr	r3, [sp, #8]
    11f4:	4659      	mov	r1, fp
    11f6:	2020      	movs	r0, #32
    11f8:	4798      	blx	r3
    11fa:	2800      	cmp	r0, #0
    11fc:	dbb7      	blt.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    11fe:	3501      	adds	r5, #1
			--width;
    1200:	e7f2      	b.n	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
				OUTC('0');
    1202:	9b02      	ldr	r3, [sp, #8]
    1204:	4659      	mov	r1, fp
    1206:	2030      	movs	r0, #48	; 0x30
    1208:	4798      	blx	r3
    120a:	2800      	cmp	r0, #0
    120c:	dbaf      	blt.n	116e <CONFIG_FPROTECT_BLOCK_SIZE+0x16e>
    120e:	3501      	adds	r5, #1
    1210:	e7dd      	b.n	11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
    1212:	bf00      	nop
    1214:	00007da9 	.word	0x00007da9

00001218 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    1218:	b508      	push	{r3, lr}
    121a:	f04f 0220 	mov.w	r2, #32
    121e:	f3ef 8311 	mrs	r3, BASEPRI
    1222:	f382 8812 	msr	BASEPRI_MAX, r2
    1226:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    122a:	f001 fd1f 	bl	2c6c <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    122e:	4803      	ldr	r0, [pc, #12]	; (123c <sys_reboot+0x24>)
    1230:	f004 ffb0 	bl	6194 <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1234:	f000 fee6 	bl	2004 <arch_cpu_idle>
    1238:	e7fc      	b.n	1234 <sys_reboot+0x1c>
    123a:	bf00      	nop
    123c:	00007daf 	.word	0x00007daf

00001240 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1240:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1242:	4910      	ldr	r1, [pc, #64]	; (1284 <enable_logger+0x44>)
    1244:	4810      	ldr	r0, [pc, #64]	; (1288 <enable_logger+0x48>)
{
    1246:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1248:	2200      	movs	r2, #0
    124a:	f006 fa5a 	bl	7702 <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    124e:	4d0f      	ldr	r5, [pc, #60]	; (128c <enable_logger+0x4c>)
    1250:	490f      	ldr	r1, [pc, #60]	; (1290 <enable_logger+0x50>)
    1252:	2200      	movs	r2, #0
    1254:	2300      	movs	r3, #0
    1256:	e9cd 2306 	strd	r2, r3, [sp, #24]
    125a:	2400      	movs	r4, #0
    125c:	230e      	movs	r3, #14
    125e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1262:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1266:	4b0b      	ldr	r3, [pc, #44]	; (1294 <enable_logger+0x54>)
    1268:	9400      	str	r4, [sp, #0]
    126a:	f44f 7240 	mov.w	r2, #768	; 0x300
    126e:	4628      	mov	r0, r5
    1270:	f003 fe42 	bl	4ef8 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1274:	4908      	ldr	r1, [pc, #32]	; (1298 <enable_logger+0x58>)
    1276:	4628      	mov	r0, r5
    1278:	f006 f90d 	bl	7496 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    127c:	4620      	mov	r0, r4
    127e:	b009      	add	sp, #36	; 0x24
    1280:	bd30      	pop	{r4, r5, pc}
    1282:	bf00      	nop
    1284:	0000129d 	.word	0x0000129d
    1288:	20000648 	.word	0x20000648
    128c:	20000680 	.word	0x20000680
    1290:	20001760 	.word	0x20001760
    1294:	000014c1 	.word	0x000014c1
    1298:	00007dd8 	.word	0x00007dd8

0000129c <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    129c:	4801      	ldr	r0, [pc, #4]	; (12a4 <log_process_thread_timer_expiry_fn+0x8>)
    129e:	f003 bf89 	b.w	51b4 <z_impl_k_sem_give>
    12a2:	bf00      	nop
    12a4:	20000238 	.word	0x20000238

000012a8 <log_format_func_t_get>:
}
    12a8:	4b01      	ldr	r3, [pc, #4]	; (12b0 <log_format_func_t_get+0x8>)
    12aa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    12ae:	4770      	bx	lr
    12b0:	00007a70 	.word	0x00007a70

000012b4 <log_init>:
{
    12b4:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    12b6:	4b12      	ldr	r3, [pc, #72]	; (1300 <log_init+0x4c>)
    12b8:	f3bf 8f5b 	dmb	ish
    12bc:	e853 5f00 	ldrex	r5, [r3]
    12c0:	1c6a      	adds	r2, r5, #1
    12c2:	e843 2100 	strex	r1, r2, [r3]
    12c6:	2900      	cmp	r1, #0
    12c8:	d1f8      	bne.n	12bc <log_init+0x8>
    12ca:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    12ce:	b92d      	cbnz	r5, 12dc <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    12d0:	4c0c      	ldr	r4, [pc, #48]	; (1304 <log_init+0x50>)
    12d2:	4e0d      	ldr	r6, [pc, #52]	; (1308 <log_init+0x54>)
    12d4:	1b36      	subs	r6, r6, r4
    12d6:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    12d8:	42b5      	cmp	r5, r6
    12da:	db00      	blt.n	12de <log_init+0x2a>
}
    12dc:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    12de:	7b23      	ldrb	r3, [r4, #12]
    12e0:	b153      	cbz	r3, 12f8 <log_init+0x44>
			if (backend->api->init != NULL) {
    12e2:	6823      	ldr	r3, [r4, #0]
    12e4:	699b      	ldr	r3, [r3, #24]
    12e6:	b10b      	cbz	r3, 12ec <log_init+0x38>
				backend->api->init(backend);
    12e8:	4620      	mov	r0, r4
    12ea:	4798      	blx	r3
			log_backend_enable(backend,
    12ec:	6863      	ldr	r3, [r4, #4]
    12ee:	2204      	movs	r2, #4
    12f0:	6819      	ldr	r1, [r3, #0]
    12f2:	4620      	mov	r0, r4
    12f4:	f000 f992 	bl	161c <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    12f8:	3501      	adds	r5, #1
    12fa:	3410      	adds	r4, #16
    12fc:	e7ec      	b.n	12d8 <log_init+0x24>
    12fe:	bf00      	nop
    1300:	200009e4 	.word	0x200009e4
    1304:	00007a0c 	.word	0x00007a0c
    1308:	00007a2c 	.word	0x00007a2c

0000130c <z_log_notify_backend_enabled>:
{
    130c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    130e:	4c04      	ldr	r4, [pc, #16]	; (1320 <z_log_notify_backend_enabled+0x14>)
    1310:	7823      	ldrb	r3, [r4, #0]
    1312:	b913      	cbnz	r3, 131a <z_log_notify_backend_enabled+0xe>
    1314:	4803      	ldr	r0, [pc, #12]	; (1324 <z_log_notify_backend_enabled+0x18>)
    1316:	f003 ff4d 	bl	51b4 <z_impl_k_sem_give>
	backend_attached = true;
    131a:	2301      	movs	r3, #1
    131c:	7023      	strb	r3, [r4, #0]
}
    131e:	bd10      	pop	{r4, pc}
    1320:	20001325 	.word	0x20001325
    1324:	20000238 	.word	0x20000238

00001328 <z_log_dropped>:
    1328:	4b0c      	ldr	r3, [pc, #48]	; (135c <z_log_dropped+0x34>)
    132a:	f3bf 8f5b 	dmb	ish
    132e:	e853 2f00 	ldrex	r2, [r3]
    1332:	3201      	adds	r2, #1
    1334:	e843 2100 	strex	r1, r2, [r3]
    1338:	2900      	cmp	r1, #0
    133a:	d1f8      	bne.n	132e <z_log_dropped+0x6>
    133c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    1340:	b158      	cbz	r0, 135a <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1342:	f3bf 8f5b 	dmb	ish
    1346:	4b06      	ldr	r3, [pc, #24]	; (1360 <z_log_dropped+0x38>)
    1348:	e853 2f00 	ldrex	r2, [r3]
    134c:	3a01      	subs	r2, #1
    134e:	e843 2100 	strex	r1, r2, [r3]
    1352:	2900      	cmp	r1, #0
    1354:	d1f8      	bne.n	1348 <z_log_dropped+0x20>
    1356:	f3bf 8f5b 	dmb	ish
}
    135a:	4770      	bx	lr
    135c:	200009e0 	.word	0x200009e0
    1360:	200009dc 	.word	0x200009dc

00001364 <z_log_dropped_read_and_clear>:
}
    1364:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1366:	4b06      	ldr	r3, [pc, #24]	; (1380 <z_log_dropped_read_and_clear+0x1c>)
    1368:	f3bf 8f5b 	dmb	ish
    136c:	4602      	mov	r2, r0
    136e:	e853 0f00 	ldrex	r0, [r3]
    1372:	e843 2100 	strex	r1, r2, [r3]
    1376:	2900      	cmp	r1, #0
    1378:	d1f9      	bne.n	136e <z_log_dropped_read_and_clear+0xa>
    137a:	f3bf 8f5b 	dmb	ish
    137e:	4770      	bx	lr
    1380:	200009e0 	.word	0x200009e0

00001384 <dropped_notify>:
{
    1384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    1386:	f7ff ffed 	bl	1364 <z_log_dropped_read_and_clear>
    138a:	4c0a      	ldr	r4, [pc, #40]	; (13b4 <dropped_notify+0x30>)
    138c:	4d0a      	ldr	r5, [pc, #40]	; (13b8 <dropped_notify+0x34>)
    138e:	1b2d      	subs	r5, r5, r4
    1390:	4607      	mov	r7, r0
    1392:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1394:	2600      	movs	r6, #0
    1396:	42ae      	cmp	r6, r5
    1398:	db00      	blt.n	139c <dropped_notify+0x18>
}
    139a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    139c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    139e:	795b      	ldrb	r3, [r3, #5]
    13a0:	b12b      	cbz	r3, 13ae <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    13a2:	6823      	ldr	r3, [r4, #0]
    13a4:	691b      	ldr	r3, [r3, #16]
    13a6:	b113      	cbz	r3, 13ae <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    13a8:	4639      	mov	r1, r7
    13aa:	4620      	mov	r0, r4
    13ac:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    13ae:	3601      	adds	r6, #1
    13b0:	3410      	adds	r4, #16
    13b2:	e7f0      	b.n	1396 <dropped_notify+0x12>
    13b4:	00007a0c 	.word	0x00007a0c
    13b8:	00007a2c 	.word	0x00007a2c

000013bc <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    13bc:	4901      	ldr	r1, [pc, #4]	; (13c4 <z_log_msg2_init+0x8>)
    13be:	4802      	ldr	r0, [pc, #8]	; (13c8 <z_log_msg2_init+0xc>)
    13c0:	f005 b8c8 	b.w	6554 <mpsc_pbuf_init>
    13c4:	00007a7c 	.word	0x00007a7c
    13c8:	200009e8 	.word	0x200009e8

000013cc <log_core_init>:
	panic_mode = false;
    13cc:	4a08      	ldr	r2, [pc, #32]	; (13f0 <log_core_init+0x24>)
{
    13ce:	b508      	push	{r3, lr}
	panic_mode = false;
    13d0:	2300      	movs	r3, #0
    13d2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    13d4:	4a07      	ldr	r2, [pc, #28]	; (13f4 <log_core_init+0x28>)
    13d6:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    13d8:	4b07      	ldr	r3, [pc, #28]	; (13f8 <log_core_init+0x2c>)
    13da:	4a08      	ldr	r2, [pc, #32]	; (13fc <log_core_init+0x30>)
    13dc:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    13de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    13e2:	f000 fafb 	bl	19dc <log_output_timestamp_freq_set>
}
    13e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    13ea:	f7ff bfe7 	b.w	13bc <z_log_msg2_init>
    13ee:	bf00      	nop
    13f0:	20001326 	.word	0x20001326
    13f4:	200009e0 	.word	0x200009e0
    13f8:	20000008 	.word	0x20000008
    13fc:	000067fd 	.word	0x000067fd

00001400 <z_log_msg2_alloc>:
{
    1400:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    1402:	2200      	movs	r2, #0
    1404:	4801      	ldr	r0, [pc, #4]	; (140c <z_log_msg2_alloc+0xc>)
    1406:	2300      	movs	r3, #0
    1408:	f005 b8c5 	b.w	6596 <mpsc_pbuf_alloc>
    140c:	200009e8 	.word	0x200009e8

00001410 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    1410:	4801      	ldr	r0, [pc, #4]	; (1418 <z_log_msg2_claim+0x8>)
    1412:	f005 b956 	b.w	66c2 <mpsc_pbuf_claim>
    1416:	bf00      	nop
    1418:	200009e8 	.word	0x200009e8

0000141c <z_log_msg2_free>:
{
    141c:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    141e:	4801      	ldr	r0, [pc, #4]	; (1424 <z_log_msg2_free+0x8>)
    1420:	f005 b99b 	b.w	675a <mpsc_pbuf_free>
    1424:	200009e8 	.word	0x200009e8

00001428 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    1428:	4801      	ldr	r0, [pc, #4]	; (1430 <z_log_msg2_pending+0x8>)
    142a:	f005 b9ca 	b.w	67c2 <mpsc_pbuf_is_pending>
    142e:	bf00      	nop
    1430:	200009e8 	.word	0x200009e8

00001434 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    1434:	4b1d      	ldr	r3, [pc, #116]	; (14ac <z_impl_log_process+0x78>)
    1436:	781b      	ldrb	r3, [r3, #0]
{
    1438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    143c:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    143e:	b903      	cbnz	r3, 1442 <z_impl_log_process+0xe>
    1440:	b388      	cbz	r0, 14a6 <z_impl_log_process+0x72>
	msg = get_msg();
    1442:	f005 f9e2 	bl	680a <get_msg>
	if (msg.msg) {
    1446:	4606      	mov	r6, r0
    1448:	b118      	cbz	r0, 1452 <z_impl_log_process+0x1e>
		if (!bypass) {
    144a:	b16d      	cbz	r5, 1468 <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    144c:	4630      	mov	r0, r6
    144e:	f7ff ffe5 	bl	141c <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    1452:	b92d      	cbnz	r5, 1460 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    1454:	4b16      	ldr	r3, [pc, #88]	; (14b0 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    1456:	681b      	ldr	r3, [r3, #0]
    1458:	2b00      	cmp	r3, #0
    145a:	dd01      	ble.n	1460 <z_impl_log_process+0x2c>
		dropped_notify();
    145c:	f7ff ff92 	bl	1384 <dropped_notify>
}
    1460:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    1464:	f7ff bfe0 	b.w	1428 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1468:	4b12      	ldr	r3, [pc, #72]	; (14b4 <z_impl_log_process+0x80>)
    146a:	f3bf 8f5b 	dmb	ish
    146e:	e853 2f00 	ldrex	r2, [r3]
    1472:	3a01      	subs	r2, #1
    1474:	e843 2100 	strex	r1, r2, [r3]
    1478:	2900      	cmp	r1, #0
    147a:	d1f8      	bne.n	146e <z_impl_log_process+0x3a>
    147c:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    1480:	4c0d      	ldr	r4, [pc, #52]	; (14b8 <z_impl_log_process+0x84>)
    1482:	4f0e      	ldr	r7, [pc, #56]	; (14bc <z_impl_log_process+0x88>)
    1484:	1b3f      	subs	r7, r7, r4
    1486:	113f      	asrs	r7, r7, #4
    1488:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    148a:	45b8      	cmp	r8, r7
    148c:	dade      	bge.n	144c <z_impl_log_process+0x18>
	return backend->cb->active;
    148e:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    1490:	795b      	ldrb	r3, [r3, #5]
    1492:	b123      	cbz	r3, 149e <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    1494:	6823      	ldr	r3, [r4, #0]
    1496:	4631      	mov	r1, r6
    1498:	681b      	ldr	r3, [r3, #0]
    149a:	4620      	mov	r0, r4
    149c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    149e:	f108 0801 	add.w	r8, r8, #1
    14a2:	3410      	adds	r4, #16
    14a4:	e7f1      	b.n	148a <z_impl_log_process+0x56>
}
    14a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    14aa:	bf00      	nop
    14ac:	20001325 	.word	0x20001325
    14b0:	200009e0 	.word	0x200009e0
    14b4:	200009dc 	.word	0x200009dc
    14b8:	00007a0c 	.word	0x00007a0c
    14bc:	00007a2c 	.word	0x00007a2c

000014c0 <log_process_thread_func>:
{
    14c0:	b510      	push	{r4, lr}
	log_init();
    14c2:	f7ff fef7 	bl	12b4 <log_init>
	return z_impl_z_current_get();
    14c6:	f004 f9af 	bl	5828 <z_impl_z_current_get>
	proc_tid = process_tid;
    14ca:	4b0c      	ldr	r3, [pc, #48]	; (14fc <log_process_thread_func+0x3c>)
    14cc:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    14ce:	b130      	cbz	r0, 14de <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    14d0:	4b0b      	ldr	r3, [pc, #44]	; (1500 <log_process_thread_func+0x40>)
	    process_tid &&
    14d2:	681b      	ldr	r3, [r3, #0]
    14d4:	2b09      	cmp	r3, #9
    14d6:	dd02      	ble.n	14de <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    14d8:	480a      	ldr	r0, [pc, #40]	; (1504 <log_process_thread_func+0x44>)
    14da:	f003 fe6b 	bl	51b4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    14de:	4c09      	ldr	r4, [pc, #36]	; (1504 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    14e0:	2000      	movs	r0, #0
    14e2:	f7ff ffa7 	bl	1434 <z_impl_log_process>
		if (log_process(false) == false) {
    14e6:	2800      	cmp	r0, #0
    14e8:	d1fa      	bne.n	14e0 <log_process_thread_func+0x20>
    14ea:	f04f 32ff 	mov.w	r2, #4294967295
    14ee:	f04f 33ff 	mov.w	r3, #4294967295
    14f2:	4620      	mov	r0, r4
    14f4:	f003 fe7e 	bl	51f4 <z_impl_k_sem_take>
    14f8:	e7f2      	b.n	14e0 <log_process_thread_func+0x20>
    14fa:	bf00      	nop
    14fc:	20000a20 	.word	0x20000a20
    1500:	200009dc 	.word	0x200009dc
    1504:	20000238 	.word	0x20000238

00001508 <z_log_msg_post_finalize>:
{
    1508:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    150a:	4b1d      	ldr	r3, [pc, #116]	; (1580 <z_log_msg_post_finalize+0x78>)
    150c:	f3bf 8f5b 	dmb	ish
    1510:	e853 2f00 	ldrex	r2, [r3]
    1514:	1c51      	adds	r1, r2, #1
    1516:	e843 1000 	strex	r0, r1, [r3]
    151a:	2800      	cmp	r0, #0
    151c:	d1f8      	bne.n	1510 <z_log_msg_post_finalize+0x8>
    151e:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1522:	4b18      	ldr	r3, [pc, #96]	; (1584 <z_log_msg_post_finalize+0x7c>)
    1524:	781b      	ldrb	r3, [r3, #0]
    1526:	b183      	cbz	r3, 154a <z_log_msg_post_finalize+0x42>
    1528:	f04f 0320 	mov.w	r3, #32
    152c:	f3ef 8411 	mrs	r4, BASEPRI
    1530:	f383 8812 	msr	BASEPRI_MAX, r3
    1534:	f3bf 8f6f 	isb	sy
    1538:	2000      	movs	r0, #0
    153a:	f7ff ff7b 	bl	1434 <z_impl_log_process>
	__asm__ volatile(
    153e:	f384 8811 	msr	BASEPRI, r4
    1542:	f3bf 8f6f 	isb	sy
}
    1546:	b002      	add	sp, #8
    1548:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    154a:	4b0f      	ldr	r3, [pc, #60]	; (1588 <z_log_msg_post_finalize+0x80>)
    154c:	681b      	ldr	r3, [r3, #0]
    154e:	2b00      	cmp	r3, #0
    1550:	d0f9      	beq.n	1546 <z_log_msg_post_finalize+0x3e>
    1552:	b952      	cbnz	r2, 156a <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    1554:	2200      	movs	r2, #0
    1556:	2300      	movs	r3, #0
    1558:	e9cd 2300 	strd	r2, r3, [sp]
    155c:	480b      	ldr	r0, [pc, #44]	; (158c <z_log_msg_post_finalize+0x84>)
    155e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1562:	2300      	movs	r3, #0
    1564:	f004 fb50 	bl	5c08 <z_impl_k_timer_start>
    1568:	e7ed      	b.n	1546 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    156a:	2a0a      	cmp	r2, #10
    156c:	d1eb      	bne.n	1546 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    156e:	4807      	ldr	r0, [pc, #28]	; (158c <z_log_msg_post_finalize+0x84>)
    1570:	f006 f8d3 	bl	771a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1574:	4806      	ldr	r0, [pc, #24]	; (1590 <z_log_msg_post_finalize+0x88>)
}
    1576:	b002      	add	sp, #8
    1578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    157c:	f003 be1a 	b.w	51b4 <z_impl_k_sem_give>
    1580:	200009dc 	.word	0x200009dc
    1584:	20001326 	.word	0x20001326
    1588:	20000a20 	.word	0x20000a20
    158c:	20000648 	.word	0x20000648
    1590:	20000238 	.word	0x20000238

00001594 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    1594:	4b06      	ldr	r3, [pc, #24]	; (15b0 <z_log_msg2_commit+0x1c>)
{
    1596:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1598:	681b      	ldr	r3, [r3, #0]
{
    159a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    159c:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    159e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    15a0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    15a2:	4804      	ldr	r0, [pc, #16]	; (15b4 <z_log_msg2_commit+0x20>)
    15a4:	f005 f86d 	bl	6682 <mpsc_pbuf_commit>
}
    15a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    15ac:	f7ff bfac 	b.w	1508 <z_log_msg_post_finalize>
    15b0:	20000008 	.word	0x20000008
    15b4:	200009e8 	.word	0x200009e8

000015b8 <z_impl_log_panic>:
{
    15b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    15ba:	4f0e      	ldr	r7, [pc, #56]	; (15f4 <z_impl_log_panic+0x3c>)
    15bc:	783d      	ldrb	r5, [r7, #0]
    15be:	b975      	cbnz	r5, 15de <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    15c0:	4c0d      	ldr	r4, [pc, #52]	; (15f8 <z_impl_log_panic+0x40>)
    15c2:	4e0e      	ldr	r6, [pc, #56]	; (15fc <z_impl_log_panic+0x44>)
	log_init();
    15c4:	f7ff fe76 	bl	12b4 <log_init>
    15c8:	1b36      	subs	r6, r6, r4
    15ca:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    15cc:	42b5      	cmp	r5, r6
    15ce:	db07      	blt.n	15e0 <z_impl_log_panic+0x28>
    15d0:	2000      	movs	r0, #0
    15d2:	f7ff ff2f 	bl	1434 <z_impl_log_process>
		while (log_process(false) == true) {
    15d6:	2800      	cmp	r0, #0
    15d8:	d1fa      	bne.n	15d0 <z_impl_log_panic+0x18>
	panic_mode = true;
    15da:	2301      	movs	r3, #1
    15dc:	703b      	strb	r3, [r7, #0]
}
    15de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    15e0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    15e2:	795b      	ldrb	r3, [r3, #5]
    15e4:	b11b      	cbz	r3, 15ee <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    15e6:	6823      	ldr	r3, [r4, #0]
    15e8:	4620      	mov	r0, r4
    15ea:	695b      	ldr	r3, [r3, #20]
    15ec:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    15ee:	3501      	adds	r5, #1
    15f0:	3410      	adds	r4, #16
    15f2:	e7eb      	b.n	15cc <z_impl_log_panic+0x14>
    15f4:	20001326 	.word	0x20001326
    15f8:	00007a0c 	.word	0x00007a0c
    15fc:	00007a2c 	.word	0x00007a2c

00001600 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1600:	4a04      	ldr	r2, [pc, #16]	; (1614 <log_source_name_get+0x14>)
    1602:	4b05      	ldr	r3, [pc, #20]	; (1618 <log_source_name_get+0x18>)
    1604:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1606:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    160a:	bf34      	ite	cc
    160c:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1610:	2000      	movcs	r0, #0
}
    1612:	4770      	bx	lr
    1614:	000079c4 	.word	0x000079c4
    1618:	00007a0c 	.word	0x00007a0c

0000161c <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    161c:	4a05      	ldr	r2, [pc, #20]	; (1634 <log_backend_enable+0x18>)
	backend->cb->id = id;
    161e:	6843      	ldr	r3, [r0, #4]
    1620:	1a80      	subs	r0, r0, r2
    1622:	1100      	asrs	r0, r0, #4
    1624:	3001      	adds	r0, #1
	backend->cb->active = true;
    1626:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    1628:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    162a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    162c:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    162e:	f7ff be6d 	b.w	130c <z_log_notify_backend_enabled>
    1632:	bf00      	nop
    1634:	00007a0c 	.word	0x00007a0c

00001638 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1638:	b40e      	push	{r1, r2, r3}
    163a:	b503      	push	{r0, r1, lr}
    163c:	ab03      	add	r3, sp, #12
    163e:	4601      	mov	r1, r0
    1640:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1644:	4804      	ldr	r0, [pc, #16]	; (1658 <print_formatted+0x20>)
	va_start(args, fmt);
    1646:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1648:	f7ff fa24 	bl	a94 <cbvprintf>
	va_end(args);

	return length;
}
    164c:	b002      	add	sp, #8
    164e:	f85d eb04 	ldr.w	lr, [sp], #4
    1652:	b003      	add	sp, #12
    1654:	4770      	bx	lr
    1656:	bf00      	nop
    1658:	0000684b 	.word	0x0000684b

0000165c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    165c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1660:	461d      	mov	r5, r3
    1662:	9b08      	ldr	r3, [sp, #32]
    1664:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1666:	06da      	lsls	r2, r3, #27
{
    1668:	4604      	mov	r4, r0
    166a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    166c:	d405      	bmi.n	167a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    166e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1670:	bf4c      	ite	mi
    1672:	492a      	ldrmi	r1, [pc, #168]	; (171c <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1674:	492a      	ldrpl	r1, [pc, #168]	; (1720 <hexdump_line_print+0xc4>)
    1676:	f7ff ffdf 	bl	1638 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    167a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1724 <hexdump_line_print+0xc8>
{
    167e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    1682:	45a8      	cmp	r8, r5
    1684:	db2a      	blt.n	16dc <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1686:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1728 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    168a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 172c <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    168e:	f8df a094 	ldr.w	sl, [pc, #148]	; 1724 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1692:	2500      	movs	r5, #0
		if (i < length) {
    1694:	42bd      	cmp	r5, r7
    1696:	d22f      	bcs.n	16f8 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    1698:	5d72      	ldrb	r2, [r6, r5]
    169a:	4649      	mov	r1, r9
    169c:	4620      	mov	r0, r4
    169e:	f7ff ffcb 	bl	1638 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    16a2:	3501      	adds	r5, #1
    16a4:	2d10      	cmp	r5, #16
    16a6:	d120      	bne.n	16ea <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    16a8:	4921      	ldr	r1, [pc, #132]	; (1730 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    16aa:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1724 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    16ae:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1734 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    16b2:	4620      	mov	r0, r4
    16b4:	f7ff ffc0 	bl	1638 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    16b8:	2500      	movs	r5, #0
		if (i < length) {
    16ba:	42af      	cmp	r7, r5
    16bc:	d928      	bls.n	1710 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    16be:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    16c0:	f1a2 0320 	sub.w	r3, r2, #32
    16c4:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    16c6:	bf28      	it	cs
    16c8:	222e      	movcs	r2, #46	; 0x2e
    16ca:	4649      	mov	r1, r9
    16cc:	4620      	mov	r0, r4
    16ce:	f7ff ffb3 	bl	1638 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    16d2:	3501      	adds	r5, #1
    16d4:	2d10      	cmp	r5, #16
    16d6:	d114      	bne.n	1702 <hexdump_line_print+0xa6>
		}
	}
}
    16d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    16dc:	4649      	mov	r1, r9
    16de:	4620      	mov	r0, r4
    16e0:	f7ff ffaa 	bl	1638 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    16e4:	f108 0801 	add.w	r8, r8, #1
    16e8:	e7cb      	b.n	1682 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    16ea:	076a      	lsls	r2, r5, #29
    16ec:	d1d2      	bne.n	1694 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    16ee:	4651      	mov	r1, sl
    16f0:	4620      	mov	r0, r4
    16f2:	f7ff ffa1 	bl	1638 <print_formatted>
    16f6:	e7cd      	b.n	1694 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    16f8:	4641      	mov	r1, r8
    16fa:	4620      	mov	r0, r4
    16fc:	f7ff ff9c 	bl	1638 <print_formatted>
    1700:	e7cf      	b.n	16a2 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1702:	076b      	lsls	r3, r5, #29
    1704:	d1d9      	bne.n	16ba <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1706:	4641      	mov	r1, r8
    1708:	4620      	mov	r0, r4
    170a:	f7ff ff95 	bl	1638 <print_formatted>
    170e:	e7d4      	b.n	16ba <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1710:	4641      	mov	r1, r8
    1712:	4620      	mov	r0, r4
    1714:	f7ff ff90 	bl	1638 <print_formatted>
    1718:	e7db      	b.n	16d2 <hexdump_line_print+0x76>
    171a:	bf00      	nop
    171c:	00007d8c 	.word	0x00007d8c
    1720:	00007d8b 	.word	0x00007d8b
    1724:	00007dec 	.word	0x00007dec
    1728:	00007dea 	.word	0x00007dea
    172c:	00007de4 	.word	0x00007de4
    1730:	00007dee 	.word	0x00007dee
    1734:	00007d73 	.word	0x00007d73

00001738 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    173c:	b087      	sub	sp, #28
    173e:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1740:	f001 0301 	and.w	r3, r1, #1
{
    1744:	9205      	str	r2, [sp, #20]
    1746:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    174a:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    174e:	9304      	str	r3, [sp, #16]
{
    1750:	4607      	mov	r7, r0
    1752:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1754:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1758:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    175c:	f005 f859 	bl	6812 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1760:	4602      	mov	r2, r0
    1762:	2800      	cmp	r0, #0
    1764:	d044      	beq.n	17f0 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    1766:	493a      	ldr	r1, [pc, #232]	; (1850 <prefix_print+0x118>)
    1768:	4638      	mov	r0, r7
    176a:	f7ff ff65 	bl	1638 <print_formatted>
    176e:	4605      	mov	r5, r0
	}

	if (stamp) {
    1770:	f1bb 0f00 	cmp.w	fp, #0
    1774:	d008      	beq.n	1788 <prefix_print+0x50>
	if (!format) {
    1776:	f018 0f44 	tst.w	r8, #68	; 0x44
    177a:	d13b      	bne.n	17f4 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    177c:	4935      	ldr	r1, [pc, #212]	; (1854 <prefix_print+0x11c>)
    177e:	4622      	mov	r2, r4
    1780:	4638      	mov	r0, r7
    1782:	f7ff ff59 	bl	1638 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1786:	4405      	add	r5, r0
	if (color) {
    1788:	9b04      	ldr	r3, [sp, #16]
    178a:	b153      	cbz	r3, 17a2 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    178c:	4b32      	ldr	r3, [pc, #200]	; (1858 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    178e:	4933      	ldr	r1, [pc, #204]	; (185c <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    1790:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1794:	4b32      	ldr	r3, [pc, #200]	; (1860 <prefix_print+0x128>)
    1796:	4638      	mov	r0, r7
    1798:	2a00      	cmp	r2, #0
    179a:	bf08      	it	eq
    179c:	461a      	moveq	r2, r3
    179e:	f7ff ff4b 	bl	1638 <print_formatted>
	if (level_on) {
    17a2:	b13e      	cbz	r6, 17b4 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    17a4:	4b2f      	ldr	r3, [pc, #188]	; (1864 <prefix_print+0x12c>)
    17a6:	4930      	ldr	r1, [pc, #192]	; (1868 <prefix_print+0x130>)
    17a8:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    17ac:	4638      	mov	r0, r7
    17ae:	f7ff ff43 	bl	1638 <print_formatted>
    17b2:	4606      	mov	r6, r0
	if (source_id >= 0) {
    17b4:	f1ba 0f00 	cmp.w	sl, #0
    17b8:	db16      	blt.n	17e8 <prefix_print+0xb0>
		total += print_formatted(output,
    17ba:	9b05      	ldr	r3, [sp, #20]
    17bc:	2b00      	cmp	r3, #0
    17be:	d045      	beq.n	184c <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    17c0:	2301      	movs	r3, #1
    17c2:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    17c6:	4b29      	ldr	r3, [pc, #164]	; (186c <prefix_print+0x134>)
    17c8:	4c29      	ldr	r4, [pc, #164]	; (1870 <prefix_print+0x138>)
    17ca:	f019 0f10 	tst.w	r9, #16
    17ce:	bf18      	it	ne
    17d0:	461c      	movne	r4, r3
    17d2:	4651      	mov	r1, sl
    17d4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    17d8:	f7ff ff12 	bl	1600 <log_source_name_get>
    17dc:	4621      	mov	r1, r4
    17de:	4602      	mov	r2, r0
    17e0:	4638      	mov	r0, r7
    17e2:	f7ff ff29 	bl	1638 <print_formatted>
    17e6:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    17e8:	1970      	adds	r0, r6, r5
    17ea:	b007      	add	sp, #28
    17ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    17f0:	4605      	mov	r5, r0
    17f2:	e7bd      	b.n	1770 <prefix_print+0x38>
	} else if (freq != 0U) {
    17f4:	4b1f      	ldr	r3, [pc, #124]	; (1874 <prefix_print+0x13c>)
    17f6:	6818      	ldr	r0, [r3, #0]
    17f8:	2800      	cmp	r0, #0
    17fa:	d0c4      	beq.n	1786 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    17fc:	4b1e      	ldr	r3, [pc, #120]	; (1878 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    17fe:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1802:	681b      	ldr	r3, [r3, #0]
    1804:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1808:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    180c:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1810:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1814:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1818:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    181c:	fbb3 f2f1 	udiv	r2, r3, r1
    1820:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1824:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1828:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    182c:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    1830:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1834:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    1838:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    183a:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    183e:	490f      	ldr	r1, [pc, #60]	; (187c <prefix_print+0x144>)
    1840:	e9cd e001 	strd	lr, r0, [sp, #4]
    1844:	4638      	mov	r0, r7
    1846:	f7ff fef7 	bl	1638 <print_formatted>
    184a:	e79c      	b.n	1786 <prefix_print+0x4e>
		total += print_formatted(output,
    184c:	4c08      	ldr	r4, [pc, #32]	; (1870 <prefix_print+0x138>)
    184e:	e7c0      	b.n	17d2 <prefix_print+0x9a>
    1850:	00007dfe 	.word	0x00007dfe
    1854:	00007e02 	.word	0x00007e02
    1858:	00007a90 	.word	0x00007a90
    185c:	00007e27 	.word	0x00007e27
    1860:	00007df0 	.word	0x00007df0
    1864:	00007aa4 	.word	0x00007aa4
    1868:	00007e2a 	.word	0x00007e2a
    186c:	00007dfa 	.word	0x00007dfa
    1870:	00007df5 	.word	0x00007df5
    1874:	20000a24 	.word	0x20000a24
    1878:	20000a28 	.word	0x20000a28
    187c:	00007e0b 	.word	0x00007e0b

00001880 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1880:	b538      	push	{r3, r4, r5, lr}
    1882:	460c      	mov	r4, r1
	if (color) {
    1884:	07e1      	lsls	r1, r4, #31
{
    1886:	4605      	mov	r5, r0
	if (color) {
    1888:	d503      	bpl.n	1892 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    188a:	4a08      	ldr	r2, [pc, #32]	; (18ac <postfix_print+0x2c>)
    188c:	4908      	ldr	r1, [pc, #32]	; (18b0 <postfix_print+0x30>)
    188e:	f7ff fed3 	bl	1638 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1892:	06e2      	lsls	r2, r4, #27
    1894:	d408      	bmi.n	18a8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1896:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1898:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    189a:	bf4c      	ite	mi
    189c:	4905      	ldrmi	r1, [pc, #20]	; (18b4 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    189e:	4906      	ldrpl	r1, [pc, #24]	; (18b8 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    18a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    18a4:	f7ff bec8 	b.w	1638 <print_formatted>
}
    18a8:	bd38      	pop	{r3, r4, r5, pc}
    18aa:	bf00      	nop
    18ac:	00007df0 	.word	0x00007df0
    18b0:	00007e27 	.word	0x00007e27
    18b4:	00007d8c 	.word	0x00007d8c
    18b8:	00007d8b 	.word	0x00007d8b

000018bc <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    18bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    18c0:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    18c2:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    18c6:	4606      	mov	r6, r0
    18c8:	460c      	mov	r4, r1
    18ca:	4690      	mov	r8, r2
    18cc:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    18d0:	d04d      	beq.n	196e <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    18d2:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    18d4:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    18d6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    18da:	2b00      	cmp	r3, #0
    18dc:	d044      	beq.n	1968 <log_output_msg2_process+0xac>
    18de:	4925      	ldr	r1, [pc, #148]	; (1974 <log_output_msg2_process+0xb8>)
    18e0:	1a5b      	subs	r3, r3, r1
    18e2:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    18e6:	e9cd 2301 	strd	r2, r3, [sp, #4]
    18ea:	f8cd 9000 	str.w	r9, [sp]
    18ee:	68a3      	ldr	r3, [r4, #8]
    18f0:	2200      	movs	r2, #0
    18f2:	4641      	mov	r1, r8
    18f4:	4630      	mov	r0, r6
    18f6:	f7ff ff1f 	bl	1738 <prefix_print>
    18fa:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    18fc:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    18fe:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1902:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1906:	b153      	cbz	r3, 191e <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1908:	4f1b      	ldr	r7, [pc, #108]	; (1978 <log_output_msg2_process+0xbc>)
    190a:	481c      	ldr	r0, [pc, #112]	; (197c <log_output_msg2_process+0xc0>)
    190c:	491c      	ldr	r1, [pc, #112]	; (1980 <log_output_msg2_process+0xc4>)
    190e:	462b      	mov	r3, r5
    1910:	4632      	mov	r2, r6
    1912:	f1b9 0f00 	cmp.w	r9, #0
    1916:	bf08      	it	eq
    1918:	4638      	moveq	r0, r7
    191a:	f004 fbdb 	bl	60d4 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    191e:	8867      	ldrh	r7, [r4, #2]
    1920:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1924:	b197      	cbz	r7, 194c <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    1926:	6823      	ldr	r3, [r4, #0]
    1928:	f3c3 2349 	ubfx	r3, r3, #9, #10
    192c:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    192e:	2f10      	cmp	r7, #16
    1930:	463c      	mov	r4, r7
    1932:	bf28      	it	cs
    1934:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    1936:	4629      	mov	r1, r5
    1938:	f8cd 8000 	str.w	r8, [sp]
    193c:	4653      	mov	r3, sl
    193e:	4622      	mov	r2, r4
    1940:	4630      	mov	r0, r6
    1942:	f7ff fe8b 	bl	165c <hexdump_line_print>
	} while (len);
    1946:	1b3f      	subs	r7, r7, r4
		data += length;
    1948:	4425      	add	r5, r4
	} while (len);
    194a:	d1f0      	bne.n	192e <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    194c:	f1b9 0f00 	cmp.w	r9, #0
    1950:	d004      	beq.n	195c <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1952:	464a      	mov	r2, r9
    1954:	4641      	mov	r1, r8
    1956:	4630      	mov	r0, r6
    1958:	f7ff ff92 	bl	1880 <postfix_print>
	}

	log_output_flush(output);
    195c:	4630      	mov	r0, r6
}
    195e:	b004      	add	sp, #16
    1960:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1964:	f004 bf64 	b.w	6830 <log_output_flush>
		int16_t source_id = source ?
    1968:	f04f 33ff 	mov.w	r3, #4294967295
    196c:	e7bb      	b.n	18e6 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    196e:	46ca      	mov	sl, r9
    1970:	e7c4      	b.n	18fc <log_output_msg2_process+0x40>
    1972:	bf00      	nop
    1974:	000079c4 	.word	0x000079c4
    1978:	00006881 	.word	0x00006881
    197c:	0000684b 	.word	0x0000684b
    1980:	00000a95 	.word	0x00000a95

00001984 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1984:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1986:	f242 730f 	movw	r3, #9999	; 0x270f
    198a:	428b      	cmp	r3, r1
    198c:	bf28      	it	cs
    198e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1990:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1992:	4a0f      	ldr	r2, [pc, #60]	; (19d0 <log_output_dropped_process+0x4c>)
{
    1994:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1996:	2105      	movs	r1, #5
    1998:	4668      	mov	r0, sp
    199a:	f004 fc08 	bl	61ae <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    199e:	6863      	ldr	r3, [r4, #4]
    19a0:	490c      	ldr	r1, [pc, #48]	; (19d4 <log_output_dropped_process+0x50>)
    19a2:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    19a4:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    19a6:	220b      	movs	r2, #11
    19a8:	4628      	mov	r0, r5
    19aa:	f004 ff34 	bl	6816 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    19ae:	6863      	ldr	r3, [r4, #4]
    19b0:	4632      	mov	r2, r6
    19b2:	4669      	mov	r1, sp
    19b4:	4628      	mov	r0, r5
    19b6:	685b      	ldr	r3, [r3, #4]
    19b8:	f004 ff2d 	bl	6816 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    19bc:	6863      	ldr	r3, [r4, #4]
    19be:	4906      	ldr	r1, [pc, #24]	; (19d8 <log_output_dropped_process+0x54>)
    19c0:	685b      	ldr	r3, [r3, #4]
    19c2:	221b      	movs	r2, #27
    19c4:	4628      	mov	r0, r5
    19c6:	f004 ff26 	bl	6816 <buffer_write>
		     output->control_block->ctx);
}
    19ca:	b002      	add	sp, #8
    19cc:	bd70      	pop	{r4, r5, r6, pc}
    19ce:	bf00      	nop
    19d0:	0000841a 	.word	0x0000841a
    19d4:	00007e6c 	.word	0x00007e6c
    19d8:	00007e50 	.word	0x00007e50

000019dc <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    19dc:	4a08      	ldr	r2, [pc, #32]	; (1a00 <log_output_timestamp_freq_set+0x24>)
{
    19de:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    19e0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    19e2:	4c08      	ldr	r4, [pc, #32]	; (1a04 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    19e4:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    19e6:	2100      	movs	r1, #0
    19e8:	42a0      	cmp	r0, r4
    19ea:	d804      	bhi.n	19f6 <log_output_timestamp_freq_set+0x1a>
    19ec:	b101      	cbz	r1, 19f0 <log_output_timestamp_freq_set+0x14>
    19ee:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    19f0:	4b05      	ldr	r3, [pc, #20]	; (1a08 <log_output_timestamp_freq_set+0x2c>)
    19f2:	6018      	str	r0, [r3, #0]
}
    19f4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    19f6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    19f8:	005b      	lsls	r3, r3, #1
    19fa:	2101      	movs	r1, #1
    19fc:	e7f4      	b.n	19e8 <log_output_timestamp_freq_set+0xc>
    19fe:	bf00      	nop
    1a00:	20000a28 	.word	0x20000a28
    1a04:	000f4240 	.word	0x000f4240
    1a08:	20000a24 	.word	0x20000a24

00001a0c <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    1a0e:	4f07      	ldr	r7, [pc, #28]	; (1a2c <char_out+0x20>)
{
    1a10:	460d      	mov	r5, r1
    1a12:	4604      	mov	r4, r0
    1a14:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    1a16:	42b4      	cmp	r4, r6
    1a18:	d101      	bne.n	1a1e <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    1a1a:	4628      	mov	r0, r5
    1a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    1a1e:	6838      	ldr	r0, [r7, #0]
    1a20:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
    1a24:	6883      	ldr	r3, [r0, #8]
    1a26:	69db      	ldr	r3, [r3, #28]
    1a28:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    1a2a:	e7f4      	b.n	1a16 <char_out+0xa>
    1a2c:	20000a44 	.word	0x20000a44

00001a30 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1a30:	4b01      	ldr	r3, [pc, #4]	; (1a38 <format_set+0x8>)
	return 0;
}
    1a32:	2000      	movs	r0, #0
	log_format_current = log_type;
    1a34:	6019      	str	r1, [r3, #0]
}
    1a36:	4770      	bx	lr
    1a38:	20000a34 	.word	0x20000a34

00001a3c <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1a3c:	4b01      	ldr	r3, [pc, #4]	; (1a44 <log_backend_uart_init+0x8>)
    1a3e:	4a02      	ldr	r2, [pc, #8]	; (1a48 <log_backend_uart_init+0xc>)
    1a40:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    1a42:	4770      	bx	lr
    1a44:	20000a44 	.word	0x20000a44
    1a48:	0000782c 	.word	0x0000782c

00001a4c <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    1a4c:	4b02      	ldr	r3, [pc, #8]	; (1a58 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1a4e:	4803      	ldr	r0, [pc, #12]	; (1a5c <panic+0x10>)
    1a50:	2201      	movs	r2, #1
    1a52:	701a      	strb	r2, [r3, #0]
    1a54:	f004 beec 	b.w	6830 <log_output_flush>
    1a58:	20001327 	.word	0x20001327
    1a5c:	00007ad8 	.word	0x00007ad8

00001a60 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    1a60:	4801      	ldr	r0, [pc, #4]	; (1a68 <dropped+0x8>)
    1a62:	f7ff bf8f 	b.w	1984 <log_output_dropped_process>
    1a66:	bf00      	nop
    1a68:	00007ad8 	.word	0x00007ad8

00001a6c <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1a6c:	4b06      	ldr	r3, [pc, #24]	; (1a88 <process+0x1c>)
{
    1a6e:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1a70:	6818      	ldr	r0, [r3, #0]
{
    1a72:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1a74:	f7ff fc18 	bl	12a8 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    1a78:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1a7a:	4603      	mov	r3, r0
}
    1a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    1a80:	4802      	ldr	r0, [pc, #8]	; (1a8c <process+0x20>)
    1a82:	220f      	movs	r2, #15
    1a84:	4718      	bx	r3
    1a86:	bf00      	nop
    1a88:	20000a34 	.word	0x20000a34
    1a8c:	00007ad8 	.word	0x00007ad8

00001a90 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1a90:	4b01      	ldr	r3, [pc, #4]	; (1a98 <log_backend_rtt_init+0x8>)
    1a92:	2201      	movs	r2, #1
    1a94:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1a96:	4770      	bx	lr
    1a98:	20001339 	.word	0x20001339

00001a9c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1a9c:	4b01      	ldr	r3, [pc, #4]	; (1aa4 <format_set+0x8>)
	return 0;
}
    1a9e:	2000      	movs	r0, #0
	log_format_current = log_type;
    1aa0:	6019      	str	r1, [r3, #0]
}
    1aa2:	4770      	bx	lr
    1aa4:	20000a50 	.word	0x20000a50

00001aa8 <panic>:
	panic_mode = true;
    1aa8:	4b02      	ldr	r3, [pc, #8]	; (1ab4 <panic+0xc>)
	log_output_flush(output);
    1aaa:	4803      	ldr	r0, [pc, #12]	; (1ab8 <panic+0x10>)
    1aac:	2201      	movs	r2, #1
    1aae:	701a      	strb	r2, [r3, #0]
    1ab0:	f004 bebe 	b.w	6830 <log_output_flush>
    1ab4:	2000133a 	.word	0x2000133a
    1ab8:	00007b08 	.word	0x00007b08

00001abc <dropped>:
	log_output_dropped_process(output, cnt);
    1abc:	4801      	ldr	r0, [pc, #4]	; (1ac4 <dropped+0x8>)
    1abe:	f7ff bf61 	b.w	1984 <log_output_dropped_process>
    1ac2:	bf00      	nop
    1ac4:	00007b08 	.word	0x00007b08

00001ac8 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ac8:	4b06      	ldr	r3, [pc, #24]	; (1ae4 <process+0x1c>)
{
    1aca:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1acc:	6818      	ldr	r0, [r3, #0]
{
    1ace:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ad0:	f7ff fbea 	bl	12a8 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    1ad4:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ad6:	4603      	mov	r3, r0
}
    1ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    1adc:	4802      	ldr	r0, [pc, #8]	; (1ae8 <process+0x20>)
    1ade:	220f      	movs	r2, #15
    1ae0:	4718      	bx	r3
    1ae2:	bf00      	nop
    1ae4:	20000a50 	.word	0x20000a50
    1ae8:	00007b08 	.word	0x00007b08

00001aec <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    1aec:	4b05      	ldr	r3, [pc, #20]	; (1b04 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    1aee:	781b      	ldrb	r3, [r3, #0]
    1af0:	b11b      	cbz	r3, 1afa <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    1af2:	f241 3088 	movw	r0, #5000	; 0x1388
    1af6:	f005 be00 	b.w	76fa <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    1afa:	20a4      	movs	r0, #164	; 0xa4
    1afc:	2100      	movs	r1, #0
    1afe:	f003 be79 	b.w	57f4 <z_impl_k_sleep>
    1b02:	bf00      	nop
    1b04:	2000133a 	.word	0x2000133a

00001b08 <data_out_block_mode>:
{
    1b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    1b0c:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1b9c <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    1b10:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1ba0 <data_out_block_mode+0x98>
{
    1b14:	4680      	mov	r8, r0
    1b16:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1b18:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    1b1a:	f899 5000 	ldrb.w	r5, [r9]
    1b1e:	b9cd      	cbnz	r5, 1b54 <data_out_block_mode+0x4c>
    1b20:	f04f 33ff 	mov.w	r3, #4294967295
    1b24:	f04f 32ff 	mov.w	r2, #4294967295
    1b28:	4650      	mov	r0, sl
    1b2a:	f003 fa89 	bl	5040 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1b2e:	463a      	mov	r2, r7
    1b30:	4641      	mov	r1, r8
    1b32:	4628      	mov	r0, r5
    1b34:	f002 ffa0 	bl	4a78 <SEGGER_RTT_WriteSkipNoLock>
    1b38:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    1b3a:	4650      	mov	r0, sl
    1b3c:	f003 faf8 	bl	5130 <z_impl_k_mutex_unlock>
		if (ret) {
    1b40:	4d18      	ldr	r5, [pc, #96]	; (1ba4 <data_out_block_mode+0x9c>)
    1b42:	b1fe      	cbz	r6, 1b84 <data_out_block_mode+0x7c>
	host_present = true;
    1b44:	2301      	movs	r3, #1
    1b46:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    1b48:	f899 3000 	ldrb.w	r3, [r9]
    1b4c:	b96b      	cbnz	r3, 1b6a <data_out_block_mode+0x62>
}
    1b4e:	4638      	mov	r0, r7
    1b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1b54:	463a      	mov	r2, r7
    1b56:	4641      	mov	r1, r8
    1b58:	2000      	movs	r0, #0
    1b5a:	f002 ff8d 	bl	4a78 <SEGGER_RTT_WriteSkipNoLock>
    1b5e:	4606      	mov	r6, r0
    1b60:	e7ee      	b.n	1b40 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    1b62:	b95c      	cbnz	r4, 1b7c <data_out_block_mode+0x74>
		host_present = false;
    1b64:	702c      	strb	r4, [r5, #0]
    1b66:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    1b6a:	2000      	movs	r0, #0
    1b6c:	f002 ffd0 	bl	4b10 <SEGGER_RTT_HasDataUp>
    1b70:	2800      	cmp	r0, #0
    1b72:	d0ec      	beq.n	1b4e <data_out_block_mode+0x46>
    1b74:	782b      	ldrb	r3, [r5, #0]
    1b76:	2b00      	cmp	r3, #0
    1b78:	d1f3      	bne.n	1b62 <data_out_block_mode+0x5a>
    1b7a:	e7e8      	b.n	1b4e <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    1b7c:	3c01      	subs	r4, #1
    1b7e:	f7ff ffb5 	bl	1aec <on_failed_write.part.0>
    1b82:	e7f2      	b.n	1b6a <data_out_block_mode+0x62>
		} else if (host_present) {
    1b84:	782b      	ldrb	r3, [r5, #0]
    1b86:	b113      	cbz	r3, 1b8e <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    1b88:	3c01      	subs	r4, #1
    1b8a:	d104      	bne.n	1b96 <data_out_block_mode+0x8e>
		host_present = false;
    1b8c:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    1b8e:	782b      	ldrb	r3, [r5, #0]
    1b90:	2b00      	cmp	r3, #0
    1b92:	d1c2      	bne.n	1b1a <data_out_block_mode+0x12>
    1b94:	e7db      	b.n	1b4e <data_out_block_mode+0x46>
    1b96:	f7ff ffa9 	bl	1aec <on_failed_write.part.0>
    1b9a:	e7f8      	b.n	1b8e <data_out_block_mode+0x86>
    1b9c:	2000133a 	.word	0x2000133a
    1ba0:	20000210 	.word	0x20000210
    1ba4:	20001339 	.word	0x20001339

00001ba8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1bac:	4605      	mov	r5, r0
	__asm__ volatile(
    1bae:	f04f 0320 	mov.w	r3, #32
    1bb2:	f3ef 8611 	mrs	r6, BASEPRI
    1bb6:	f383 8812 	msr	BASEPRI_MAX, r3
    1bba:	f3bf 8f6f 	isb	sy
	return list->head;
    1bbe:	4b0e      	ldr	r3, [pc, #56]	; (1bf8 <pm_state_notify+0x50>)
    1bc0:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1bc2:	b19c      	cbz	r4, 1bec <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1bc4:	4f0d      	ldr	r7, [pc, #52]	; (1bfc <pm_state_notify+0x54>)
    1bc6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1c00 <pm_state_notify+0x58>
    1bca:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1bce:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1bd2:	2d00      	cmp	r5, #0
    1bd4:	bf08      	it	eq
    1bd6:	4613      	moveq	r3, r2
		if (callback) {
    1bd8:	b12b      	cbz	r3, 1be6 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1bda:	f898 2014 	ldrb.w	r2, [r8, #20]
    1bde:	fb09 f202 	mul.w	r2, r9, r2
    1be2:	5cb8      	ldrb	r0, [r7, r2]
    1be4:	4798      	blx	r3
	return node->next;
    1be6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1be8:	2c00      	cmp	r4, #0
    1bea:	d1f0      	bne.n	1bce <pm_state_notify+0x26>
	__asm__ volatile(
    1bec:	f386 8811 	msr	BASEPRI, r6
    1bf0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1bf8:	20000a60 	.word	0x20000a60
    1bfc:	20000a68 	.word	0x20000a68
    1c00:	20001100 	.word	0x20001100

00001c04 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1c04:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    1c06:	2301      	movs	r3, #1
    1c08:	f000 001f 	and.w	r0, r0, #31
    1c0c:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c10:	4b07      	ldr	r3, [pc, #28]	; (1c30 <atomic_clear_bit.constprop.0+0x2c>)
    1c12:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1c16:	43c0      	mvns	r0, r0
    1c18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1c1c:	e853 2f00 	ldrex	r2, [r3]
    1c20:	4002      	ands	r2, r0
    1c22:	e843 2100 	strex	r1, r2, [r3]
    1c26:	2900      	cmp	r1, #0
    1c28:	d1f8      	bne.n	1c1c <atomic_clear_bit.constprop.0+0x18>
    1c2a:	f3bf 8f5b 	dmb	ish
}
    1c2e:	4770      	bx	lr
    1c30:	20000a74 	.word	0x20000a74

00001c34 <pm_system_resume>:

void pm_system_resume(void)
{
    1c34:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1c36:	4b1a      	ldr	r3, [pc, #104]	; (1ca0 <pm_system_resume+0x6c>)
    1c38:	7d1c      	ldrb	r4, [r3, #20]
    1c3a:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1c3e:	f004 031f 	and.w	r3, r4, #31
    1c42:	2201      	movs	r2, #1
    1c44:	409a      	lsls	r2, r3
    1c46:	4b17      	ldr	r3, [pc, #92]	; (1ca4 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1c48:	0961      	lsrs	r1, r4, #5
    1c4a:	43d0      	mvns	r0, r2
    1c4c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1c50:	e853 1f00 	ldrex	r1, [r3]
    1c54:	ea01 0500 	and.w	r5, r1, r0
    1c58:	e843 5c00 	strex	ip, r5, [r3]
    1c5c:	f1bc 0f00 	cmp.w	ip, #0
    1c60:	d1f6      	bne.n	1c50 <pm_system_resume+0x1c>
    1c62:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1c66:	4211      	tst	r1, r2
    1c68:	d013      	beq.n	1c92 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    1c6a:	4b0f      	ldr	r3, [pc, #60]	; (1ca8 <pm_system_resume+0x74>)
    1c6c:	4d0f      	ldr	r5, [pc, #60]	; (1cac <pm_system_resume+0x78>)
    1c6e:	b18b      	cbz	r3, 1c94 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1c70:	230c      	movs	r3, #12
    1c72:	4363      	muls	r3, r4
    1c74:	18ea      	adds	r2, r5, r3
    1c76:	5ce8      	ldrb	r0, [r5, r3]
    1c78:	7851      	ldrb	r1, [r2, #1]
    1c7a:	f004 fec1 	bl	6a00 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1c7e:	2000      	movs	r0, #0
    1c80:	f7ff ff92 	bl	1ba8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1c84:	230c      	movs	r3, #12
    1c86:	435c      	muls	r4, r3
    1c88:	192a      	adds	r2, r5, r4
    1c8a:	2300      	movs	r3, #0
    1c8c:	512b      	str	r3, [r5, r4]
    1c8e:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1c92:	bd38      	pop	{r3, r4, r5, pc}
    1c94:	f383 8811 	msr	BASEPRI, r3
    1c98:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1c9c:	e7ef      	b.n	1c7e <pm_system_resume+0x4a>
    1c9e:	bf00      	nop
    1ca0:	20001100 	.word	0x20001100
    1ca4:	20000a78 	.word	0x20000a78
    1ca8:	00006a01 	.word	0x00006a01
    1cac:	20000a68 	.word	0x20000a68

00001cb0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1cb4:	4b32      	ldr	r3, [pc, #200]	; (1d80 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1cb6:	4a33      	ldr	r2, [pc, #204]	; (1d84 <pm_system_suspend+0xd4>)
    1cb8:	7d1c      	ldrb	r4, [r3, #20]
    1cba:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1cbe:	0963      	lsrs	r3, r4, #5
    1cc0:	ea4f 0983 	mov.w	r9, r3, lsl #2
    1cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1cc8:	4e2f      	ldr	r6, [pc, #188]	; (1d88 <pm_system_suspend+0xd8>)
    1cca:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1cce:	f004 081f 	and.w	r8, r4, #31
    1cd2:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1cd6:	f013 0f01 	tst.w	r3, #1
{
    1cda:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1cdc:	d10a      	bne.n	1cf4 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1cde:	4601      	mov	r1, r0
    1ce0:	4620      	mov	r0, r4
    1ce2:	f000 f869 	bl	1db8 <pm_policy_next_state>
		if (info != NULL) {
    1ce6:	b128      	cbz	r0, 1cf4 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    1ce8:	c807      	ldmia	r0, {r0, r1, r2}
    1cea:	230c      	movs	r3, #12
    1cec:	fb03 6304 	mla	r3, r3, r4, r6
    1cf0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1cf4:	230c      	movs	r3, #12
    1cf6:	4363      	muls	r3, r4
    1cf8:	18f2      	adds	r2, r6, r3
    1cfa:	5cf5      	ldrb	r5, [r6, r3]
    1cfc:	b92d      	cbnz	r5, 1d0a <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    1cfe:	4620      	mov	r0, r4
    1d00:	f7ff ff80 	bl	1c04 <atomic_clear_bit.constprop.0>
		ret = false;
    1d04:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    1d06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    1d0a:	1c7b      	adds	r3, r7, #1
    1d0c:	d00f      	beq.n	1d2e <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    1d0e:	f8d2 c008 	ldr.w	ip, [r2, #8]
    1d12:	481e      	ldr	r0, [pc, #120]	; (1d8c <pm_system_suspend+0xdc>)
    1d14:	4a1e      	ldr	r2, [pc, #120]	; (1d90 <pm_system_suspend+0xe0>)
    1d16:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    1d1a:	2100      	movs	r1, #0
    1d1c:	2300      	movs	r3, #0
    1d1e:	fbec 0105 	umlal	r0, r1, ip, r5
    1d22:	f7fe f9ed 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    1d26:	2101      	movs	r1, #1
    1d28:	1a38      	subs	r0, r7, r0
    1d2a:	f005 fcc8 	bl	76be <z_set_timeout_expiry>
	k_sched_lock();
    1d2e:	f003 fae1 	bl	52f4 <k_sched_lock>
	pm_state_notify(true);
    1d32:	2001      	movs	r0, #1
    1d34:	f7ff ff38 	bl	1ba8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1d38:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1d3c:	2301      	movs	r3, #1
    1d3e:	fa03 f808 	lsl.w	r8, r3, r8
    1d42:	4b14      	ldr	r3, [pc, #80]	; (1d94 <pm_system_suspend+0xe4>)
    1d44:	4499      	add	r9, r3
    1d46:	e859 3f00 	ldrex	r3, [r9]
    1d4a:	ea43 0308 	orr.w	r3, r3, r8
    1d4e:	e849 3200 	strex	r2, r3, [r9]
    1d52:	2a00      	cmp	r2, #0
    1d54:	d1f7      	bne.n	1d46 <pm_system_suspend+0x96>
    1d56:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    1d5a:	4b0f      	ldr	r3, [pc, #60]	; (1d98 <pm_system_suspend+0xe8>)
    1d5c:	b133      	cbz	r3, 1d6c <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    1d5e:	230c      	movs	r3, #12
    1d60:	4363      	muls	r3, r4
    1d62:	18f2      	adds	r2, r6, r3
    1d64:	5cf0      	ldrb	r0, [r6, r3]
    1d66:	7851      	ldrb	r1, [r2, #1]
    1d68:	f004 fe3e 	bl	69e8 <pm_state_set>
	pm_system_resume();
    1d6c:	f7ff ff62 	bl	1c34 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    1d70:	4620      	mov	r0, r4
    1d72:	f7ff ff47 	bl	1c04 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    1d76:	f003 fc8d 	bl	5694 <k_sched_unlock>
	bool ret = true;
    1d7a:	2001      	movs	r0, #1
    1d7c:	e7c3      	b.n	1d06 <pm_system_suspend+0x56>
    1d7e:	bf00      	nop
    1d80:	20001100 	.word	0x20001100
    1d84:	20000a74 	.word	0x20000a74
    1d88:	20000a68 	.word	0x20000a68
    1d8c:	000f423f 	.word	0x000f423f
    1d90:	000f4240 	.word	0x000f4240
    1d94:	20000a78 	.word	0x20000a78
    1d98:	000069e9 	.word	0x000069e9

00001d9c <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1d9c:	4b05      	ldr	r3, [pc, #20]	; (1db4 <pm_policy_state_lock_is_active+0x18>)
    1d9e:	f3bf 8f5b 	dmb	ish
    1da2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1da6:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    1daa:	3800      	subs	r0, #0
    1dac:	bf18      	it	ne
    1dae:	2001      	movne	r0, #1
    1db0:	4770      	bx	lr
    1db2:	bf00      	nop
    1db4:	20000a7c 	.word	0x20000a7c

00001db8 <pm_policy_next_state>:
{
    1db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dbc:	b085      	sub	sp, #20
    1dbe:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1dc0:	a903      	add	r1, sp, #12
    1dc2:	f000 f847 	bl	1e54 <pm_state_cpu_get_all>
    1dc6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1e48 <pm_policy_next_state+0x90>
    1dca:	f8df a080 	ldr.w	sl, [pc, #128]	; 1e4c <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1dce:	1e44      	subs	r4, r0, #1
    1dd0:	b224      	sxth	r4, r4
    1dd2:	f04f 0b00 	mov.w	fp, #0
    1dd6:	1c63      	adds	r3, r4, #1
    1dd8:	d104      	bne.n	1de4 <pm_policy_next_state+0x2c>
	return NULL;
    1dda:	2600      	movs	r6, #0
}
    1ddc:	4630      	mov	r0, r6
    1dde:	b005      	add	sp, #20
    1de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1de4:	9a03      	ldr	r2, [sp, #12]
    1de6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1dea:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    1dee:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    1df2:	f7ff ffd3 	bl	1d9c <pm_policy_state_lock_is_active>
    1df6:	4605      	mov	r5, r0
    1df8:	bb10      	cbnz	r0, 1e40 <pm_policy_next_state+0x88>
    1dfa:	6870      	ldr	r0, [r6, #4]
    1dfc:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    1e00:	46c4      	mov	ip, r8
    1e02:	4629      	mov	r1, r5
    1e04:	fbe0 c109 	umlal	ip, r1, r0, r9
    1e08:	4652      	mov	r2, sl
    1e0a:	465b      	mov	r3, fp
    1e0c:	4660      	mov	r0, ip
    1e0e:	f7fe f977 	bl	100 <__aeabi_uldivmod>
    1e12:	9001      	str	r0, [sp, #4]
    1e14:	68b0      	ldr	r0, [r6, #8]
    1e16:	46c4      	mov	ip, r8
    1e18:	4629      	mov	r1, r5
    1e1a:	fbe0 c109 	umlal	ip, r1, r0, r9
    1e1e:	465b      	mov	r3, fp
    1e20:	4652      	mov	r2, sl
    1e22:	4660      	mov	r0, ip
    1e24:	f7fe f96c 	bl	100 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1e28:	4b09      	ldr	r3, [pc, #36]	; (1e50 <pm_policy_next_state+0x98>)
    1e2a:	681b      	ldr	r3, [r3, #0]
    1e2c:	1c59      	adds	r1, r3, #1
    1e2e:	d001      	beq.n	1e34 <pm_policy_next_state+0x7c>
    1e30:	4283      	cmp	r3, r0
    1e32:	d905      	bls.n	1e40 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    1e34:	1c7a      	adds	r2, r7, #1
    1e36:	d0d1      	beq.n	1ddc <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    1e38:	9b01      	ldr	r3, [sp, #4]
    1e3a:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    1e3c:	42b8      	cmp	r0, r7
    1e3e:	d9cd      	bls.n	1ddc <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    1e40:	3c01      	subs	r4, #1
    1e42:	b224      	sxth	r4, r4
    1e44:	e7c7      	b.n	1dd6 <pm_policy_next_state+0x1e>
    1e46:	bf00      	nop
    1e48:	000f423f 	.word	0x000f423f
    1e4c:	000f4240 	.word	0x000f4240
    1e50:	2000000c 	.word	0x2000000c

00001e54 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1e54:	b908      	cbnz	r0, 1e5a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1e56:	4b02      	ldr	r3, [pc, #8]	; (1e60 <pm_state_cpu_get_all+0xc>)
    1e58:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1e5a:	2000      	movs	r0, #0
    1e5c:	4770      	bx	lr
    1e5e:	bf00      	nop
    1e60:	00007b18 	.word	0x00007b18

00001e64 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1e64:	4801      	ldr	r0, [pc, #4]	; (1e6c <nrf_cc3xx_platform_abort_init+0x8>)
    1e66:	f003 bf75 	b.w	5d54 <nrf_cc3xx_platform_set_abort>
    1e6a:	bf00      	nop
    1e6c:	00007b18 	.word	0x00007b18

00001e70 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1e70:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    1e72:	4604      	mov	r4, r0
    1e74:	b918      	cbnz	r0, 1e7e <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1e76:	4b0d      	ldr	r3, [pc, #52]	; (1eac <mutex_free_platform+0x3c>)
    1e78:	480d      	ldr	r0, [pc, #52]	; (1eb0 <mutex_free_platform+0x40>)
    1e7a:	685b      	ldr	r3, [r3, #4]
    1e7c:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1e7e:	6861      	ldr	r1, [r4, #4]
    1e80:	2908      	cmp	r1, #8
    1e82:	d00d      	beq.n	1ea0 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1e84:	f031 0304 	bics.w	r3, r1, #4
    1e88:	d00a      	beq.n	1ea0 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1e8a:	f011 0102 	ands.w	r1, r1, #2
    1e8e:	d008      	beq.n	1ea2 <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1e90:	4808      	ldr	r0, [pc, #32]	; (1eb4 <mutex_free_platform+0x44>)
    1e92:	4621      	mov	r1, r4
    1e94:	f005 fad0 	bl	7438 <k_mem_slab_free>
        mutex->mutex = NULL;
    1e98:	2300      	movs	r3, #0
    1e9a:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1e9c:	2300      	movs	r3, #0
    1e9e:	6063      	str	r3, [r4, #4]
}
    1ea0:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1ea2:	6820      	ldr	r0, [r4, #0]
    1ea4:	2214      	movs	r2, #20
    1ea6:	f004 fd93 	bl	69d0 <memset>
    1eaa:	e7f7      	b.n	1e9c <mutex_free_platform+0x2c>
    1eac:	200000f0 	.word	0x200000f0
    1eb0:	00007ea5 	.word	0x00007ea5
    1eb4:	20000a98 	.word	0x20000a98

00001eb8 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1eb8:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1eba:	b308      	cbz	r0, 1f00 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    1ebc:	6843      	ldr	r3, [r0, #4]
    1ebe:	2b04      	cmp	r3, #4
    1ec0:	d110      	bne.n	1ee4 <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1ec2:	2201      	movs	r2, #1
    1ec4:	6803      	ldr	r3, [r0, #0]
    1ec6:	f3bf 8f5b 	dmb	ish
    1eca:	e853 1f00 	ldrex	r1, [r3]
    1ece:	2900      	cmp	r1, #0
    1ed0:	d103      	bne.n	1eda <mutex_lock_platform+0x22>
    1ed2:	e843 2000 	strex	r0, r2, [r3]
    1ed6:	2800      	cmp	r0, #0
    1ed8:	d1f7      	bne.n	1eca <mutex_lock_platform+0x12>
    1eda:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1ede:	d10b      	bne.n	1ef8 <mutex_lock_platform+0x40>
    1ee0:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    1ee2:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1ee4:	b153      	cbz	r3, 1efc <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1ee6:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1ee8:	f04f 32ff 	mov.w	r2, #4294967295
    1eec:	f04f 33ff 	mov.w	r3, #4294967295
    1ef0:	f003 f8a6 	bl	5040 <z_impl_k_mutex_lock>
        if (ret == 0) {
    1ef4:	2800      	cmp	r0, #0
    1ef6:	d0f3      	beq.n	1ee0 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1ef8:	4803      	ldr	r0, [pc, #12]	; (1f08 <mutex_lock_platform+0x50>)
    1efa:	e7f2      	b.n	1ee2 <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1efc:	4803      	ldr	r0, [pc, #12]	; (1f0c <mutex_lock_platform+0x54>)
    1efe:	e7f0      	b.n	1ee2 <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1f00:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1f04:	e7ed      	b.n	1ee2 <mutex_lock_platform+0x2a>
    1f06:	bf00      	nop
    1f08:	ffff8fe9 	.word	0xffff8fe9
    1f0c:	ffff8fea 	.word	0xffff8fea

00001f10 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f10:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1f12:	b1d0      	cbz	r0, 1f4a <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1f14:	6843      	ldr	r3, [r0, #4]
    1f16:	2b04      	cmp	r3, #4
    1f18:	d111      	bne.n	1f3e <mutex_unlock_platform+0x2e>
    1f1a:	2200      	movs	r2, #0
    1f1c:	6803      	ldr	r3, [r0, #0]
    1f1e:	f3bf 8f5b 	dmb	ish
    1f22:	e853 1f00 	ldrex	r1, [r3]
    1f26:	2901      	cmp	r1, #1
    1f28:	d103      	bne.n	1f32 <mutex_unlock_platform+0x22>
    1f2a:	e843 2000 	strex	r0, r2, [r3]
    1f2e:	2800      	cmp	r0, #0
    1f30:	d1f7      	bne.n	1f22 <mutex_unlock_platform+0x12>
    1f32:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1f36:	4807      	ldr	r0, [pc, #28]	; (1f54 <mutex_unlock_platform+0x44>)
    1f38:	bf08      	it	eq
    1f3a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1f3c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1f3e:	b13b      	cbz	r3, 1f50 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1f40:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1f42:	f003 f8f5 	bl	5130 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1f46:	2000      	movs	r0, #0
    1f48:	e7f8      	b.n	1f3c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1f4a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1f4e:	e7f5      	b.n	1f3c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1f50:	4801      	ldr	r0, [pc, #4]	; (1f58 <mutex_unlock_platform+0x48>)
    1f52:	e7f3      	b.n	1f3c <mutex_unlock_platform+0x2c>
    1f54:	ffff8fe9 	.word	0xffff8fe9
    1f58:	ffff8fea 	.word	0xffff8fea

00001f5c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1f5c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1f5e:	4604      	mov	r4, r0
    1f60:	b918      	cbnz	r0, 1f6a <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1f62:	4b16      	ldr	r3, [pc, #88]	; (1fbc <mutex_init_platform+0x60>)
    1f64:	4816      	ldr	r0, [pc, #88]	; (1fc0 <mutex_init_platform+0x64>)
    1f66:	685b      	ldr	r3, [r3, #4]
    1f68:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1f6a:	6863      	ldr	r3, [r4, #4]
    1f6c:	2b04      	cmp	r3, #4
    1f6e:	d023      	beq.n	1fb8 <mutex_init_platform+0x5c>
    1f70:	2b08      	cmp	r3, #8
    1f72:	d021      	beq.n	1fb8 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1f74:	b9cb      	cbnz	r3, 1faa <mutex_init_platform+0x4e>
    1f76:	6823      	ldr	r3, [r4, #0]
    1f78:	b9bb      	cbnz	r3, 1faa <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1f7a:	4812      	ldr	r0, [pc, #72]	; (1fc4 <mutex_init_platform+0x68>)
    1f7c:	f04f 32ff 	mov.w	r2, #4294967295
    1f80:	f04f 33ff 	mov.w	r3, #4294967295
    1f84:	4621      	mov	r1, r4
    1f86:	f002 ff57 	bl	4e38 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1f8a:	b908      	cbnz	r0, 1f90 <mutex_init_platform+0x34>
    1f8c:	6823      	ldr	r3, [r4, #0]
    1f8e:	b91b      	cbnz	r3, 1f98 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1f90:	4b0a      	ldr	r3, [pc, #40]	; (1fbc <mutex_init_platform+0x60>)
    1f92:	480d      	ldr	r0, [pc, #52]	; (1fc8 <mutex_init_platform+0x6c>)
    1f94:	685b      	ldr	r3, [r3, #4]
    1f96:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1f98:	6820      	ldr	r0, [r4, #0]
    1f9a:	2214      	movs	r2, #20
    1f9c:	2100      	movs	r1, #0
    1f9e:	f004 fd17 	bl	69d0 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1fa2:	6863      	ldr	r3, [r4, #4]
    1fa4:	f043 0302 	orr.w	r3, r3, #2
    1fa8:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1faa:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1fac:	f005 fa87 	bl	74be <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1fb0:	6863      	ldr	r3, [r4, #4]
    1fb2:	f043 0301 	orr.w	r3, r3, #1
    1fb6:	6063      	str	r3, [r4, #4]
}
    1fb8:	bd10      	pop	{r4, pc}
    1fba:	bf00      	nop
    1fbc:	200000f0 	.word	0x200000f0
    1fc0:	00007ea5 	.word	0x00007ea5
    1fc4:	20000a98 	.word	0x20000a98
    1fc8:	00007ecb 	.word	0x00007ecb

00001fcc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1fcc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1fce:	4906      	ldr	r1, [pc, #24]	; (1fe8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1fd0:	4806      	ldr	r0, [pc, #24]	; (1fec <nrf_cc3xx_platform_mutex_init+0x20>)
    1fd2:	2340      	movs	r3, #64	; 0x40
    1fd4:	2214      	movs	r2, #20
    1fd6:	f005 fa14 	bl	7402 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1fda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1fde:	4904      	ldr	r1, [pc, #16]	; (1ff0 <nrf_cc3xx_platform_mutex_init+0x24>)
    1fe0:	4804      	ldr	r0, [pc, #16]	; (1ff4 <nrf_cc3xx_platform_mutex_init+0x28>)
    1fe2:	f003 bf17 	b.w	5e14 <nrf_cc3xx_platform_set_mutexes>
    1fe6:	bf00      	nop
    1fe8:	20000ab4 	.word	0x20000ab4
    1fec:	20000a98 	.word	0x20000a98
    1ff0:	00007b30 	.word	0x00007b30
    1ff4:	00007b20 	.word	0x00007b20

00001ff8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1ff8:	4901      	ldr	r1, [pc, #4]	; (2000 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1ffa:	2210      	movs	r2, #16
	str	r2, [r1]
    1ffc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1ffe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2000:	e000ed10 	.word	0xe000ed10

00002004 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2004:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2006:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2008:	f380 8811 	msr	BASEPRI, r0
	isb
    200c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2010:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2014:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2016:	b662      	cpsie	i
	isb
    2018:	f3bf 8f6f 	isb	sy

	bx	lr
    201c:	4770      	bx	lr
    201e:	bf00      	nop

00002020 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2020:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2022:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2024:	f381 8811 	msr	BASEPRI, r1

	wfe
    2028:	bf20      	wfe

	msr	BASEPRI, r0
    202a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    202e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2030:	4770      	bx	lr
    2032:	bf00      	nop

00002034 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2038:	4681      	mov	r9, r0
    203a:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    203c:	460c      	mov	r4, r1
    203e:	2900      	cmp	r1, #0
    2040:	d04c      	beq.n	20dc <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2042:	466e      	mov	r6, sp
    2044:	b08a      	sub	sp, #40	; 0x28
    2046:	466d      	mov	r5, sp
    2048:	e9d1 1200 	ldrd	r1, r2, [r1]
    204c:	68a3      	ldr	r3, [r4, #8]
    204e:	4827      	ldr	r0, [pc, #156]	; (20ec <z_arm_fatal_error+0xb8>)
    2050:	46a8      	mov	r8, r5
    2052:	f04f 0a05 	mov.w	sl, #5
    2056:	e9c5 0105 	strd	r0, r1, [r5, #20]
    205a:	e9c5 2307 	strd	r2, r3, [r5, #28]
    205e:	f848 af10 	str.w	sl, [r8, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    2062:	4823      	ldr	r0, [pc, #140]	; (20f0 <z_arm_fatal_error+0xbc>)
    2064:	4642      	mov	r2, r8
    2066:	2300      	movs	r3, #0
    2068:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    206c:	f004 fc30 	bl	68d0 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2070:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    2074:	6963      	ldr	r3, [r4, #20]
    2076:	481f      	ldr	r0, [pc, #124]	; (20f4 <z_arm_fatal_error+0xc0>)
    2078:	f8c5 a010 	str.w	sl, [r5, #16]
    207c:	46b5      	mov	sp, r6
    207e:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2082:	46ad      	mov	sp, r5
    2084:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2088:	4819      	ldr	r0, [pc, #100]	; (20f0 <z_arm_fatal_error+0xbc>)
    208a:	4642      	mov	r2, r8
    208c:	2300      	movs	r3, #0
    208e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2092:	f004 fc1d 	bl	68d0 <z_impl_z_log_msg2_static_create>
    2096:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2098:	b088      	sub	sp, #32
    209a:	466d      	mov	r5, sp
    209c:	69e3      	ldr	r3, [r4, #28]
    209e:	4a16      	ldr	r2, [pc, #88]	; (20f8 <z_arm_fatal_error+0xc4>)
    20a0:	46a8      	mov	r8, r5
    20a2:	f04f 0a03 	mov.w	sl, #3
    20a6:	e9c5 2305 	strd	r2, r3, [r5, #20]
    20aa:	f848 af10 	str.w	sl, [r8, #16]!
    20ae:	4810      	ldr	r0, [pc, #64]	; (20f0 <z_arm_fatal_error+0xbc>)
    20b0:	4642      	mov	r2, r8
    20b2:	2300      	movs	r3, #0
    20b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    20b8:	f004 fc0a 	bl	68d0 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    20bc:	4a0f      	ldr	r2, [pc, #60]	; (20fc <z_arm_fatal_error+0xc8>)
    20be:	69a3      	ldr	r3, [r4, #24]
    20c0:	f8c5 a010 	str.w	sl, [r5, #16]
    20c4:	46b5      	mov	sp, r6
    20c6:	e9c5 2305 	strd	r2, r3, [r5, #20]
    20ca:	46ad      	mov	sp, r5
    20cc:	4808      	ldr	r0, [pc, #32]	; (20f0 <z_arm_fatal_error+0xbc>)
    20ce:	2300      	movs	r3, #0
    20d0:	4642      	mov	r2, r8
    20d2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    20d6:	f004 fbfb 	bl	68d0 <z_impl_z_log_msg2_static_create>
    20da:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    20dc:	4621      	mov	r1, r4
    20de:	4648      	mov	r0, r9
    20e0:	f002 fd40 	bl	4b64 <z_fatal_error>
}
    20e4:	46bd      	mov	sp, r7
    20e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    20ea:	bf00      	nop
    20ec:	00007ef8 	.word	0x00007ef8
    20f0:	000079ec 	.word	0x000079ec
    20f4:	00007f27 	.word	0x00007f27
    20f8:	00007f56 	.word	0x00007f56
    20fc:	00007f65 	.word	0x00007f65

00002100 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2100:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2102:	2b00      	cmp	r3, #0
    2104:	db08      	blt.n	2118 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2106:	2201      	movs	r2, #1
    2108:	f000 001f 	and.w	r0, r0, #31
    210c:	fa02 f000 	lsl.w	r0, r2, r0
    2110:	095b      	lsrs	r3, r3, #5
    2112:	4a02      	ldr	r2, [pc, #8]	; (211c <arch_irq_enable+0x1c>)
    2114:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2118:	4770      	bx	lr
    211a:	bf00      	nop
    211c:	e000e100 	.word	0xe000e100

00002120 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2120:	4b05      	ldr	r3, [pc, #20]	; (2138 <arch_irq_is_enabled+0x18>)
    2122:	0942      	lsrs	r2, r0, #5
    2124:	f000 001f 	and.w	r0, r0, #31
    2128:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    212c:	2301      	movs	r3, #1
    212e:	fa03 f000 	lsl.w	r0, r3, r0
}
    2132:	4010      	ands	r0, r2
    2134:	4770      	bx	lr
    2136:	bf00      	nop
    2138:	e000e100 	.word	0xe000e100

0000213c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    213c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    213e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2140:	bfa8      	it	ge
    2142:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    2146:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    214a:	bfb8      	it	lt
    214c:	4b06      	ldrlt	r3, [pc, #24]	; (2168 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    214e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2152:	bfac      	ite	ge
    2154:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2158:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    215c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    215e:	bfb4      	ite	lt
    2160:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2162:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2166:	4770      	bx	lr
    2168:	e000ed14 	.word	0xe000ed14

0000216c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    216c:	bf30      	wfi
    b z_SysNmiOnReset
    216e:	f7ff bffd 	b.w	216c <z_SysNmiOnReset>
    2172:	bf00      	nop

00002174 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2174:	4a0b      	ldr	r2, [pc, #44]	; (21a4 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2176:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2178:	4b0b      	ldr	r3, [pc, #44]	; (21a8 <z_arm_prep_c+0x34>)
    217a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    217e:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2180:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2184:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2188:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    218c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2194:	f002 fd7e 	bl	4c94 <z_bss_zero>
	z_data_copy();
    2198:	f003 fb9e 	bl	58d8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    219c:	f000 fbb8 	bl	2910 <z_arm_interrupt_init>
	z_cstart();
    21a0:	f002 fdbc 	bl	4d1c <z_cstart>
    21a4:	00000000 	.word	0x00000000
    21a8:	e000ed00 	.word	0xe000ed00

000021ac <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    21ac:	4a09      	ldr	r2, [pc, #36]	; (21d4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    21ae:	490a      	ldr	r1, [pc, #40]	; (21d8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    21b0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    21b2:	6809      	ldr	r1, [r1, #0]
    21b4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    21b6:	4909      	ldr	r1, [pc, #36]	; (21dc <arch_swap+0x30>)
	_current->arch.basepri = key;
    21b8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    21ba:	684b      	ldr	r3, [r1, #4]
    21bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    21c0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    21c2:	2300      	movs	r3, #0
    21c4:	f383 8811 	msr	BASEPRI, r3
    21c8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    21cc:	6893      	ldr	r3, [r2, #8]
}
    21ce:	6f98      	ldr	r0, [r3, #120]	; 0x78
    21d0:	4770      	bx	lr
    21d2:	bf00      	nop
    21d4:	20001100 	.word	0x20001100
    21d8:	00007ca0 	.word	0x00007ca0
    21dc:	e000ed00 	.word	0xe000ed00

000021e0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    21e0:	4912      	ldr	r1, [pc, #72]	; (222c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    21e2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    21e4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    21e8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    21ea:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    21ee:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    21f2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    21f4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    21f8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    21fc:	4f0c      	ldr	r7, [pc, #48]	; (2230 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    21fe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2202:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2204:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2206:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2208:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    220a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    220c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    220e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2212:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2214:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2216:	f000 fc17 	bl	2a48 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    221a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    221e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2222:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2226:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    222a:	4770      	bx	lr
    ldr r1, =_kernel
    222c:	20001100 	.word	0x20001100
    ldr v4, =_SCS_ICSR
    2230:	e000ed04 	.word	0xe000ed04

00002234 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2234:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2238:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    223a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    223e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2242:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2244:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2248:	2902      	cmp	r1, #2
    beq _oops
    224a:	d0ff      	beq.n	224c <_oops>

0000224c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    224c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    224e:	f004 fb88 	bl	6962 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2252:	bd01      	pop	{r0, pc}

00002254 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2254:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2258:	9b00      	ldr	r3, [sp, #0]
    225a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    225e:	490a      	ldr	r1, [pc, #40]	; (2288 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2260:	9b01      	ldr	r3, [sp, #4]
    2262:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2266:	9b02      	ldr	r3, [sp, #8]
    2268:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    226c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2270:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2274:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2278:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    227c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    227e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2280:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2282:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2284:	4770      	bx	lr
    2286:	bf00      	nop
    2288:	0000631f 	.word	0x0000631f

0000228c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    228c:	4a09      	ldr	r2, [pc, #36]	; (22b4 <z_check_thread_stack_fail+0x28>)
{
    228e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2290:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2292:	b170      	cbz	r0, 22b2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2294:	f113 0f16 	cmn.w	r3, #22
    2298:	6e40      	ldr	r0, [r0, #100]	; 0x64
    229a:	d005      	beq.n	22a8 <z_check_thread_stack_fail+0x1c>
    229c:	f1a0 0220 	sub.w	r2, r0, #32
    22a0:	429a      	cmp	r2, r3
    22a2:	d805      	bhi.n	22b0 <z_check_thread_stack_fail+0x24>
    22a4:	4283      	cmp	r3, r0
    22a6:	d203      	bcs.n	22b0 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    22a8:	4281      	cmp	r1, r0
    22aa:	bf28      	it	cs
    22ac:	2000      	movcs	r0, #0
    22ae:	4770      	bx	lr
    22b0:	2000      	movs	r0, #0
}
    22b2:	4770      	bx	lr
    22b4:	20001100 	.word	0x20001100

000022b8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    22b8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    22ba:	4b09      	ldr	r3, [pc, #36]	; (22e0 <arch_switch_to_main_thread+0x28>)
    22bc:	6098      	str	r0, [r3, #8]
{
    22be:	460d      	mov	r5, r1
    22c0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    22c2:	f000 fbc1 	bl	2a48 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    22c6:	4620      	mov	r0, r4
    22c8:	f385 8809 	msr	PSP, r5
    22cc:	2100      	movs	r1, #0
    22ce:	b663      	cpsie	if
    22d0:	f381 8811 	msr	BASEPRI, r1
    22d4:	f3bf 8f6f 	isb	sy
    22d8:	2200      	movs	r2, #0
    22da:	2300      	movs	r3, #0
    22dc:	f004 f81f 	bl	631e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    22e0:	20001100 	.word	0x20001100

000022e4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    22e4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    22e6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    22e8:	4a0b      	ldr	r2, [pc, #44]	; (2318 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    22ea:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    22ec:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    22ee:	bf1e      	ittt	ne
	movne	r1, #0
    22f0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    22f2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    22f4:	f005 f8d4 	blne	74a0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    22f8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    22fa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    22fe:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2302:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2306:	4905      	ldr	r1, [pc, #20]	; (231c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2308:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    230a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    230c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    230e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2312:	4903      	ldr	r1, [pc, #12]	; (2320 <_isr_wrapper+0x3c>)
	bx r1
    2314:	4708      	bx	r1
    2316:	0000      	.short	0x0000
	ldr r2, =_kernel
    2318:	20001100 	.word	0x20001100
	ldr r1, =_sw_isr_table
    231c:	00007844 	.word	0x00007844
	ldr r1, =z_arm_int_exit
    2320:	00002325 	.word	0x00002325

00002324 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2324:	4b04      	ldr	r3, [pc, #16]	; (2338 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2326:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2328:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    232a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    232c:	d003      	beq.n	2336 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    232e:	4903      	ldr	r1, [pc, #12]	; (233c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2334:	600a      	str	r2, [r1, #0]

00002336 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2336:	4770      	bx	lr
	ldr r3, =_kernel
    2338:	20001100 	.word	0x20001100
	ldr r1, =_SCS_ICSR
    233c:	e000ed04 	.word	0xe000ed04

00002340 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2344:	b086      	sub	sp, #24
    2346:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2348:	4b3f      	ldr	r3, [pc, #252]	; (2448 <bus_fault.constprop.0+0x108>)
    234a:	617b      	str	r3, [r7, #20]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    234c:	4606      	mov	r6, r0
    234e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2350:	483e      	ldr	r0, [pc, #248]	; (244c <bus_fault.constprop.0+0x10c>)
    2352:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2356:	2402      	movs	r4, #2
    2358:	f107 0210 	add.w	r2, r7, #16
    235c:	613c      	str	r4, [r7, #16]
    235e:	f004 fb0f 	bl	6980 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2362:	4b3b      	ldr	r3, [pc, #236]	; (2450 <bus_fault.constprop.0+0x110>)
    2364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2366:	04d9      	lsls	r1, r3, #19
    2368:	d509      	bpl.n	237e <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    236a:	4b3a      	ldr	r3, [pc, #232]	; (2454 <bus_fault.constprop.0+0x114>)
    236c:	4837      	ldr	r0, [pc, #220]	; (244c <bus_fault.constprop.0+0x10c>)
    236e:	f107 0210 	add.w	r2, r7, #16
    2372:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2376:	e9c7 4304 	strd	r4, r3, [r7, #16]
    237a:	f004 fb01 	bl	6980 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    237e:	4b34      	ldr	r3, [pc, #208]	; (2450 <bus_fault.constprop.0+0x110>)
    2380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2382:	051a      	lsls	r2, r3, #20
    2384:	d50a      	bpl.n	239c <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2386:	4b34      	ldr	r3, [pc, #208]	; (2458 <bus_fault.constprop.0+0x118>)
    2388:	617b      	str	r3, [r7, #20]
    238a:	4830      	ldr	r0, [pc, #192]	; (244c <bus_fault.constprop.0+0x10c>)
    238c:	2302      	movs	r3, #2
    238e:	f107 0210 	add.w	r2, r7, #16
    2392:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2396:	613b      	str	r3, [r7, #16]
    2398:	f004 faf2 	bl	6980 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    239c:	4c2c      	ldr	r4, [pc, #176]	; (2450 <bus_fault.constprop.0+0x110>)
    239e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23a0:	059b      	lsls	r3, r3, #22
    23a2:	d522      	bpl.n	23ea <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    23a4:	4b2d      	ldr	r3, [pc, #180]	; (245c <bus_fault.constprop.0+0x11c>)
    23a6:	4829      	ldr	r0, [pc, #164]	; (244c <bus_fault.constprop.0+0x10c>)
    23a8:	617b      	str	r3, [r7, #20]
    23aa:	f107 0210 	add.w	r2, r7, #16
    23ae:	2302      	movs	r3, #2
    23b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    23b4:	613b      	str	r3, [r7, #16]
    23b6:	f004 fae3 	bl	6980 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    23ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    23bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    23be:	0410      	lsls	r0, r2, #16
		PR_FAULT_INFO("  Precise data bus error");
    23c0:	46e8      	mov	r8, sp
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    23c2:	d512      	bpl.n	23ea <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    23c4:	b088      	sub	sp, #32
    23c6:	4926      	ldr	r1, [pc, #152]	; (2460 <bus_fault.constprop.0+0x120>)
    23c8:	4820      	ldr	r0, [pc, #128]	; (244c <bus_fault.constprop.0+0x10c>)
    23ca:	466a      	mov	r2, sp
    23cc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    23d0:	2303      	movs	r3, #3
    23d2:	f842 3f10 	str.w	r3, [r2, #16]!
    23d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    23da:	f004 fad1 	bl	6980 <z_log_msg2_static_create.constprop.0>
    23de:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    23e0:	b11e      	cbz	r6, 23ea <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    23e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    23e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    23e8:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    23ea:	4b19      	ldr	r3, [pc, #100]	; (2450 <bus_fault.constprop.0+0x110>)
    23ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    23ee:	0559      	lsls	r1, r3, #21
    23f0:	d50a      	bpl.n	2408 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    23f2:	4b1c      	ldr	r3, [pc, #112]	; (2464 <bus_fault.constprop.0+0x124>)
    23f4:	617b      	str	r3, [r7, #20]
    23f6:	4815      	ldr	r0, [pc, #84]	; (244c <bus_fault.constprop.0+0x10c>)
    23f8:	2302      	movs	r3, #2
    23fa:	f107 0210 	add.w	r2, r7, #16
    23fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2402:	613b      	str	r3, [r7, #16]
    2404:	f004 fabc 	bl	6980 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2408:	4b11      	ldr	r3, [pc, #68]	; (2450 <bus_fault.constprop.0+0x110>)
    240a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    240c:	05d2      	lsls	r2, r2, #23
    240e:	d515      	bpl.n	243c <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    2410:	4b15      	ldr	r3, [pc, #84]	; (2468 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2412:	617b      	str	r3, [r7, #20]
    2414:	480d      	ldr	r0, [pc, #52]	; (244c <bus_fault.constprop.0+0x10c>)
    2416:	2302      	movs	r3, #2
    2418:	f107 0210 	add.w	r2, r7, #16
    241c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2420:	613b      	str	r3, [r7, #16]
    2422:	f004 faad 	bl	6980 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2426:	4a0a      	ldr	r2, [pc, #40]	; (2450 <bus_fault.constprop.0+0x110>)
    2428:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    242a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    242c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    2430:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2432:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2434:	7028      	strb	r0, [r5, #0]
}
    2436:	46bd      	mov	sp, r7
    2438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    243c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    243e:	049b      	lsls	r3, r3, #18
    2440:	d5f1      	bpl.n	2426 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    2442:	4b0a      	ldr	r3, [pc, #40]	; (246c <bus_fault.constprop.0+0x12c>)
    2444:	e7e5      	b.n	2412 <bus_fault.constprop.0+0xd2>
    2446:	bf00      	nop
    2448:	00007f93 	.word	0x00007f93
    244c:	000079ec 	.word	0x000079ec
    2450:	e000ed00 	.word	0xe000ed00
    2454:	00007fa9 	.word	0x00007fa9
    2458:	00007fba 	.word	0x00007fba
    245c:	00007fcd 	.word	0x00007fcd
    2460:	00007fe6 	.word	0x00007fe6
    2464:	00007ffb 	.word	0x00007ffb
    2468:	00008016 	.word	0x00008016
    246c:	0000802e 	.word	0x0000802e

00002470 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2470:	b510      	push	{r4, lr}
    2472:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2474:	4b33      	ldr	r3, [pc, #204]	; (2544 <usage_fault.constprop.0+0xd4>)
    2476:	4834      	ldr	r0, [pc, #208]	; (2548 <usage_fault.constprop.0+0xd8>)
    2478:	9305      	str	r3, [sp, #20]
    247a:	2402      	movs	r4, #2
    247c:	aa04      	add	r2, sp, #16
    247e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2482:	9404      	str	r4, [sp, #16]
    2484:	f004 fa7c 	bl	6980 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2488:	4b30      	ldr	r3, [pc, #192]	; (254c <usage_fault.constprop.0+0xdc>)
    248a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    248c:	019b      	lsls	r3, r3, #6
    248e:	d508      	bpl.n	24a2 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    2490:	4b2f      	ldr	r3, [pc, #188]	; (2550 <usage_fault.constprop.0+0xe0>)
    2492:	482d      	ldr	r0, [pc, #180]	; (2548 <usage_fault.constprop.0+0xd8>)
    2494:	aa04      	add	r2, sp, #16
    2496:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    249a:	e9cd 4304 	strd	r4, r3, [sp, #16]
    249e:	f004 fa6f 	bl	6980 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    24a2:	4b2a      	ldr	r3, [pc, #168]	; (254c <usage_fault.constprop.0+0xdc>)
    24a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    24a6:	01dc      	lsls	r4, r3, #7
    24a8:	d509      	bpl.n	24be <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    24aa:	4b2a      	ldr	r3, [pc, #168]	; (2554 <usage_fault.constprop.0+0xe4>)
    24ac:	9305      	str	r3, [sp, #20]
    24ae:	4826      	ldr	r0, [pc, #152]	; (2548 <usage_fault.constprop.0+0xd8>)
    24b0:	2302      	movs	r3, #2
    24b2:	aa04      	add	r2, sp, #16
    24b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    24b8:	9304      	str	r3, [sp, #16]
    24ba:	f004 fa61 	bl	6980 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    24be:	4b23      	ldr	r3, [pc, #140]	; (254c <usage_fault.constprop.0+0xdc>)
    24c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    24c2:	0318      	lsls	r0, r3, #12
    24c4:	d509      	bpl.n	24da <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    24c6:	4b24      	ldr	r3, [pc, #144]	; (2558 <usage_fault.constprop.0+0xe8>)
    24c8:	9305      	str	r3, [sp, #20]
    24ca:	481f      	ldr	r0, [pc, #124]	; (2548 <usage_fault.constprop.0+0xd8>)
    24cc:	2302      	movs	r3, #2
    24ce:	aa04      	add	r2, sp, #16
    24d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    24d4:	9304      	str	r3, [sp, #16]
    24d6:	f004 fa53 	bl	6980 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    24da:	4b1c      	ldr	r3, [pc, #112]	; (254c <usage_fault.constprop.0+0xdc>)
    24dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    24de:	0359      	lsls	r1, r3, #13
    24e0:	d509      	bpl.n	24f6 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    24e2:	4b1e      	ldr	r3, [pc, #120]	; (255c <usage_fault.constprop.0+0xec>)
    24e4:	9305      	str	r3, [sp, #20]
    24e6:	4818      	ldr	r0, [pc, #96]	; (2548 <usage_fault.constprop.0+0xd8>)
    24e8:	2302      	movs	r3, #2
    24ea:	aa04      	add	r2, sp, #16
    24ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    24f0:	9304      	str	r3, [sp, #16]
    24f2:	f004 fa45 	bl	6980 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    24f6:	4b15      	ldr	r3, [pc, #84]	; (254c <usage_fault.constprop.0+0xdc>)
    24f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    24fa:	039a      	lsls	r2, r3, #14
    24fc:	d509      	bpl.n	2512 <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    24fe:	4b18      	ldr	r3, [pc, #96]	; (2560 <usage_fault.constprop.0+0xf0>)
    2500:	9305      	str	r3, [sp, #20]
    2502:	4811      	ldr	r0, [pc, #68]	; (2548 <usage_fault.constprop.0+0xd8>)
    2504:	2302      	movs	r3, #2
    2506:	aa04      	add	r2, sp, #16
    2508:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    250c:	9304      	str	r3, [sp, #16]
    250e:	f004 fa37 	bl	6980 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2512:	4b0e      	ldr	r3, [pc, #56]	; (254c <usage_fault.constprop.0+0xdc>)
    2514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2516:	03db      	lsls	r3, r3, #15
    2518:	d509      	bpl.n	252e <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    251a:	4b12      	ldr	r3, [pc, #72]	; (2564 <usage_fault.constprop.0+0xf4>)
    251c:	9305      	str	r3, [sp, #20]
    251e:	480a      	ldr	r0, [pc, #40]	; (2548 <usage_fault.constprop.0+0xd8>)
    2520:	2302      	movs	r3, #2
    2522:	aa04      	add	r2, sp, #16
    2524:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2528:	9304      	str	r3, [sp, #16]
    252a:	f004 fa29 	bl	6980 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    252e:	4a07      	ldr	r2, [pc, #28]	; (254c <usage_fault.constprop.0+0xdc>)
    2530:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2532:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2536:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    253a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    253c:	6293      	str	r3, [r2, #40]	; 0x28
}
    253e:	b006      	add	sp, #24
    2540:	bd10      	pop	{r4, pc}
    2542:	bf00      	nop
    2544:	0000805d 	.word	0x0000805d
    2548:	000079ec 	.word	0x000079ec
    254c:	e000ed00 	.word	0xe000ed00
    2550:	00008075 	.word	0x00008075
    2554:	00008088 	.word	0x00008088
    2558:	000080a2 	.word	0x000080a2
    255c:	000080c0 	.word	0x000080c0
    2560:	000080e5 	.word	0x000080e5
    2564:	000080ff 	.word	0x000080ff

00002568 <mem_manage_fault>:
{
    2568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    256c:	b086      	sub	sp, #24
    256e:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
    2570:	4b50      	ldr	r3, [pc, #320]	; (26b4 <mem_manage_fault+0x14c>)
    2572:	617b      	str	r3, [r7, #20]
{
    2574:	4606      	mov	r6, r0
    2576:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2578:	484f      	ldr	r0, [pc, #316]	; (26b8 <mem_manage_fault+0x150>)
{
    257a:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    257c:	2502      	movs	r5, #2
    257e:	f107 0210 	add.w	r2, r7, #16
    2582:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2586:	613d      	str	r5, [r7, #16]
    2588:	f004 f9fa 	bl	6980 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    258c:	4b4b      	ldr	r3, [pc, #300]	; (26bc <mem_manage_fault+0x154>)
    258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2590:	06d8      	lsls	r0, r3, #27
    2592:	d509      	bpl.n	25a8 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2594:	4b4a      	ldr	r3, [pc, #296]	; (26c0 <mem_manage_fault+0x158>)
    2596:	4848      	ldr	r0, [pc, #288]	; (26b8 <mem_manage_fault+0x150>)
    2598:	f107 0210 	add.w	r2, r7, #16
    259c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    25a0:	e9c7 5304 	strd	r5, r3, [r7, #16]
    25a4:	f004 f9ec 	bl	6980 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    25a8:	4b44      	ldr	r3, [pc, #272]	; (26bc <mem_manage_fault+0x154>)
    25aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25ac:	0719      	lsls	r1, r3, #28
    25ae:	d50a      	bpl.n	25c6 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    25b0:	4b44      	ldr	r3, [pc, #272]	; (26c4 <mem_manage_fault+0x15c>)
    25b2:	617b      	str	r3, [r7, #20]
    25b4:	4840      	ldr	r0, [pc, #256]	; (26b8 <mem_manage_fault+0x150>)
    25b6:	2302      	movs	r3, #2
    25b8:	f107 0210 	add.w	r2, r7, #16
    25bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    25c0:	613b      	str	r3, [r7, #16]
    25c2:	f004 f9dd 	bl	6980 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    25c6:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 26bc <mem_manage_fault+0x154>
    25ca:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    25ce:	079a      	lsls	r2, r3, #30
    25d0:	d439      	bmi.n	2646 <mem_manage_fault+0xde>
	uint32_t mmfar = -EINVAL;
    25d2:	f06f 0515 	mvn.w	r5, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    25d6:	4b39      	ldr	r3, [pc, #228]	; (26bc <mem_manage_fault+0x154>)
    25d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25da:	07d8      	lsls	r0, r3, #31
    25dc:	d50a      	bpl.n	25f4 <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
    25de:	4b3a      	ldr	r3, [pc, #232]	; (26c8 <mem_manage_fault+0x160>)
    25e0:	617b      	str	r3, [r7, #20]
    25e2:	4835      	ldr	r0, [pc, #212]	; (26b8 <mem_manage_fault+0x150>)
    25e4:	2302      	movs	r3, #2
    25e6:	f107 0210 	add.w	r2, r7, #16
    25ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    25ee:	613b      	str	r3, [r7, #16]
    25f0:	f004 f9c6 	bl	6980 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    25f4:	4b31      	ldr	r3, [pc, #196]	; (26bc <mem_manage_fault+0x154>)
    25f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25f8:	0699      	lsls	r1, r3, #26
    25fa:	d50a      	bpl.n	2612 <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
    25fc:	4b33      	ldr	r3, [pc, #204]	; (26cc <mem_manage_fault+0x164>)
    25fe:	617b      	str	r3, [r7, #20]
    2600:	482d      	ldr	r0, [pc, #180]	; (26b8 <mem_manage_fault+0x150>)
    2602:	2302      	movs	r3, #2
    2604:	f107 0210 	add.w	r2, r7, #16
    2608:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    260c:	613b      	str	r3, [r7, #16]
    260e:	f004 f9b7 	bl	6980 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2612:	4b2a      	ldr	r3, [pc, #168]	; (26bc <mem_manage_fault+0x154>)
    2614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2616:	06d2      	lsls	r2, r2, #27
    2618:	d43f      	bmi.n	269a <mem_manage_fault+0x132>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    261a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    261c:	0790      	lsls	r0, r2, #30
    261e:	d43c      	bmi.n	269a <mem_manage_fault+0x132>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2620:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2622:	4b26      	ldr	r3, [pc, #152]	; (26bc <mem_manage_fault+0x154>)
    2624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2626:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    2628:	bf42      	ittt	mi
    262a:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    262c:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    2630:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2632:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2634:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    2638:	629a      	str	r2, [r3, #40]	; 0x28
}
    263a:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    263c:	2300      	movs	r3, #0
    263e:	7023      	strb	r3, [r4, #0]
}
    2640:	46bd      	mov	sp, r7
    2642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    2646:	4b22      	ldr	r3, [pc, #136]	; (26d0 <mem_manage_fault+0x168>)
    2648:	617b      	str	r3, [r7, #20]
    264a:	481b      	ldr	r0, [pc, #108]	; (26b8 <mem_manage_fault+0x150>)
    264c:	2302      	movs	r3, #2
    264e:	f107 0210 	add.w	r2, r7, #16
    2652:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2656:	613b      	str	r3, [r7, #16]
    2658:	f004 f992 	bl	6980 <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    265c:	f8da 5034 	ldr.w	r5, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2660:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    2664:	061b      	lsls	r3, r3, #24
		PR_FAULT_INFO("  Data Access Violation");
    2666:	46e9      	mov	r9, sp
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2668:	d5b3      	bpl.n	25d2 <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    266a:	b088      	sub	sp, #32
    266c:	4b19      	ldr	r3, [pc, #100]	; (26d4 <mem_manage_fault+0x16c>)
    266e:	4812      	ldr	r0, [pc, #72]	; (26b8 <mem_manage_fault+0x150>)
    2670:	466a      	mov	r2, sp
    2672:	e9c2 3505 	strd	r3, r5, [r2, #20]
    2676:	2303      	movs	r3, #3
    2678:	f842 3f10 	str.w	r3, [r2, #16]!
    267c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2680:	f004 f97e 	bl	6980 <z_log_msg2_static_create.constprop.0>
    2684:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    2686:	f1b8 0f00 	cmp.w	r8, #0
    268a:	d0a4      	beq.n	25d6 <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    268c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    2690:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2694:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    2698:	e79d      	b.n	25d6 <mem_manage_fault+0x6e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    269a:	685b      	ldr	r3, [r3, #4]
    269c:	0519      	lsls	r1, r3, #20
    269e:	d5bf      	bpl.n	2620 <mem_manage_fault+0xb8>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    26a0:	4631      	mov	r1, r6
    26a2:	4628      	mov	r0, r5
    26a4:	f7ff fdf2 	bl	228c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    26a8:	2800      	cmp	r0, #0
    26aa:	d0b9      	beq.n	2620 <mem_manage_fault+0xb8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    26ac:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    26b0:	2002      	movs	r0, #2
    26b2:	e7b6      	b.n	2622 <mem_manage_fault+0xba>
    26b4:	0000812a 	.word	0x0000812a
    26b8:	000079ec 	.word	0x000079ec
    26bc:	e000ed00 	.word	0xe000ed00
    26c0:	00008140 	.word	0x00008140
    26c4:	00007fba 	.word	0x00007fba
    26c8:	000081a1 	.word	0x000081a1
    26cc:	0000802e 	.word	0x0000802e
    26d0:	00008173 	.word	0x00008173
    26d4:	0000818b 	.word	0x0000818b

000026d8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    26d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    26dc:	4b76      	ldr	r3, [pc, #472]	; (28b8 <z_arm_fault+0x1e0>)
{
    26de:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    26e0:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    26e4:	af00      	add	r7, sp, #0
    26e6:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    26e8:	f3c8 0408 	ubfx	r4, r8, #0, #9
    26ec:	2600      	movs	r6, #0
    26ee:	f386 8811 	msr	BASEPRI, r6
    26f2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    26f6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    26fa:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    26fe:	d10e      	bne.n	271e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2700:	f002 030c 	and.w	r3, r2, #12
    2704:	2b08      	cmp	r3, #8
    2706:	d10c      	bne.n	2722 <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2708:	4b6c      	ldr	r3, [pc, #432]	; (28bc <z_arm_fault+0x1e4>)
    270a:	61fb      	str	r3, [r7, #28]
    270c:	486c      	ldr	r0, [pc, #432]	; (28c0 <z_arm_fault+0x1e8>)
    270e:	2302      	movs	r3, #2
    2710:	f107 0218 	add.w	r2, r7, #24
    2714:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2718:	61bb      	str	r3, [r7, #24]
    271a:	f004 f931 	bl	6980 <z_log_msg2_static_create.constprop.0>
		return NULL;
    271e:	4635      	mov	r5, r6
    2720:	e003      	b.n	272a <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2722:	0712      	lsls	r2, r2, #28
    2724:	d401      	bmi.n	272a <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
    2726:	4605      	mov	r5, r0
			*nested_exc = true;
    2728:	2601      	movs	r6, #1
	*recoverable = false;
    272a:	2300      	movs	r3, #0
    272c:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    272e:	1ee3      	subs	r3, r4, #3
    2730:	2b09      	cmp	r3, #9
    2732:	f200 80a1 	bhi.w	2878 <z_arm_fault+0x1a0>
    2736:	e8df f003 	tbb	[pc, r3]
    273a:	9405      	.short	0x9405
    273c:	9f9f9197 	.word	0x9f9f9197
    2740:	9a9f9f9f 	.word	0x9a9f9f9f
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2744:	f8df 8170 	ldr.w	r8, [pc, #368]	; 28b8 <z_arm_fault+0x1e0>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2748:	4b5e      	ldr	r3, [pc, #376]	; (28c4 <z_arm_fault+0x1ec>)
    274a:	485d      	ldr	r0, [pc, #372]	; (28c0 <z_arm_fault+0x1e8>)
    274c:	61fb      	str	r3, [r7, #28]
    274e:	f04f 0a02 	mov.w	sl, #2
    2752:	f107 0218 	add.w	r2, r7, #24
    2756:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    275a:	f8c7 a018 	str.w	sl, [r7, #24]
    275e:	f004 f90f 	bl	6980 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2762:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    2766:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    276a:	ea14 040a 	ands.w	r4, r4, sl
	PR_FAULT_INFO("***** HARD FAULT *****");
    276e:	46e9      	mov	r9, sp
	*recoverable = false;
    2770:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2774:	d00b      	beq.n	278e <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    2776:	4b54      	ldr	r3, [pc, #336]	; (28c8 <z_arm_fault+0x1f0>)
    2778:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    277c:	4850      	ldr	r0, [pc, #320]	; (28c0 <z_arm_fault+0x1e8>)
    277e:	f107 0218 	add.w	r2, r7, #24
    2782:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2786:	f004 f8fb 	bl	6980 <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    278a:	2400      	movs	r4, #0
}
    278c:	e00d      	b.n	27aa <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    278e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    2792:	2b00      	cmp	r3, #0
    2794:	da25      	bge.n	27e2 <z_arm_fault+0x10a>
		PR_EXC("  Debug event");
    2796:	4b4d      	ldr	r3, [pc, #308]	; (28cc <z_arm_fault+0x1f4>)
    2798:	4849      	ldr	r0, [pc, #292]	; (28c0 <z_arm_fault+0x1e8>)
    279a:	f107 0218 	add.w	r2, r7, #24
    279e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    27a2:	e9c7 a306 	strd	sl, r3, [r7, #24]
    27a6:	f004 f8eb 	bl	6980 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    27aa:	79fb      	ldrb	r3, [r7, #7]
    27ac:	b9ab      	cbnz	r3, 27da <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    27ae:	2220      	movs	r2, #32
    27b0:	4629      	mov	r1, r5
    27b2:	f107 0008 	add.w	r0, r7, #8
    27b6:	f004 f900 	bl	69ba <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    27ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    27bc:	2e00      	cmp	r6, #0
    27be:	d076      	beq.n	28ae <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    27c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    27c4:	b922      	cbnz	r2, 27d0 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    27c6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    27ca:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    27ce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    27d0:	f107 0108 	add.w	r1, r7, #8
    27d4:	4620      	mov	r0, r4
    27d6:	f7ff fc2d 	bl	2034 <z_arm_fatal_error>
}
    27da:	372c      	adds	r7, #44	; 0x2c
    27dc:	46bd      	mov	sp, r7
    27de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    27e2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    27e6:	005b      	lsls	r3, r3, #1
    27e8:	d5df      	bpl.n	27aa <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    27ea:	4b39      	ldr	r3, [pc, #228]	; (28d0 <z_arm_fault+0x1f8>)
    27ec:	4834      	ldr	r0, [pc, #208]	; (28c0 <z_arm_fault+0x1e8>)
    27ee:	f107 0218 	add.w	r2, r7, #24
    27f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    27f6:	e9c7 a306 	strd	sl, r3, [r7, #24]
    27fa:	f004 f8c1 	bl	6980 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    27fe:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2800:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2804:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2808:	429a      	cmp	r2, r3
    280a:	d009      	beq.n	2820 <z_arm_fault+0x148>
		} else if (SCB_MMFSR != 0) {
    280c:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    2810:	b1bb      	cbz	r3, 2842 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    2812:	1dfa      	adds	r2, r7, #7
    2814:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2816:	4628      	mov	r0, r5
    2818:	f7ff fea6 	bl	2568 <mem_manage_fault>
    281c:	4604      	mov	r4, r0
		break;
    281e:	e7c4      	b.n	27aa <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2820:	b088      	sub	sp, #32
    2822:	682b      	ldr	r3, [r5, #0]
    2824:	492b      	ldr	r1, [pc, #172]	; (28d4 <z_arm_fault+0x1fc>)
    2826:	4826      	ldr	r0, [pc, #152]	; (28c0 <z_arm_fault+0x1e8>)
    2828:	466a      	mov	r2, sp
    282a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    282e:	2303      	movs	r3, #3
    2830:	f842 3f10 	str.w	r3, [r2, #16]!
    2834:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2838:	f004 f8a2 	bl	6980 <z_log_msg2_static_create.constprop.0>
    283c:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    283e:	682c      	ldr	r4, [r5, #0]
    2840:	e7b3      	b.n	27aa <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    2842:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    2846:	b123      	cbz	r3, 2852 <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    2848:	1df9      	adds	r1, r7, #7
    284a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    284c:	f7ff fd78 	bl	2340 <bus_fault.constprop.0>
    2850:	e7e4      	b.n	281c <z_arm_fault+0x144>
		} else if (SCB_UFSR != 0) {
    2852:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    2856:	b29b      	uxth	r3, r3
    2858:	2b00      	cmp	r3, #0
    285a:	d0a6      	beq.n	27aa <z_arm_fault+0xd2>
		reason = usage_fault(esf);
    285c:	f7ff fe08 	bl	2470 <usage_fault.constprop.0>
    2860:	e7dc      	b.n	281c <z_arm_fault+0x144>
		reason = mem_manage_fault(esf, 0, recoverable);
    2862:	1dfa      	adds	r2, r7, #7
    2864:	2100      	movs	r1, #0
    2866:	e7d6      	b.n	2816 <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
    2868:	1df9      	adds	r1, r7, #7
    286a:	2000      	movs	r0, #0
    286c:	e7ee      	b.n	284c <z_arm_fault+0x174>
	PR_FAULT_INFO(
    286e:	4b1a      	ldr	r3, [pc, #104]	; (28d8 <z_arm_fault+0x200>)
    2870:	61fb      	str	r3, [r7, #28]
    2872:	2302      	movs	r3, #2
    2874:	61bb      	str	r3, [r7, #24]
    2876:	e781      	b.n	277c <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
    2878:	4a18      	ldr	r2, [pc, #96]	; (28dc <z_arm_fault+0x204>)
    287a:	4b19      	ldr	r3, [pc, #100]	; (28e0 <z_arm_fault+0x208>)
    287c:	4919      	ldr	r1, [pc, #100]	; (28e4 <z_arm_fault+0x20c>)
    287e:	4810      	ldr	r0, [pc, #64]	; (28c0 <z_arm_fault+0x1e8>)
    2880:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    2884:	46e8      	mov	r8, sp
    2886:	b08a      	sub	sp, #40	; 0x28
    2888:	bf18      	it	ne
    288a:	4613      	movne	r3, r2
    288c:	466a      	mov	r2, sp
    288e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2892:	2302      	movs	r3, #2
    2894:	f882 3020 	strb.w	r3, [r2, #32]
    2898:	3c10      	subs	r4, #16
    289a:	4b13      	ldr	r3, [pc, #76]	; (28e8 <z_arm_fault+0x210>)
    289c:	61d4      	str	r4, [r2, #28]
    289e:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    28a2:	f842 3f10 	str.w	r3, [r2, #16]!
    28a6:	f004 f86b 	bl	6980 <z_log_msg2_static_create.constprop.0>
    28aa:	46c5      	mov	sp, r8
    28ac:	e76d      	b.n	278a <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    28ae:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    28b2:	f023 0301 	bic.w	r3, r3, #1
    28b6:	e78a      	b.n	27ce <z_arm_fault+0xf6>
    28b8:	e000ed00 	.word	0xe000ed00
    28bc:	000081ee 	.word	0x000081ee
    28c0:	000079ec 	.word	0x000079ec
    28c4:	00008219 	.word	0x00008219
    28c8:	00008230 	.word	0x00008230
    28cc:	00008251 	.word	0x00008251
    28d0:	0000825f 	.word	0x0000825f
    28d4:	0000827e 	.word	0x0000827e
    28d8:	0000829a 	.word	0x0000829a
    28dc:	000081d5 	.word	0x000081d5
    28e0:	000081c0 	.word	0x000081c0
    28e4:	000082be 	.word	0x000082be
    28e8:	01000004 	.word	0x01000004

000028ec <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    28ec:	4a02      	ldr	r2, [pc, #8]	; (28f8 <z_arm_fault_init+0xc>)
    28ee:	6953      	ldr	r3, [r2, #20]
    28f0:	f043 0310 	orr.w	r3, r3, #16
    28f4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    28f6:	4770      	bx	lr
    28f8:	e000ed00 	.word	0xe000ed00

000028fc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    28fc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2900:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2904:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2906:	4672      	mov	r2, lr
	bl z_arm_fault
    2908:	f7ff fee6 	bl	26d8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    290c:	bd01      	pop	{r0, pc}
    290e:	bf00      	nop

00002910 <z_arm_interrupt_init>:
    2910:	4804      	ldr	r0, [pc, #16]	; (2924 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2912:	2300      	movs	r3, #0
    2914:	2120      	movs	r1, #32
    2916:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2918:	3301      	adds	r3, #1
    291a:	2b30      	cmp	r3, #48	; 0x30
    291c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2920:	d1f9      	bne.n	2916 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2922:	4770      	bx	lr
    2924:	e000e100 	.word	0xe000e100

00002928 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2928:	2000      	movs	r0, #0
    msr CONTROL, r0
    292a:	f380 8814 	msr	CONTROL, r0
    isb
    292e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2932:	f004 ff11 	bl	7758 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2936:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2938:	490d      	ldr	r1, [pc, #52]	; (2970 <__start+0x48>)
    str r0, [r1]
    293a:	6008      	str	r0, [r1, #0]
    dsb
    293c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2940:	480c      	ldr	r0, [pc, #48]	; (2974 <__start+0x4c>)
    msr msp, r0
    2942:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2946:	f000 f82b 	bl	29a0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    294a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    294c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2950:	4809      	ldr	r0, [pc, #36]	; (2978 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2952:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2956:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2958:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    295c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2960:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2962:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2964:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2968:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    296c:	f7ff fc02 	bl	2174 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2970:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2974:	20001e80 	.word	0x20001e80
    ldr r0, =z_interrupt_stacks
    2978:	20002000 	.word	0x20002000

0000297c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    297c:	4907      	ldr	r1, [pc, #28]	; (299c <z_arm_clear_arm_mpu_config+0x20>)
    297e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2982:	2300      	movs	r3, #0
	int num_regions =
    2984:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2988:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    298a:	4293      	cmp	r3, r2
    298c:	d100      	bne.n	2990 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    298e:	4770      	bx	lr
  MPU->RNR = rnr;
    2990:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2994:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2998:	3301      	adds	r3, #1
    299a:	e7f6      	b.n	298a <z_arm_clear_arm_mpu_config+0xe>
    299c:	e000ed00 	.word	0xe000ed00

000029a0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    29a0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    29a2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    29a4:	2300      	movs	r3, #0
    29a6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    29aa:	f7ff ffe7 	bl	297c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    29ae:	4b14      	ldr	r3, [pc, #80]	; (2a00 <z_arm_init_arch_hw_at_boot+0x60>)
    29b0:	f04f 32ff 	mov.w	r2, #4294967295
    29b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    29b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    29bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    29c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    29c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    29c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    29cc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    29d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    29d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    29d8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    29dc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    29e0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    29e4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    29e8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    29ec:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    29f0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    29f4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    29f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    29fa:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    29fe:	bd08      	pop	{r3, pc}
    2a00:	e000e100 	.word	0xe000e100

00002a04 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2a04:	4b08      	ldr	r3, [pc, #32]	; (2a28 <z_impl_k_thread_abort+0x24>)
    2a06:	689b      	ldr	r3, [r3, #8]
    2a08:	4283      	cmp	r3, r0
    2a0a:	d10b      	bne.n	2a24 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2a0c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2a10:	b143      	cbz	r3, 2a24 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2a12:	4b06      	ldr	r3, [pc, #24]	; (2a2c <z_impl_k_thread_abort+0x28>)
    2a14:	685a      	ldr	r2, [r3, #4]
    2a16:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2a1a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2a1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2a22:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2a24:	f002 bf06 	b.w	5834 <z_thread_abort>
    2a28:	20001100 	.word	0x20001100
    2a2c:	e000ed00 	.word	0xe000ed00

00002a30 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2a30:	4b02      	ldr	r3, [pc, #8]	; (2a3c <z_arm_configure_static_mpu_regions+0xc>)
    2a32:	4a03      	ldr	r2, [pc, #12]	; (2a40 <z_arm_configure_static_mpu_regions+0x10>)
    2a34:	4803      	ldr	r0, [pc, #12]	; (2a44 <z_arm_configure_static_mpu_regions+0x14>)
    2a36:	2101      	movs	r1, #1
    2a38:	f000 b890 	b.w	2b5c <arm_core_mpu_configure_static_mpu_regions>
    2a3c:	20040000 	.word	0x20040000
    2a40:	20000000 	.word	0x20000000
    2a44:	00007b44 	.word	0x00007b44

00002a48 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2a48:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2a4a:	4b05      	ldr	r3, [pc, #20]	; (2a60 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2a4c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2a4e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2a50:	4a04      	ldr	r2, [pc, #16]	; (2a64 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2a52:	2120      	movs	r1, #32
    2a54:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2a58:	4618      	mov	r0, r3
    2a5a:	2101      	movs	r1, #1
    2a5c:	f000 b888 	b.w	2b70 <arm_core_mpu_configure_dynamic_mpu_regions>
    2a60:	20000fb4 	.word	0x20000fb4
    2a64:	150b0000 	.word	0x150b0000

00002a68 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2a6a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 2b20 <mpu_configure_regions+0xb8>
    2a6e:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2a70:	2500      	movs	r5, #0
    2a72:	428d      	cmp	r5, r1
    2a74:	da1a      	bge.n	2aac <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
    2a76:	6844      	ldr	r4, [r0, #4]
    2a78:	2c00      	cmp	r4, #0
    2a7a:	d04d      	beq.n	2b18 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2a7c:	b1fb      	cbz	r3, 2abe <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2a7e:	f104 3eff 	add.w	lr, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2a82:	ea14 0f0e 	tst.w	r4, lr
    2a86:	d014      	beq.n	2ab2 <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2a88:	4b26      	ldr	r3, [pc, #152]	; (2b24 <mpu_configure_regions+0xbc>)
    2a8a:	466c      	mov	r4, sp
    2a8c:	b088      	sub	sp, #32
    2a8e:	466a      	mov	r2, sp
    2a90:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2a94:	2303      	movs	r3, #3
    2a96:	f842 3f10 	str.w	r3, [r2, #16]!
    2a9a:	4823      	ldr	r0, [pc, #140]	; (2b28 <mpu_configure_regions+0xc0>)
    2a9c:	2300      	movs	r3, #0
    2a9e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2aa2:	f003 ff15 	bl	68d0 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2aa6:	f06f 0215 	mvn.w	r2, #21
    2aaa:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2aac:	4610      	mov	r0, r2
    2aae:	46bd      	mov	sp, r7
    2ab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    2ab2:	2c1f      	cmp	r4, #31
    2ab4:	d9e8      	bls.n	2a88 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
    2ab6:	6806      	ldr	r6, [r0, #0]
		&&
    2ab8:	ea1e 0f06 	tst.w	lr, r6
    2abc:	d1e4      	bne.n	2a88 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2abe:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2ac0:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2ac2:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2ac6:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    2ac8:	d914      	bls.n	2af4 <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
    2aca:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2ace:	d813      	bhi.n	2af8 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2ad0:	3c01      	subs	r4, #1
    2ad2:	fab4 f484 	clz	r4, r4
    2ad6:	f1c4 041f 	rsb	r4, r4, #31
    2ada:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2adc:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2ade:	ea4e 0404 	orr.w	r4, lr, r4
    2ae2:	d90b      	bls.n	2afc <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2ae4:	4911      	ldr	r1, [pc, #68]	; (2b2c <mpu_configure_regions+0xc4>)
    2ae6:	466c      	mov	r4, sp
    2ae8:	b088      	sub	sp, #32
    2aea:	466b      	mov	r3, sp
    2aec:	e9c3 1205 	strd	r1, r2, [r3, #20]
    2af0:	461a      	mov	r2, r3
    2af2:	e7cf      	b.n	2a94 <mpu_configure_regions+0x2c>
		return REGION_32B;
    2af4:	2408      	movs	r4, #8
    2af6:	e7f1      	b.n	2adc <mpu_configure_regions+0x74>
		return REGION_4G;
    2af8:	243e      	movs	r4, #62	; 0x3e
    2afa:	e7ef      	b.n	2adc <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2afc:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    2b00:	4316      	orrs	r6, r2
    2b02:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2b06:	f044 0401 	orr.w	r4, r4, #1
    2b0a:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2b0e:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
    2b12:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2b14:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    2b18:	3501      	adds	r5, #1
    2b1a:	300c      	adds	r0, #12
    2b1c:	e7a9      	b.n	2a72 <mpu_configure_regions+0xa>
    2b1e:	bf00      	nop
    2b20:	e000ed00 	.word	0xe000ed00
    2b24:	000082d5 	.word	0x000082d5
    2b28:	000079e4 	.word	0x000079e4
    2b2c:	000082f8 	.word	0x000082f8

00002b30 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2b30:	4b04      	ldr	r3, [pc, #16]	; (2b44 <arm_core_mpu_enable+0x14>)
    2b32:	2205      	movs	r2, #5
    2b34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2b38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b3c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2b40:	4770      	bx	lr
    2b42:	bf00      	nop
    2b44:	e000ed00 	.word	0xe000ed00

00002b48 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2b48:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2b4c:	4b02      	ldr	r3, [pc, #8]	; (2b58 <arm_core_mpu_disable+0x10>)
    2b4e:	2200      	movs	r2, #0
    2b50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2b54:	4770      	bx	lr
    2b56:	bf00      	nop
    2b58:	e000ed00 	.word	0xe000ed00

00002b5c <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2b5c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2b5e:	4c03      	ldr	r4, [pc, #12]	; (2b6c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2b60:	2301      	movs	r3, #1
    2b62:	7822      	ldrb	r2, [r4, #0]
    2b64:	f7ff ff80 	bl	2a68 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2b68:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2b6a:	bd10      	pop	{r4, pc}
    2b6c:	2000133b 	.word	0x2000133b

00002b70 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2b70:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2b72:	4a09      	ldr	r2, [pc, #36]	; (2b98 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2b74:	2300      	movs	r3, #0
    2b76:	7812      	ldrb	r2, [r2, #0]
    2b78:	f7ff ff76 	bl	2a68 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2b7c:	f110 0f16 	cmn.w	r0, #22
    2b80:	d003      	beq.n	2b8a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    2b82:	4b06      	ldr	r3, [pc, #24]	; (2b9c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    2b84:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2b86:	2807      	cmp	r0, #7
    2b88:	dd00      	ble.n	2b8c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2b8a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2b8c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    2b90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    2b94:	3001      	adds	r0, #1
    2b96:	e7f6      	b.n	2b86 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    2b98:	2000133b 	.word	0x2000133b
    2b9c:	e000ed00 	.word	0xe000ed00

00002ba0 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2ba0:	4914      	ldr	r1, [pc, #80]	; (2bf4 <z_arm_mpu_init+0x54>)
    2ba2:	6808      	ldr	r0, [r1, #0]
    2ba4:	2808      	cmp	r0, #8
{
    2ba6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2ba8:	d821      	bhi.n	2bee <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2baa:	f7ff ffcd 	bl	2b48 <arm_core_mpu_disable>
    2bae:	4c12      	ldr	r4, [pc, #72]	; (2bf8 <z_arm_mpu_init+0x58>)
    2bb0:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2bb2:	2200      	movs	r2, #0
    2bb4:	4290      	cmp	r0, r2
    2bb6:	f101 010c 	add.w	r1, r1, #12
    2bba:	d105      	bne.n	2bc8 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2bbc:	4b0f      	ldr	r3, [pc, #60]	; (2bfc <z_arm_mpu_init+0x5c>)
    2bbe:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2bc0:	f7ff ffb6 	bl	2b30 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2bc4:	2000      	movs	r0, #0
}
    2bc6:	bd10      	pop	{r4, pc}
    2bc8:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2bcc:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2bd0:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2bd4:	4313      	orrs	r3, r2
    2bd6:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2bda:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2be2:	f043 0301 	orr.w	r3, r3, #1
    2be6:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2bea:	3201      	adds	r2, #1
    2bec:	e7e2      	b.n	2bb4 <z_arm_mpu_init+0x14>
		return -1;
    2bee:	f04f 30ff 	mov.w	r0, #4294967295
    2bf2:	e7e8      	b.n	2bc6 <z_arm_mpu_init+0x26>
    2bf4:	00007b50 	.word	0x00007b50
    2bf8:	e000ed00 	.word	0xe000ed00
    2bfc:	2000133b 	.word	0x2000133b

00002c00 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2c00:	4b01      	ldr	r3, [pc, #4]	; (2c08 <__stdout_hook_install+0x8>)
    2c02:	6018      	str	r0, [r3, #0]
}
    2c04:	4770      	bx	lr
    2c06:	bf00      	nop
    2c08:	20000030 	.word	0x20000030

00002c0c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    2c0c:	b510      	push	{r4, lr}
	__asm__ volatile(
    2c0e:	f04f 0320 	mov.w	r3, #32
    2c12:	f3ef 8011 	mrs	r0, BASEPRI
    2c16:	f383 8812 	msr	BASEPRI_MAX, r3
    2c1a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2c1e:	4a11      	ldr	r2, [pc, #68]	; (2c64 <nordicsemi_nrf52_init+0x58>)
    2c20:	2301      	movs	r3, #1
    2c22:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2c26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2c2a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    2c2e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    2c32:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    2c36:	2c08      	cmp	r4, #8
    2c38:	d108      	bne.n	2c4c <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2c3a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    2c3e:	2905      	cmp	r1, #5
    2c40:	d804      	bhi.n	2c4c <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    2c42:	4c09      	ldr	r4, [pc, #36]	; (2c68 <nordicsemi_nrf52_init+0x5c>)
    2c44:	5c61      	ldrb	r1, [r4, r1]
    2c46:	b109      	cbz	r1, 2c4c <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    2c48:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    2c4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c50:	2201      	movs	r2, #1
    2c52:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    2c56:	f380 8811 	msr	BASEPRI, r0
    2c5a:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2c5e:	2000      	movs	r0, #0
    2c60:	bd10      	pop	{r4, pc}
    2c62:	bf00      	nop
    2c64:	4001e000 	.word	0x4001e000
    2c68:	00008331 	.word	0x00008331

00002c6c <sys_arch_reboot>:
    *p_gpregret = val;
    2c6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c70:	b2c0      	uxtb	r0, r0
    2c72:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2c76:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2c7a:	4905      	ldr	r1, [pc, #20]	; (2c90 <sys_arch_reboot+0x24>)
    2c7c:	4b05      	ldr	r3, [pc, #20]	; (2c94 <sys_arch_reboot+0x28>)
    2c7e:	68ca      	ldr	r2, [r1, #12]
    2c80:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2c84:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2c86:	60cb      	str	r3, [r1, #12]
    2c88:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2c8c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2c8e:	e7fd      	b.n	2c8c <sys_arch_reboot+0x20>
    2c90:	e000ed00 	.word	0xe000ed00
    2c94:	05fa0004 	.word	0x05fa0004

00002c98 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2c98:	b120      	cbz	r0, 2ca4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2c9a:	4b03      	ldr	r3, [pc, #12]	; (2ca8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2c9c:	0180      	lsls	r0, r0, #6
    2c9e:	f043 0301 	orr.w	r3, r3, #1
    2ca2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2ca4:	4770      	bx	lr
    2ca6:	bf00      	nop
    2ca8:	00007a50 	.word	0x00007a50

00002cac <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2cac:	4b08      	ldr	r3, [pc, #32]	; (2cd0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2cae:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2cb0:	1ac3      	subs	r3, r0, r3
{
    2cb2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2cb4:	4907      	ldr	r1, [pc, #28]	; (2cd4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    2cb6:	109b      	asrs	r3, r3, #2
{
    2cb8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2cba:	4359      	muls	r1, r3
    2cbc:	4806      	ldr	r0, [pc, #24]	; (2cd8 <onoff_stop+0x2c>)
    2cbe:	2240      	movs	r2, #64	; 0x40
    2cc0:	f003 fec0 	bl	6a44 <stop>
	notify(mgr, res);
    2cc4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2cc6:	4601      	mov	r1, r0
	notify(mgr, res);
    2cc8:	4620      	mov	r0, r4
}
    2cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2cce:	4718      	bx	r3
    2cd0:	20000fd0 	.word	0x20000fd0
    2cd4:	b6db6db7 	.word	0xb6db6db7
    2cd8:	000077cc 	.word	0x000077cc

00002cdc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2cde:	4c0c      	ldr	r4, [pc, #48]	; (2d10 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2ce0:	4a0c      	ldr	r2, [pc, #48]	; (2d14 <onoff_start+0x38>)
    2ce2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2ce4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2ce6:	9300      	str	r3, [sp, #0]
{
    2ce8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2cea:	460b      	mov	r3, r1
    2cec:	490a      	ldr	r1, [pc, #40]	; (2d18 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    2cee:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2cf0:	4361      	muls	r1, r4
{
    2cf2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2cf4:	4809      	ldr	r0, [pc, #36]	; (2d1c <onoff_start+0x40>)
    2cf6:	f003 fed2 	bl	6a9e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2cfa:	1e01      	subs	r1, r0, #0
    2cfc:	da05      	bge.n	2d0a <onoff_start+0x2e>
		notify(mgr, err);
    2cfe:	4630      	mov	r0, r6
    2d00:	462b      	mov	r3, r5
	}
}
    2d02:	b002      	add	sp, #8
    2d04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2d08:	4718      	bx	r3
}
    2d0a:	b002      	add	sp, #8
    2d0c:	bd70      	pop	{r4, r5, r6, pc}
    2d0e:	bf00      	nop
    2d10:	20000fd0 	.word	0x20000fd0
    2d14:	00006b0d 	.word	0x00006b0d
    2d18:	b6db6db7 	.word	0xb6db6db7
    2d1c:	000077cc 	.word	0x000077cc

00002d20 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2d20:	2200      	movs	r2, #0
{
    2d22:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2d24:	2101      	movs	r1, #1
{
    2d26:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2d28:	4610      	mov	r0, r2
    2d2a:	f7ff fa07 	bl	213c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2d2e:	480f      	ldr	r0, [pc, #60]	; (2d6c <clk_init+0x4c>)
    2d30:	f001 fac8 	bl	42c4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2d34:	4b0e      	ldr	r3, [pc, #56]	; (2d70 <clk_init+0x50>)
    2d36:	4298      	cmp	r0, r3
    2d38:	d115      	bne.n	2d66 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2d3a:	f004 faaa 	bl	7292 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2d3e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2d40:	490c      	ldr	r1, [pc, #48]	; (2d74 <clk_init+0x54>)
    2d42:	4630      	mov	r0, r6
    2d44:	f003 fa8f 	bl	6266 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2d48:	2800      	cmp	r0, #0
    2d4a:	db0b      	blt.n	2d64 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    2d4c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2d4e:	4909      	ldr	r1, [pc, #36]	; (2d74 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2d50:	2501      	movs	r5, #1
    2d52:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2d54:	f104 001c 	add.w	r0, r4, #28
    2d58:	f003 fa85 	bl	6266 <onoff_manager_init>
		if (err < 0) {
    2d5c:	2800      	cmp	r0, #0
    2d5e:	db01      	blt.n	2d64 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2d60:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2d62:	2000      	movs	r0, #0
}
    2d64:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2d66:	f06f 0004 	mvn.w	r0, #4
    2d6a:	e7fb      	b.n	2d64 <clk_init+0x44>
    2d6c:	00002dad 	.word	0x00002dad
    2d70:	0bad0000 	.word	0x0bad0000
    2d74:	00007ba0 	.word	0x00007ba0

00002d78 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2d78:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2d7a:	230c      	movs	r3, #12
    2d7c:	4809      	ldr	r0, [pc, #36]	; (2da4 <clkstarted_handle.constprop.0+0x2c>)
    2d7e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2d80:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2d82:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2d84:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2d88:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2d8a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2d8c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2d8e:	4418      	add	r0, r3
    2d90:	f003 fe45 	bl	6a1e <set_on_state>
	if (callback) {
    2d94:	b12d      	cbz	r5, 2da2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2d96:	4632      	mov	r2, r6
    2d98:	462b      	mov	r3, r5
    2d9a:	4803      	ldr	r0, [pc, #12]	; (2da8 <clkstarted_handle.constprop.0+0x30>)
}
    2d9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2da0:	4718      	bx	r3
}
    2da2:	bd70      	pop	{r4, r5, r6, pc}
    2da4:	20000fd0 	.word	0x20000fd0
    2da8:	000077cc 	.word	0x000077cc

00002dac <clock_event_handler>:
	switch (event) {
    2dac:	b110      	cbz	r0, 2db4 <clock_event_handler+0x8>
    2dae:	2801      	cmp	r0, #1
    2db0:	d004      	beq.n	2dbc <clock_event_handler+0x10>
    2db2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2db4:	4b03      	ldr	r3, [pc, #12]	; (2dc4 <clock_event_handler+0x18>)
    2db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2db8:	075b      	lsls	r3, r3, #29
    2dba:	d101      	bne.n	2dc0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2dbc:	f7ff bfdc 	b.w	2d78 <clkstarted_handle.constprop.0>
}
    2dc0:	4770      	bx	lr
    2dc2:	bf00      	nop
    2dc4:	20000fd0 	.word	0x20000fd0

00002dc8 <generic_hfclk_start>:
{
    2dc8:	b508      	push	{r3, lr}
	__asm__ volatile(
    2dca:	f04f 0320 	mov.w	r3, #32
    2dce:	f3ef 8111 	mrs	r1, BASEPRI
    2dd2:	f383 8812 	msr	BASEPRI_MAX, r3
    2dd6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2dda:	4a12      	ldr	r2, [pc, #72]	; (2e24 <generic_hfclk_start+0x5c>)
    2ddc:	6813      	ldr	r3, [r2, #0]
    2dde:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2de2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2de6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2de8:	d00c      	beq.n	2e04 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2dea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2dee:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2df2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2df6:	f013 0301 	ands.w	r3, r3, #1
    2dfa:	d003      	beq.n	2e04 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2dfc:	480a      	ldr	r0, [pc, #40]	; (2e28 <generic_hfclk_start+0x60>)
    2dfe:	f003 fe0e 	bl	6a1e <set_on_state>
			already_started = true;
    2e02:	2301      	movs	r3, #1
	__asm__ volatile(
    2e04:	f381 8811 	msr	BASEPRI, r1
    2e08:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2e0c:	b123      	cbz	r3, 2e18 <generic_hfclk_start+0x50>
}
    2e0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2e12:	2000      	movs	r0, #0
    2e14:	f7ff bfb0 	b.w	2d78 <clkstarted_handle.constprop.0>
}
    2e18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2e1c:	2001      	movs	r0, #1
    2e1e:	f004 ba45 	b.w	72ac <nrfx_clock_start>
    2e22:	bf00      	nop
    2e24:	20001020 	.word	0x20001020
    2e28:	20001010 	.word	0x20001010

00002e2c <api_blocking_start>:
{
    2e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2e2e:	2200      	movs	r2, #0
    2e30:	2301      	movs	r3, #1
    2e32:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2e36:	4a09      	ldr	r2, [pc, #36]	; (2e5c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2e38:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2e3c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2e3e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2e42:	f003 fe5c 	bl	6afe <api_start>
	if (err < 0) {
    2e46:	2800      	cmp	r0, #0
    2e48:	db05      	blt.n	2e56 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    2e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2e4e:	2300      	movs	r3, #0
    2e50:	4668      	mov	r0, sp
    2e52:	f002 f9cf 	bl	51f4 <z_impl_k_sem_take>
}
    2e56:	b005      	add	sp, #20
    2e58:	f85d fb04 	ldr.w	pc, [sp], #4
    2e5c:	00006b2b 	.word	0x00006b2b

00002e60 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2e60:	4b09      	ldr	r3, [pc, #36]	; (2e88 <generic_hfclk_stop+0x28>)
    2e62:	f3bf 8f5b 	dmb	ish
    2e66:	e853 2f00 	ldrex	r2, [r3]
    2e6a:	f022 0102 	bic.w	r1, r2, #2
    2e6e:	e843 1000 	strex	r0, r1, [r3]
    2e72:	2800      	cmp	r0, #0
    2e74:	d1f7      	bne.n	2e66 <generic_hfclk_stop+0x6>
    2e76:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    2e7a:	07d3      	lsls	r3, r2, #31
    2e7c:	d402      	bmi.n	2e84 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    2e7e:	2001      	movs	r0, #1
    2e80:	f004 ba51 	b.w	7326 <nrfx_clock_stop>
}
    2e84:	4770      	bx	lr
    2e86:	bf00      	nop
    2e88:	20001020 	.word	0x20001020

00002e8c <z_nrf_clock_control_lf_on>:
{
    2e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2e90:	4939      	ldr	r1, [pc, #228]	; (2f78 <z_nrf_clock_control_lf_on+0xec>)
    2e92:	f3bf 8f5b 	dmb	ish
    2e96:	4607      	mov	r7, r0
    2e98:	2201      	movs	r2, #1
    2e9a:	e851 3f00 	ldrex	r3, [r1]
    2e9e:	e841 2000 	strex	r0, r2, [r1]
    2ea2:	2800      	cmp	r0, #0
    2ea4:	d1f9      	bne.n	2e9a <z_nrf_clock_control_lf_on+0xe>
    2ea6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2eaa:	b933      	cbnz	r3, 2eba <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2eac:	4933      	ldr	r1, [pc, #204]	; (2f7c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    2eae:	4834      	ldr	r0, [pc, #208]	; (2f80 <z_nrf_clock_control_lf_on+0xf4>)
    2eb0:	604b      	str	r3, [r1, #4]
    2eb2:	60cb      	str	r3, [r1, #12]
    2eb4:	608a      	str	r2, [r1, #8]
    2eb6:	f003 f9e9 	bl	628c <onoff_request>
	switch (start_mode) {
    2eba:	1e7b      	subs	r3, r7, #1
    2ebc:	2b01      	cmp	r3, #1
    2ebe:	d82f      	bhi.n	2f20 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2ec0:	2f01      	cmp	r7, #1
    2ec2:	d107      	bne.n	2ed4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    2ec4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ec8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2ecc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2ed0:	2b01      	cmp	r3, #1
    2ed2:	d025      	beq.n	2f20 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2ed4:	f004 fad9 	bl	748a <k_is_in_isr>
    2ed8:	4604      	mov	r4, r0
    2eda:	b918      	cbnz	r0, 2ee4 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    2edc:	4b29      	ldr	r3, [pc, #164]	; (2f84 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    2ede:	781b      	ldrb	r3, [r3, #0]
    2ee0:	2b00      	cmp	r3, #0
    2ee2:	d141      	bne.n	2f68 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    2ee4:	f04f 0320 	mov.w	r3, #32
    2ee8:	f3ef 8611 	mrs	r6, BASEPRI
    2eec:	f383 8812 	msr	BASEPRI_MAX, r3
    2ef0:	f3bf 8f6f 	isb	sy
    2ef4:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ef6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2f88 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2efa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2efe:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2f02:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    2f06:	03d2      	lsls	r2, r2, #15
    2f08:	d50c      	bpl.n	2f24 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2f0a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2f0e:	2b01      	cmp	r3, #1
    2f10:	d001      	beq.n	2f16 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    2f12:	2f01      	cmp	r7, #1
    2f14:	d106      	bne.n	2f24 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    2f16:	b30c      	cbz	r4, 2f5c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    2f18:	f386 8811 	msr	BASEPRI, r6
    2f1c:	f3bf 8f6f 	isb	sy
}
    2f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    2f24:	b1ac      	cbz	r4, 2f52 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    2f26:	4630      	mov	r0, r6
    2f28:	f7ff f87a 	bl	2020 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2f2c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2f30:	2b00      	cmp	r3, #0
    2f32:	d1e4      	bne.n	2efe <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2f34:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    2f38:	2a00      	cmp	r2, #0
    2f3a:	d0e0      	beq.n	2efe <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f3c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    2f40:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    2f44:	2301      	movs	r3, #1
    2f46:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    2f4a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f4e:	60ab      	str	r3, [r5, #8]
}
    2f50:	e7d5      	b.n	2efe <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    2f52:	2100      	movs	r1, #0
    2f54:	2021      	movs	r0, #33	; 0x21
    2f56:	f002 fc4d 	bl	57f4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    2f5a:	e7e7      	b.n	2f2c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    2f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f60:	2202      	movs	r2, #2
    2f62:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    2f66:	e7db      	b.n	2f20 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    2f68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2f6c:	2202      	movs	r2, #2
    2f6e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    2f72:	4606      	mov	r6, r0
}
    2f74:	e7bf      	b.n	2ef6 <z_nrf_clock_control_lf_on+0x6a>
    2f76:	bf00      	nop
    2f78:	20001024 	.word	0x20001024
    2f7c:	20000fc0 	.word	0x20000fc0
    2f80:	20000fec 	.word	0x20000fec
    2f84:	2000174c 	.word	0x2000174c
    2f88:	e000e100 	.word	0xe000e100

00002f8c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    2f8c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2f8e:	4b08      	ldr	r3, [pc, #32]	; (2fb0 <uart_console_init+0x24>)
    2f90:	4808      	ldr	r0, [pc, #32]	; (2fb4 <uart_console_init+0x28>)
    2f92:	6018      	str	r0, [r3, #0]
    2f94:	f004 fa27 	bl	73e6 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2f98:	b138      	cbz	r0, 2faa <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2f9a:	4807      	ldr	r0, [pc, #28]	; (2fb8 <uart_console_init+0x2c>)
    2f9c:	f7ff fe30 	bl	2c00 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2fa0:	4805      	ldr	r0, [pc, #20]	; (2fb8 <uart_console_init+0x2c>)
    2fa2:	f7fd fc6f 	bl	884 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    2fa6:	2000      	movs	r0, #0
}
    2fa8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2faa:	f06f 0012 	mvn.w	r0, #18
    2fae:	e7fb      	b.n	2fa8 <uart_console_init+0x1c>
    2fb0:	20001028 	.word	0x20001028
    2fb4:	0000782c 	.word	0x0000782c
    2fb8:	00002fbd 	.word	0x00002fbd

00002fbc <console_out>:
	if ('\n' == c) {
    2fbc:	280a      	cmp	r0, #10
{
    2fbe:	b538      	push	{r3, r4, r5, lr}
    2fc0:	4d07      	ldr	r5, [pc, #28]	; (2fe0 <console_out+0x24>)
    2fc2:	4604      	mov	r4, r0
	if ('\n' == c) {
    2fc4:	d104      	bne.n	2fd0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    2fc6:	6828      	ldr	r0, [r5, #0]
    2fc8:	6883      	ldr	r3, [r0, #8]
    2fca:	210d      	movs	r1, #13
    2fcc:	69db      	ldr	r3, [r3, #28]
    2fce:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2fd0:	6828      	ldr	r0, [r5, #0]
    2fd2:	6883      	ldr	r3, [r0, #8]
    2fd4:	b2e1      	uxtb	r1, r4
    2fd6:	69db      	ldr	r3, [r3, #28]
    2fd8:	4798      	blx	r3
}
    2fda:	4620      	mov	r0, r4
    2fdc:	bd38      	pop	{r3, r4, r5, pc}
    2fde:	bf00      	nop
    2fe0:	20001028 	.word	0x20001028

00002fe4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    2fe4:	b530      	push	{r4, r5, lr}
	return port->config;
    2fe6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2fe8:	7b04      	ldrb	r4, [r0, #12]
    2fea:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2fee:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2ff2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    2ff6:	b085      	sub	sp, #20
    2ff8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    2ffc:	d104      	bne.n	3008 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    2ffe:	4628      	mov	r0, r5
    3000:	f001 fbe2 	bl	47c8 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    3004:	2000      	movs	r0, #0
    3006:	e032      	b.n	306e <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3008:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    300c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3010:	d12f      	bne.n	3072 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3016:	bf0c      	ite	eq
    3018:	2304      	moveq	r3, #4
    301a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    301c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3020:	6883      	ldr	r3, [r0, #8]
    3022:	fa23 f101 	lsr.w	r1, r3, r1
    3026:	07c9      	lsls	r1, r1, #31
    3028:	d42f      	bmi.n	308a <gpio_nrfx_pin_interrupt_configure+0xa6>
    302a:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    302e:	d12c      	bne.n	308a <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    3030:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
    3032:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
    3034:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
    3038:	4a1c      	ldr	r2, [pc, #112]	; (30ac <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    303a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
    303e:	bf18      	it	ne
    3040:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3048:	07db      	lsls	r3, r3, #31
    304a:	d41e      	bmi.n	308a <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    304c:	f10d 0407 	add.w	r4, sp, #7
    3050:	4621      	mov	r1, r4
    3052:	4628      	mov	r0, r5
    3054:	f001 fb1c 	bl	4690 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3058:	4b15      	ldr	r3, [pc, #84]	; (30b0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
    305a:	4298      	cmp	r0, r3
    305c:	d114      	bne.n	3088 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
    305e:	4620      	mov	r0, r4
    3060:	f001 fb64 	bl	472c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3064:	4b13      	ldr	r3, [pc, #76]	; (30b4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    3066:	4298      	cmp	r0, r3
    3068:	d00e      	beq.n	3088 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
    306a:	f06f 000b 	mvn.w	r0, #11
}
    306e:	b005      	add	sp, #20
    3070:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3072:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    3076:	d005      	beq.n	3084 <gpio_nrfx_pin_interrupt_configure+0xa0>
    3078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    307c:	bf0c      	ite	eq
    307e:	2302      	moveq	r3, #2
    3080:	2301      	movne	r3, #1
    3082:	e7cb      	b.n	301c <gpio_nrfx_pin_interrupt_configure+0x38>
    3084:	2303      	movs	r3, #3
    3086:	e7c9      	b.n	301c <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    3088:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    308a:	2300      	movs	r3, #0
    308c:	4619      	mov	r1, r3
    308e:	aa02      	add	r2, sp, #8
    3090:	4628      	mov	r0, r5
    3092:	f001 f9d7 	bl	4444 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3096:	4b07      	ldr	r3, [pc, #28]	; (30b4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
    3098:	4298      	cmp	r0, r3
    309a:	d104      	bne.n	30a6 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    309c:	2101      	movs	r1, #1
    309e:	4628      	mov	r0, r5
    30a0:	f001 fb4a 	bl	4738 <nrfx_gpiote_trigger_enable>
    30a4:	e7ae      	b.n	3004 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    30a6:	f06f 0004 	mvn.w	r0, #4
    30aa:	e7e0      	b.n	306e <gpio_nrfx_pin_interrupt_configure+0x8a>
    30ac:	50000300 	.word	0x50000300
    30b0:	0bad0004 	.word	0x0bad0004
    30b4:	0bad0000 	.word	0x0bad0000

000030b8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    30b8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    30ba:	f001 fb27 	bl	470c <nrfx_gpiote_is_init>
    30be:	4604      	mov	r4, r0
    30c0:	b968      	cbnz	r0, 30de <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    30c2:	f001 fafb 	bl	46bc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    30c6:	4b08      	ldr	r3, [pc, #32]	; (30e8 <gpio_nrfx_init+0x30>)
    30c8:	4298      	cmp	r0, r3
    30ca:	d10a      	bne.n	30e2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    30cc:	4807      	ldr	r0, [pc, #28]	; (30ec <gpio_nrfx_init+0x34>)
    30ce:	4621      	mov	r1, r4
    30d0:	f001 fad8 	bl	4684 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    30d4:	4622      	mov	r2, r4
    30d6:	2105      	movs	r1, #5
    30d8:	2006      	movs	r0, #6
    30da:	f7ff f82f 	bl	213c <z_arm_irq_priority_set>
		return 0;
    30de:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    30e0:	bd10      	pop	{r4, pc}
		return -EIO;
    30e2:	f06f 0004 	mvn.w	r0, #4
    30e6:	e7fb      	b.n	30e0 <gpio_nrfx_init+0x28>
    30e8:	0bad0000 	.word	0x0bad0000
    30ec:	000030f1 	.word	0x000030f1

000030f0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    30f0:	0942      	lsrs	r2, r0, #5
{
    30f2:	b570      	push	{r4, r5, r6, lr}
    30f4:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    30f6:	d002      	beq.n	30fe <nrfx_gpio_handler+0xe>
    30f8:	2a01      	cmp	r2, #1
    30fa:	d015      	beq.n	3128 <nrfx_gpio_handler+0x38>
}
    30fc:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    30fe:	4e0b      	ldr	r6, [pc, #44]	; (312c <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
    3100:	6932      	ldr	r2, [r6, #16]
    3102:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3104:	2900      	cmp	r1, #0
    3106:	d0f9      	beq.n	30fc <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
    3108:	f003 031f 	and.w	r3, r3, #31
    310c:	2501      	movs	r5, #1
    310e:	680c      	ldr	r4, [r1, #0]
    3110:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
    3112:	688a      	ldr	r2, [r1, #8]
    3114:	402a      	ands	r2, r5
    3116:	d002      	beq.n	311e <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3118:	684b      	ldr	r3, [r1, #4]
    311a:	4630      	mov	r0, r6
    311c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    311e:	2c00      	cmp	r4, #0
    3120:	d0ec      	beq.n	30fc <nrfx_gpio_handler+0xc>
    3122:	4621      	mov	r1, r4
    3124:	6824      	ldr	r4, [r4, #0]
    3126:	e7f4      	b.n	3112 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3128:	4e01      	ldr	r6, [pc, #4]	; (3130 <nrfx_gpio_handler+0x40>)
    312a:	e7e9      	b.n	3100 <nrfx_gpio_handler+0x10>
    312c:	000077e4 	.word	0x000077e4
    3130:	000077fc 	.word	0x000077fc

00003134 <gpio_nrfx_pin_configure>:
{
    3134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    3138:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    313a:	7b3b      	ldrb	r3, [r7, #12]
    313c:	f001 051f 	and.w	r5, r1, #31
{
    3140:	b085      	sub	sp, #20
    3142:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3144:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3148:	4614      	mov	r4, r2
    314a:	b9ca      	cbnz	r2, 3180 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    314c:	a902      	add	r1, sp, #8
    314e:	4628      	mov	r0, r5
    3150:	f001 fa9e 	bl	4690 <nrfx_gpiote_channel_get>
    3154:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    3156:	4628      	mov	r0, r5
    3158:	f001 fb5e 	bl	4818 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    315c:	4b4a      	ldr	r3, [pc, #296]	; (3288 <gpio_nrfx_pin_configure+0x154>)
    315e:	4298      	cmp	r0, r3
    3160:	d004      	beq.n	316c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    3162:	f06f 0004 	mvn.w	r0, #4
}
    3166:	b005      	add	sp, #20
    3168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    316c:	4284      	cmp	r4, r0
    316e:	d105      	bne.n	317c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3170:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3174:	f001 fad4 	bl	4720 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3178:	42a0      	cmp	r0, r4
    317a:	d1f2      	bne.n	3162 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    317c:	2000      	movs	r0, #0
    317e:	e7f2      	b.n	3166 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3180:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    3184:	f10d 0103 	add.w	r1, sp, #3
    3188:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    318a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    318e:	f001 fa7f 	bl	4690 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3192:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    3194:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3196:	aa02      	add	r2, sp, #8
    3198:	4649      	mov	r1, r9
    319a:	4628      	mov	r0, r5
    319c:	f001 f952 	bl	4444 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    31a0:	4b39      	ldr	r3, [pc, #228]	; (3288 <gpio_nrfx_pin_configure+0x154>)
    31a2:	4298      	cmp	r0, r3
    31a4:	d002      	beq.n	31ac <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    31a6:	f06f 0015 	mvn.w	r0, #21
    31aa:	e7dc      	b.n	3166 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    31ac:	4580      	cmp	r8, r0
    31ae:	d103      	bne.n	31b8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    31b0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    31b4:	f001 fab4 	bl	4720 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    31b8:	03a3      	lsls	r3, r4, #14
    31ba:	d551      	bpl.n	3260 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    31bc:	f240 6306 	movw	r3, #1542	; 0x606
    31c0:	4023      	ands	r3, r4
    31c2:	f240 2206 	movw	r2, #518	; 0x206
    31c6:	4293      	cmp	r3, r2
    31c8:	d03b      	beq.n	3242 <gpio_nrfx_pin_configure+0x10e>
    31ca:	d80c      	bhi.n	31e6 <gpio_nrfx_pin_configure+0xb2>
    31cc:	2b06      	cmp	r3, #6
    31ce:	d015      	beq.n	31fc <gpio_nrfx_pin_configure+0xc8>
    31d0:	d804      	bhi.n	31dc <gpio_nrfx_pin_configure+0xa8>
    31d2:	b19b      	cbz	r3, 31fc <gpio_nrfx_pin_configure+0xc8>
    31d4:	2b02      	cmp	r3, #2
    31d6:	d1e6      	bne.n	31a6 <gpio_nrfx_pin_configure+0x72>
    31d8:	2304      	movs	r3, #4
    31da:	e00f      	b.n	31fc <gpio_nrfx_pin_configure+0xc8>
    31dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    31e0:	d1e1      	bne.n	31a6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    31e2:	2301      	movs	r3, #1
    31e4:	e00a      	b.n	31fc <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    31e6:	f240 4202 	movw	r2, #1026	; 0x402
    31ea:	4293      	cmp	r3, r2
    31ec:	d02b      	beq.n	3246 <gpio_nrfx_pin_configure+0x112>
    31ee:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    31f2:	d02a      	beq.n	324a <gpio_nrfx_pin_configure+0x116>
    31f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    31f8:	d1d5      	bne.n	31a6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    31fa:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    31fc:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3200:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3204:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3208:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    320a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    320e:	bf54      	ite	pl
    3210:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3214:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3216:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3218:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    321c:	d517      	bpl.n	324e <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    321e:	687b      	ldr	r3, [r7, #4]
    3220:	2101      	movs	r1, #1
    3222:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3226:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    322a:	2200      	movs	r2, #0
    322c:	a901      	add	r1, sp, #4
    322e:	4628      	mov	r0, r5
    3230:	f001 f9b6 	bl	45a0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3234:	4b14      	ldr	r3, [pc, #80]	; (3288 <gpio_nrfx_pin_configure+0x154>)
    3236:	4298      	cmp	r0, r3
    3238:	bf14      	ite	ne
    323a:	f06f 0015 	mvnne.w	r0, #21
    323e:	2000      	moveq	r0, #0
    3240:	e791      	b.n	3166 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3242:	2307      	movs	r3, #7
    3244:	e7da      	b.n	31fc <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    3246:	2305      	movs	r3, #5
    3248:	e7d8      	b.n	31fc <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    324a:	2303      	movs	r3, #3
    324c:	e7d6      	b.n	31fc <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    324e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3250:	bf41      	itttt	mi
    3252:	687b      	ldrmi	r3, [r7, #4]
    3254:	2101      	movmi	r1, #1
    3256:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    325a:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    325e:	e7e4      	b.n	322a <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    3260:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3262:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3266:	bf54      	ite	pl
    3268:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    326c:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    326e:	461a      	mov	r2, r3
    3270:	a901      	add	r1, sp, #4
    3272:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3274:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3278:	f001 f8e4 	bl	4444 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    327c:	4b02      	ldr	r3, [pc, #8]	; (3288 <gpio_nrfx_pin_configure+0x154>)
    327e:	4298      	cmp	r0, r3
    3280:	f43f af7c 	beq.w	317c <gpio_nrfx_pin_configure+0x48>
    3284:	e78f      	b.n	31a6 <gpio_nrfx_pin_configure+0x72>
    3286:	bf00      	nop
    3288:	0bad0000 	.word	0x0bad0000

0000328c <uarte_nrfx_tx>:
}

static int uarte_nrfx_tx(const struct device *dev, const uint8_t *buf,
			 size_t len,
			 int32_t timeout)
{
    328c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3290:	461c      	mov	r4, r3
	return config->uarte_regs;
    3292:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    3294:	6907      	ldr	r7, [r0, #16]
{
    3296:	460e      	mov	r6, r1
    3298:	4605      	mov	r5, r0
	return config->uarte_regs;
    329a:	6819      	ldr	r1, [r3, #0]
	__asm__ volatile(
    329c:	f04f 0320 	mov.w	r3, #32
    32a0:	f3ef 8811 	mrs	r8, BASEPRI
    32a4:	f383 8812 	msr	BASEPRI_MAX, r3
    32a8:	f3bf 8f6f 	isb	sy
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	int key = irq_lock();

	if (data->async->tx_size) {
    32ac:	68f8      	ldr	r0, [r7, #12]
    32ae:	68c3      	ldr	r3, [r0, #12]
    32b0:	b143      	cbz	r3, 32c4 <uarte_nrfx_tx+0x38>
	__asm__ volatile(
    32b2:	f388 8811 	msr	BASEPRI, r8
    32b6:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
		return -EBUSY;
    32ba:	f06f 000f 	mvn.w	r0, #15
	    && timeout != SYS_FOREVER_US) {
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
			      K_NO_WAIT);
	}
	return 0;
}
    32be:	b002      	add	sp, #8
    32c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->SHORTS &= ~(mask);
}

NRF_STATIC_INLINE void nrf_uarte_int_enable(NRF_UARTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    32c4:	f44f 0c80 	mov.w	ip, #4194304	; 0x400000
	data->async->tx_size = len;
    32c8:	60c2      	str	r2, [r0, #12]
	data->async->tx_buf = buf;
    32ca:	6086      	str	r6, [r0, #8]
    32cc:	f8c1 c304 	str.w	ip, [r1, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    32d0:	f006 4160 	and.w	r1, r6, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
    32d4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    32d8:	d128      	bne.n	332c <uarte_nrfx_tx+0xa0>
		data->async->xfer_len = len;
    32da:	e9c0 6204 	strd	r6, r2, [r0, #16]
	start_tx_locked(dev, data);
    32de:	4639      	mov	r1, r7
    32e0:	4628      	mov	r0, r5
    32e2:	f003 fdde 	bl	6ea2 <start_tx_locked>
    32e6:	f388 8811 	msr	BASEPRI, r8
    32ea:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
    32ee:	7afb      	ldrb	r3, [r7, #11]
    32f0:	2b01      	cmp	r3, #1
    32f2:	d119      	bne.n	3328 <uarte_nrfx_tx+0x9c>
	    && timeout != SYS_FOREVER_US) {
    32f4:	1c63      	adds	r3, r4, #1
    32f6:	d017      	beq.n	3328 <uarte_nrfx_tx+0x9c>
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
    32f8:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    32fc:	480d      	ldr	r0, [pc, #52]	; (3334 <uarte_nrfx_tx+0xa8>)
    32fe:	68fe      	ldr	r6, [r7, #12]
    3300:	4a0d      	ldr	r2, [pc, #52]	; (3338 <uarte_nrfx_tx+0xac>)
    3302:	2400      	movs	r4, #0
    3304:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    3308:	4621      	mov	r1, r4
    330a:	2300      	movs	r3, #0
    330c:	fbc5 0107 	smlal	r0, r1, r5, r7
    3310:	f7fc fef6 	bl	100 <__aeabi_uldivmod>
    3314:	3628      	adds	r6, #40	; 0x28
    3316:	4602      	mov	r2, r0
    3318:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    331a:	2000      	movs	r0, #0
    331c:	2100      	movs	r1, #0
    331e:	e9cd 0100 	strd	r0, r1, [sp]
    3322:	4630      	mov	r0, r6
    3324:	f002 fc70 	bl	5c08 <z_impl_k_timer_start>
	return 0;
    3328:	2000      	movs	r0, #0
    332a:	e7c8      	b.n	32be <uarte_nrfx_tx+0x32>
		data->async->tx_cache_offset = 0;
    332c:	6203      	str	r3, [r0, #32]
		(void)setup_tx_cache(data);
    332e:	f003 fd6d 	bl	6e0c <setup_tx_cache.isra.0>
    3332:	e7d4      	b.n	32de <uarte_nrfx_tx+0x52>
    3334:	000f423f 	.word	0x000f423f
    3338:	000f4240 	.word	0x000f4240

0000333c <uarte_nrfx_configure>:
{
    333c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (cfg->stop_bits) {
    333e:	794b      	ldrb	r3, [r1, #5]
    3340:	2b01      	cmp	r3, #1
    3342:	d026      	beq.n	3392 <uarte_nrfx_configure+0x56>
    3344:	2b03      	cmp	r3, #3
    3346:	d121      	bne.n	338c <uarte_nrfx_configure+0x50>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3348:	2610      	movs	r6, #16
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    334a:	798b      	ldrb	r3, [r1, #6]
    334c:	2b03      	cmp	r3, #3
    334e:	d11d      	bne.n	338c <uarte_nrfx_configure+0x50>
	switch (cfg->flow_ctrl) {
    3350:	79cc      	ldrb	r4, [r1, #7]
    3352:	b10c      	cbz	r4, 3358 <uarte_nrfx_configure+0x1c>
    3354:	2c01      	cmp	r4, #1
    3356:	d119      	bne.n	338c <uarte_nrfx_configure+0x50>
	switch (cfg->parity) {
    3358:	790a      	ldrb	r2, [r1, #4]
    335a:	b112      	cbz	r2, 3362 <uarte_nrfx_configure+0x26>
    335c:	2a02      	cmp	r2, #2
    335e:	d115      	bne.n	338c <uarte_nrfx_configure+0x50>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3360:	220e      	movs	r2, #14
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3362:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3364:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3366:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    336a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    336c:	d065      	beq.n	343a <uarte_nrfx_configure+0xfe>
    336e:	d82d      	bhi.n	33cc <uarte_nrfx_configure+0x90>
    3370:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3374:	d064      	beq.n	3440 <uarte_nrfx_configure+0x104>
    3376:	d816      	bhi.n	33a6 <uarte_nrfx_configure+0x6a>
    3378:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    337c:	d062      	beq.n	3444 <uarte_nrfx_configure+0x108>
    337e:	d80a      	bhi.n	3396 <uarte_nrfx_configure+0x5a>
    3380:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3384:	d061      	beq.n	344a <uarte_nrfx_configure+0x10e>
    3386:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    338a:	d061      	beq.n	3450 <uarte_nrfx_configure+0x114>
    338c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3390:	e052      	b.n	3438 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3392:	2600      	movs	r6, #0
    3394:	e7d9      	b.n	334a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3396:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    339a:	d05c      	beq.n	3456 <uarte_nrfx_configure+0x11a>
    339c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    33a0:	d1f4      	bne.n	338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    33a2:	4b37      	ldr	r3, [pc, #220]	; (3480 <uarte_nrfx_configure+0x144>)
    33a4:	e03c      	b.n	3420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33a6:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    33aa:	d057      	beq.n	345c <uarte_nrfx_configure+0x120>
    33ac:	d807      	bhi.n	33be <uarte_nrfx_configure+0x82>
    33ae:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    33b2:	d055      	beq.n	3460 <uarte_nrfx_configure+0x124>
    33b4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    33b8:	d1e8      	bne.n	338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    33ba:	4b32      	ldr	r3, [pc, #200]	; (3484 <uarte_nrfx_configure+0x148>)
    33bc:	e030      	b.n	3420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33be:	f647 2712 	movw	r7, #31250	; 0x7a12
    33c2:	42bb      	cmp	r3, r7
    33c4:	d1e2      	bne.n	338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    33c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    33ca:	e029      	b.n	3420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33cc:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    33d0:	d048      	beq.n	3464 <uarte_nrfx_configure+0x128>
    33d2:	d813      	bhi.n	33fc <uarte_nrfx_configure+0xc0>
    33d4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    33d8:	d047      	beq.n	346a <uarte_nrfx_configure+0x12e>
    33da:	d809      	bhi.n	33f0 <uarte_nrfx_configure+0xb4>
    33dc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    33e0:	42bb      	cmp	r3, r7
    33e2:	d044      	beq.n	346e <uarte_nrfx_configure+0x132>
    33e4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    33e8:	d1d0      	bne.n	338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    33ea:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    33ee:	e017      	b.n	3420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33f0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    33f4:	d1ca      	bne.n	338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    33f6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    33fa:	e011      	b.n	3420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    33fc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3400:	d038      	beq.n	3474 <uarte_nrfx_configure+0x138>
    3402:	d808      	bhi.n	3416 <uarte_nrfx_configure+0xda>
    3404:	4f20      	ldr	r7, [pc, #128]	; (3488 <uarte_nrfx_configure+0x14c>)
    3406:	42bb      	cmp	r3, r7
    3408:	d037      	beq.n	347a <uarte_nrfx_configure+0x13e>
    340a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    340e:	d1bd      	bne.n	338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3410:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3414:	e004      	b.n	3420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3416:	4f1d      	ldr	r7, [pc, #116]	; (348c <uarte_nrfx_configure+0x150>)
    3418:	42bb      	cmp	r3, r7
    341a:	d1b7      	bne.n	338c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    341c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3420:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3422:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
	data->uart_config = *cfg;
    3426:	1d03      	adds	r3, r0, #4
    3428:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    342a:	4334      	orrs	r4, r6
    342c:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    342e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3432:	e883 0003 	stmia.w	r3, {r0, r1}
	return 0;
    3436:	2000      	movs	r0, #0
}
    3438:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    343a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    343e:	e7ef      	b.n	3420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3440:	4b13      	ldr	r3, [pc, #76]	; (3490 <uarte_nrfx_configure+0x154>)
    3442:	e7ed      	b.n	3420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3444:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3448:	e7ea      	b.n	3420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    344a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    344e:	e7e7      	b.n	3420 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3450:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3454:	e7e4      	b.n	3420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3456:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    345a:	e7e1      	b.n	3420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    345c:	4b0d      	ldr	r3, [pc, #52]	; (3494 <uarte_nrfx_configure+0x158>)
    345e:	e7df      	b.n	3420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3460:	4b0d      	ldr	r3, [pc, #52]	; (3498 <uarte_nrfx_configure+0x15c>)
    3462:	e7dd      	b.n	3420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3464:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3468:	e7da      	b.n	3420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    346a:	4b0c      	ldr	r3, [pc, #48]	; (349c <uarte_nrfx_configure+0x160>)
    346c:	e7d8      	b.n	3420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    346e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3472:	e7d5      	b.n	3420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3474:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3478:	e7d2      	b.n	3420 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    347a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    347e:	e7cf      	b.n	3420 <uarte_nrfx_configure+0xe4>
    3480:	0013b000 	.word	0x0013b000
    3484:	004ea000 	.word	0x004ea000
    3488:	0003d090 	.word	0x0003d090
    348c:	000f4240 	.word	0x000f4240
    3490:	00275000 	.word	0x00275000
    3494:	0075c000 	.word	0x0075c000
    3498:	003af000 	.word	0x003af000
    349c:	013a9000 	.word	0x013a9000

000034a0 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    34a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    34a4:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    34a8:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    34aa:	f8d9 4000 	ldr.w	r4, [r9]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    34ae:	f8d9 800c 	ldr.w	r8, [r9, #12]
static int uarte_instance_init(const struct device *dev,
    34b2:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    34b4:	2100      	movs	r1, #0
    34b6:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    34ba:	4607      	mov	r7, r0
	data->dev = dev;
    34bc:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    34be:	466a      	mov	r2, sp
    34c0:	4640      	mov	r0, r8
    34c2:	f003 fe13 	bl	70ec <pinctrl_lookup_state>
	if (ret < 0) {
    34c6:	1e05      	subs	r5, r0, #0
    34c8:	db26      	blt.n	3518 <uarte_instance_init.constprop.0+0x78>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    34ca:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    34cc:	f8d8 2000 	ldr.w	r2, [r8]
    34d0:	7919      	ldrb	r1, [r3, #4]
    34d2:	6818      	ldr	r0, [r3, #0]
    34d4:	f003 fe27 	bl	7126 <pinctrl_configure_pins>
	if (err < 0) {
    34d8:	1e05      	subs	r5, r0, #0
    34da:	db1d      	blt.n	3518 <uarte_instance_init.constprop.0+0x78>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    34dc:	1d31      	adds	r1, r6, #4
    34de:	4638      	mov	r0, r7
    34e0:	f7ff ff2c 	bl	333c <uarte_nrfx_configure>
	if (err) {
    34e4:	4605      	mov	r5, r0
    34e6:	b9b8      	cbnz	r0, 3518 <uarte_instance_init.constprop.0+0x78>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    34e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    34ec:	0799      	lsls	r1, r3, #30
    34ee:	d52a      	bpl.n	3546 <uarte_instance_init.constprop.0+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    34f0:	f106 0016 	add.w	r0, r6, #22
    34f4:	f001 fa8a 	bl	4a0c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    34f8:	4b49      	ldr	r3, [pc, #292]	; (3620 <uarte_instance_init.constprop.0+0x180>)
    34fa:	4298      	cmp	r0, r3
    34fc:	d010      	beq.n	3520 <uarte_instance_init.constprop.0+0x80>
		LOG_ERR("Failed to allocate PPI Channel");
    34fe:	4b49      	ldr	r3, [pc, #292]	; (3624 <uarte_instance_init.constprop.0+0x184>)
    3500:	9305      	str	r3, [sp, #20]
    3502:	2302      	movs	r3, #2
    3504:	9304      	str	r3, [sp, #16]
    3506:	4848      	ldr	r0, [pc, #288]	; (3628 <uarte_instance_init.constprop.0+0x188>)
    3508:	462b      	mov	r3, r5
    350a:	aa04      	add	r2, sp, #16
    350c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    3510:	f06f 0504 	mvn.w	r5, #4
    3514:	f003 f9dc 	bl	68d0 <z_impl_z_log_msg2_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    3518:	4628      	mov	r0, r5
    351a:	b007      	add	sp, #28
    351c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3520:	7db0      	ldrb	r0, [r6, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3522:	00c3      	lsls	r3, r0, #3
    3524:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3528:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    352c:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3530:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3534:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3538:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    353c:	4a3b      	ldr	r2, [pc, #236]	; (362c <uarte_instance_init.constprop.0+0x18c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    353e:	2301      	movs	r3, #1
    3540:	4083      	lsls	r3, r0
    3542:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
    3546:	68f3      	ldr	r3, [r6, #12]
    3548:	2b00      	cmp	r3, #0
    354a:	d055      	beq.n	35f8 <uarte_instance_init.constprop.0+0x158>
	return config->uarte_regs;
    354c:	687b      	ldr	r3, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    354e:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return config->uarte_regs;
    3552:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
    3554:	f8d8 000c 	ldr.w	r0, [r8, #12]
    p_reg->INTENSET = mask;
    3558:	4935      	ldr	r1, [pc, #212]	; (3630 <uarte_instance_init.constprop.0+0x190>)
    355a:	2204      	movs	r2, #4
    355c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    3560:	2201      	movs	r2, #1
    3562:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
    3566:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    356a:	2108      	movs	r1, #8
    356c:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3570:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    3574:	b1a1      	cbz	r1, 35a0 <uarte_instance_init.constprop.0+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3576:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3578:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    357c:	b91a      	cbnz	r2, 3586 <uarte_instance_init.constprop.0+0xe6>
    357e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    3582:	2a00      	cmp	r2, #0
    3584:	d0f8      	beq.n	3578 <uarte_instance_init.constprop.0+0xd8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3586:	2200      	movs	r2, #0
    3588:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    358c:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
    3590:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    3594:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    3598:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    359c:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
    35a0:	4924      	ldr	r1, [pc, #144]	; (3634 <uarte_instance_init.constprop.0+0x194>)
    35a2:	2200      	movs	r2, #0
    35a4:	3088      	adds	r0, #136	; 0x88
    35a6:	f004 f8ac 	bl	7702 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
    35aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
    35ae:	f8d8 000c 	ldr.w	r0, [r8, #12]
	timer->user_data = user_data;
    35b2:	f8c3 80bc 	str.w	r8, [r3, #188]	; 0xbc
    35b6:	4920      	ldr	r1, [pc, #128]	; (3638 <uarte_instance_init.constprop.0+0x198>)
    35b8:	2200      	movs	r2, #0
    35ba:	3028      	adds	r0, #40	; 0x28
    35bc:	f004 f8a1 	bl	7702 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
    35c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
    35c4:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    35c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    35cc:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    35ce:	bf5c      	itt	pl
    35d0:	f44f 7280 	movpl.w	r2, #256	; 0x100
    35d4:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    35d8:	06db      	lsls	r3, r3, #27
    35da:	bf44      	itt	mi
    35dc:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    35e0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    35e4:	3614      	adds	r6, #20
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    35e6:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    35e8:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    35ec:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    35f0:	2301      	movs	r3, #1
    35f2:	60a3      	str	r3, [r4, #8]
    35f4:	60e3      	str	r3, [r4, #12]
	return 0;
    35f6:	e78f      	b.n	3518 <uarte_instance_init.constprop.0+0x78>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    35f8:	2308      	movs	r3, #8
    35fa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    35fe:	f899 3008 	ldrb.w	r3, [r9, #8]
    3602:	2b00      	cmp	r3, #0
    3604:	d1e0      	bne.n	35c8 <uarte_instance_init.constprop.0+0x128>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3606:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    360a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    360e:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3612:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3616:	2301      	movs	r3, #1
    3618:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    361c:	6023      	str	r3, [r4, #0]
}
    361e:	e7d3      	b.n	35c8 <uarte_instance_init.constprop.0+0x128>
    3620:	0bad0000 	.word	0x0bad0000
    3624:	00008365 	.word	0x00008365
    3628:	00007a04 	.word	0x00007a04
    362c:	4001f000 	.word	0x4001f000
    3630:	000a0210 	.word	0x000a0210
    3634:	00007021 	.word	0x00007021
    3638:	000070db 	.word	0x000070db

0000363c <uarte_nrfx_poll_out>:
{
    363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    363e:	6906      	ldr	r6, [r0, #16]
{
    3640:	4604      	mov	r4, r0
    3642:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3644:	f003 ff21 	bl	748a <k_is_in_isr>
    3648:	b910      	cbnz	r0, 3650 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    364a:	4b28      	ldr	r3, [pc, #160]	; (36ec <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
    364c:	781b      	ldrb	r3, [r3, #0]
    364e:	bb5b      	cbnz	r3, 36a8 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    3650:	f04f 0320 	mov.w	r3, #32
    3654:	f3ef 8111 	mrs	r1, BASEPRI
    3658:	f383 8812 	msr	BASEPRI_MAX, r3
    365c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3660:	6860      	ldr	r0, [r4, #4]
			key = irq_lock();
    3662:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
    3664:	f003 fc0d 	bl	6e82 <is_tx_ready.isra.0>
    3668:	b1c8      	cbz	r0, 369e <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
    366a:	68f3      	ldr	r3, [r6, #12]
    366c:	b15b      	cbz	r3, 3686 <uarte_nrfx_poll_out+0x4a>
    366e:	68da      	ldr	r2, [r3, #12]
    3670:	b14a      	cbz	r2, 3686 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
    3672:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
    3676:	2a00      	cmp	r2, #0
    3678:	da05      	bge.n	3686 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
    367a:	6862      	ldr	r2, [r4, #4]
    367c:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
    367e:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
    3682:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
    3686:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
    3688:	2201      	movs	r2, #1
	data->char_out = c;
    368a:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    368e:	4620      	mov	r0, r4
    3690:	f003 faae 	bl	6bf0 <tx_start>
	__asm__ volatile(
    3694:	f385 8811 	msr	BASEPRI, r5
    3698:	f3bf 8f6f 	isb	sy
}
    369c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    369e:	f381 8811 	msr	BASEPRI, r1
    36a2:	f3bf 8f6f 	isb	sy
}
    36a6:	e7d3      	b.n	3650 <uarte_nrfx_poll_out+0x14>
{
    36a8:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    36aa:	6860      	ldr	r0, [r4, #4]
    36ac:	f003 fbe9 	bl	6e82 <is_tx_ready.isra.0>
    36b0:	b948      	cbnz	r0, 36c6 <uarte_nrfx_poll_out+0x8a>
    36b2:	2001      	movs	r0, #1
    36b4:	f003 fdeb 	bl	728e <nrfx_busy_wait>
    36b8:	3d01      	subs	r5, #1
    36ba:	d1f6      	bne.n	36aa <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
    36bc:	2100      	movs	r1, #0
    36be:	2021      	movs	r0, #33	; 0x21
    36c0:	f002 f898 	bl	57f4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    36c4:	e7f0      	b.n	36a8 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
    36c6:	f04f 0320 	mov.w	r3, #32
    36ca:	f3ef 8511 	mrs	r5, BASEPRI
    36ce:	f383 8812 	msr	BASEPRI_MAX, r3
    36d2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    36d6:	6860      	ldr	r0, [r4, #4]
    36d8:	f003 fbd3 	bl	6e82 <is_tx_ready.isra.0>
    36dc:	2800      	cmp	r0, #0
    36de:	d1d2      	bne.n	3686 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    36e0:	f385 8811 	msr	BASEPRI, r5
    36e4:	f3bf 8f6f 	isb	sy
}
    36e8:	e7e8      	b.n	36bc <uarte_nrfx_poll_out+0x80>
    36ea:	bf00      	nop
    36ec:	2000174c 	.word	0x2000174c

000036f0 <uarte_nrfx_isr_async>:
	return config->uarte_regs;
    36f0:	6843      	ldr	r3, [r0, #4]
{
    36f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
    36f6:	681d      	ldr	r5, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    36f8:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
{
    36fc:	b088      	sub	sp, #32
    36fe:	4604      	mov	r4, r0
	if (!HW_RX_COUNTING_ENABLED(data)
    3700:	b171      	cbz	r1, 3720 <uarte_nrfx_isr_async+0x30>
	struct uarte_nrfx_data *data = dev->data;
    3702:	6903      	ldr	r3, [r0, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3704:	2200      	movs	r2, #0
    3706:	f8c5 2108 	str.w	r2, [r5, #264]	; 0x108
    370a:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
		data->async->rx_cnt.cnt++;
    370e:	68da      	ldr	r2, [r3, #12]
    3710:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
    3714:	3301      	adds	r3, #1
    3716:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
}
    371a:	b008      	add	sp, #32
    371c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3720:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    3724:	b313      	cbz	r3, 376c <uarte_nrfx_isr_async+0x7c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3726:	f8c5 1124 	str.w	r1, [r5, #292]	; 0x124
    372a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    372e:	f8d5 6480 	ldr.w	r6, [r5, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3732:	f8c5 6480 	str.w	r6, [r5, #1152]	; 0x480
	struct uart_event evt = {
    3736:	2214      	movs	r2, #20
    3738:	a803      	add	r0, sp, #12
    373a:	f003 f949 	bl	69d0 <memset>
    373e:	2306      	movs	r3, #6
    3740:	f88d 300c 	strb.w	r3, [sp, #12]
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    3744:	07f3      	lsls	r3, r6, #31
    3746:	f100 8100 	bmi.w	394a <uarte_nrfx_isr_async+0x25a>
    374a:	07b7      	lsls	r7, r6, #30
    374c:	f100 80ff 	bmi.w	394e <uarte_nrfx_isr_async+0x25e>
    3750:	0770      	lsls	r0, r6, #29
    3752:	f100 80fe 	bmi.w	3952 <uarte_nrfx_isr_async+0x262>
    3756:	f006 0608 	and.w	r6, r6, #8
	user_callback(dev, &evt);
    375a:	4620      	mov	r0, r4
    375c:	a903      	add	r1, sp, #12
	struct uart_event evt = {
    375e:	f88d 6010 	strb.w	r6, [sp, #16]
	user_callback(dev, &evt);
    3762:	f003 fa6b 	bl	6c3c <user_callback>
	(void) uarte_nrfx_rx_disable(dev);
    3766:	4620      	mov	r0, r4
    3768:	f003 fafb 	bl	6d62 <uarte_nrfx_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    376c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)
    3770:	b37b      	cbz	r3, 37d2 <uarte_nrfx_isr_async+0xe2>
    return p_reg->INTENSET & mask;
    3772:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDRX_MASK)) {
    3776:	06d9      	lsls	r1, r3, #27
    3778:	d52b      	bpl.n	37d2 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    377a:	f04f 0800 	mov.w	r8, #0
	struct uarte_nrfx_data *data = dev->data;
    377e:	6927      	ldr	r7, [r4, #16]
    3780:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
    3784:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
	return config->uarte_regs;
    3788:	6863      	ldr	r3, [r4, #4]
	data->async->is_in_irq = true;
    378a:	68f8      	ldr	r0, [r7, #12]
	return config->uarte_regs;
    378c:	681e      	ldr	r6, [r3, #0]
	data->async->is_in_irq = true;
    378e:	2301      	movs	r3, #1
    3790:	f880 30d5 	strb.w	r3, [r0, #213]	; 0xd5
	z_impl_k_timer_stop(timer);
    3794:	3088      	adds	r0, #136	; 0x88
    3796:	f003 ffc0 	bl	771a <z_impl_k_timer_stop>
				data->async->rx_flush_cnt;
    379a:	68fa      	ldr	r2, [r7, #12]
}

NRF_STATIC_INLINE uint32_t nrf_uarte_rx_amount_get(NRF_UARTE_Type const * p_reg)
{
    return p_reg->RXD.AMOUNT;
    379c:	f8d6 153c 	ldr.w	r1, [r6, #1340]	; 0x53c
    37a0:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    37a4:	6e90      	ldr	r0, [r2, #104]	; 0x68
	data->async->rx_flush_cnt = 0;
    37a6:	f882 80d1 	strb.w	r8, [r2, #209]	; 0xd1
	int rx_len = rx_amount - data->async->rx_offset;
    37aa:	1a1b      	subs	r3, r3, r0
    37ac:	440b      	add	r3, r1
	data->async->rx_total_user_byte_cnt += rx_len;
    37ae:	6f90      	ldr	r0, [r2, #120]	; 0x78
    37b0:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
    37b4:	4408      	add	r0, r1
	if (rx_len > 0) {
    37b6:	4543      	cmp	r3, r8
	data->async->rx_total_user_byte_cnt += rx_len;
    37b8:	6790      	str	r0, [r2, #120]	; 0x78
	if (rx_len > 0) {
    37ba:	dd02      	ble.n	37c2 <uarte_nrfx_isr_async+0xd2>
		notify_uart_rx_rdy(dev, rx_len);
    37bc:	4620      	mov	r0, r4
    37be:	f003 fa44 	bl	6c4a <notify_uart_rx_rdy>
	if (!data->async->rx_enabled) {
    37c2:	68f9      	ldr	r1, [r7, #12]
    37c4:	f891 30d2 	ldrb.w	r3, [r1, #210]	; 0xd2
    37c8:	2b00      	cmp	r3, #0
    37ca:	f040 80c4 	bne.w	3956 <uarte_nrfx_isr_async+0x266>
		data->async->is_in_irq = false;
    37ce:	f881 30d5 	strb.w	r3, [r1, #213]	; 0xd5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    37d2:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED) &&
    37d6:	b37b      	cbz	r3, 3838 <uarte_nrfx_isr_async+0x148>
    37d8:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    37dc:	bb66      	cbnz	r6, 3838 <uarte_nrfx_isr_async+0x148>
	struct uart_event evt = {
    37de:	2214      	movs	r2, #20
	struct uarte_nrfx_data *data = dev->data;
    37e0:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    37e2:	f8c5 614c 	str.w	r6, [r5, #332]	; 0x14c
	struct uart_event evt = {
    37e6:	4631      	mov	r1, r6
    37e8:	a803      	add	r0, sp, #12
    37ea:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
    37ee:	f003 f8ef 	bl	69d0 <memset>
    37f2:	2303      	movs	r3, #3
	user_callback(dev, &evt);
    37f4:	a903      	add	r1, sp, #12
    37f6:	4620      	mov	r0, r4
	struct uart_event evt = {
    37f8:	f88d 300c 	strb.w	r3, [sp, #12]
	user_callback(dev, &evt);
    37fc:	f003 fa1e 	bl	6c3c <user_callback>
	if (data->async->rx_timeout != SYS_FOREVER_US) {
    3800:	68ff      	ldr	r7, [r7, #12]
    3802:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    3804:	1c5a      	adds	r2, r3, #1
    3806:	d017      	beq.n	3838 <uarte_nrfx_isr_async+0x148>
		data->async->rx_timeout_left = data->async->rx_timeout;
    3808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			      K_USEC(data->async->rx_timeout_slab),
    380c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    3810:	4889      	ldr	r0, [pc, #548]	; (3a38 <uarte_nrfx_isr_async+0x348>)
    3812:	4a8a      	ldr	r2, [pc, #552]	; (3a3c <uarte_nrfx_isr_async+0x34c>)
    3814:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
    3818:	f44f 4e00 	mov.w	lr, #32768	; 0x8000
    381c:	4631      	mov	r1, r6
    381e:	2300      	movs	r3, #0
    3820:	fbcc 010e 	smlal	r0, r1, ip, lr
    3824:	f7fc fc6c 	bl	100 <__aeabi_uldivmod>
    3828:	4602      	mov	r2, r0
    382a:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
    382c:	e9cd 0100 	strd	r0, r1, [sp]
    3830:	f107 0088 	add.w	r0, r7, #136	; 0x88
    3834:	f002 f9e8 	bl	5c08 <z_impl_k_timer_start>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3838:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
    383c:	b333      	cbz	r3, 388c <uarte_nrfx_isr_async+0x19c>
    383e:	f8d5 6110 	ldr.w	r6, [r5, #272]	; 0x110
    3842:	bb1e      	cbnz	r6, 388c <uarte_nrfx_isr_async+0x19c>
	struct uarte_nrfx_data *data = dev->data;
    3844:	6927      	ldr	r7, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3846:	f8c5 6144 	str.w	r6, [r5, #324]	; 0x144
	rx_buf_release(dev, &data->async->rx_buf);
    384a:	68f9      	ldr	r1, [r7, #12]
    384c:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
	const struct uarte_nrfx_config *config = dev->config;
    3850:	f8d4 8004 	ldr.w	r8, [r4, #4]
	rx_buf_release(dev, &data->async->rx_buf);
    3854:	3160      	adds	r1, #96	; 0x60
    3856:	4620      	mov	r0, r4
    3858:	f003 fa10 	bl	6c7c <rx_buf_release>
	rx_buf_release(dev, &data->async->rx_next_buf);
    385c:	68f9      	ldr	r1, [r7, #12]
    385e:	4620      	mov	r0, r4
    3860:	316c      	adds	r1, #108	; 0x6c
    3862:	f003 fa0b 	bl	6c7c <rx_buf_release>
	if (data->async->rx_enabled) {
    3866:	68fb      	ldr	r3, [r7, #12]
    3868:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
    386c:	2a00      	cmp	r2, #0
    386e:	f000 809f 	beq.w	39b0 <uarte_nrfx_isr_async+0x2c0>
		data->async->rx_enabled = false;
    3872:	f883 60d2 	strb.w	r6, [r3, #210]	; 0xd2
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3876:	f8d8 3004 	ldr.w	r3, [r8, #4]
    387a:	06d8      	lsls	r0, r3, #27
    387c:	d503      	bpl.n	3886 <uarte_nrfx_isr_async+0x196>
		async_uart_release(dev, UARTE_LOW_POWER_RX);
    387e:	2102      	movs	r1, #2
    3880:	4620      	mov	r0, r4
    3882:	f003 fad7 	bl	6e34 <async_uart_release>
	notify_rx_disable(dev);
    3886:	4620      	mov	r0, r4
    3888:	f003 fa10 	bl	6cac <notify_rx_disable>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    388c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)
    3890:	b1db      	cbz	r3, 38ca <uarte_nrfx_isr_async+0x1da>
    return p_reg->INTENSET & mask;
    3892:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK)) {
    3896:	05d9      	lsls	r1, r3, #23
    3898:	d517      	bpl.n	38ca <uarte_nrfx_isr_async+0x1da>
	return config->uarte_regs;
    389a:	6863      	ldr	r3, [r4, #4]
    389c:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    389e:	f04f 0120 	mov.w	r1, #32
    38a2:	f3ef 8211 	mrs	r2, BASEPRI
    38a6:	f381 8812 	msr	BASEPRI_MAX, r1
    38aa:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    38ae:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    38b2:	b131      	cbz	r1, 38c2 <uarte_nrfx_isr_async+0x1d2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    38b4:	2100      	movs	r1, #0
    38b6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    38ba:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    38be:	2101      	movs	r1, #1
    38c0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    38c2:	f382 8811 	msr	BASEPRI, r2
    38c6:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    38ca:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)
    38ce:	2b00      	cmp	r3, #0
    38d0:	f43f af23 	beq.w	371a <uarte_nrfx_isr_async+0x2a>
    return p_reg->INTENSET & mask;
    38d4:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	    && nrf_uarte_int_enable_check(uarte,
    38d8:	025a      	lsls	r2, r3, #9
    38da:	f57f af1e 	bpl.w	371a <uarte_nrfx_isr_async+0x2a>
	const struct uarte_nrfx_config *config = dev->config;
    38de:	6863      	ldr	r3, [r4, #4]
	struct uarte_nrfx_data *data = dev->data;
    38e0:	6925      	ldr	r5, [r4, #16]
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    38e2:	e9d3 7300 	ldrd	r7, r3, [r3]
    38e6:	06db      	lsls	r3, r3, #27
    38e8:	d467      	bmi.n	39ba <uarte_nrfx_isr_async+0x2ca>
	if (!data->async->tx_buf) {
    38ea:	68eb      	ldr	r3, [r5, #12]
    38ec:	689b      	ldr	r3, [r3, #8]
    38ee:	2b00      	cmp	r3, #0
    38f0:	f43f af13 	beq.w	371a <uarte_nrfx_isr_async+0x2a>
	__asm__ volatile(
    38f4:	f04f 0320 	mov.w	r3, #32
    38f8:	f3ef 8211 	mrs	r2, BASEPRI
    38fc:	f383 8812 	msr	BASEPRI_MAX, r3
    3900:	f3bf 8f6f 	isb	sy
	size_t amount = (data->async->tx_amount >= 0) ?
    3904:	68eb      	ldr	r3, [r5, #12]
    3906:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
			data->async->tx_amount : nrf_uarte_tx_amount_get(uarte);
    390a:	2900      	cmp	r1, #0
    390c:	bfac      	ite	ge
    390e:	f8d3 60c4 	ldrge.w	r6, [r3, #196]	; 0xc4
    return p_reg->TXD.AMOUNT;
    3912:	f8d7 654c 	ldrlt.w	r6, [r7, #1356]	; 0x54c
	__asm__ volatile(
    3916:	f382 8811 	msr	BASEPRI, r2
    391a:	f3bf 8f6f 	isb	sy
	if (data->async->pending_tx) {
    391e:	68e8      	ldr	r0, [r5, #12]
    3920:	f890 30d4 	ldrb.w	r3, [r0, #212]	; 0xd4
    3924:	2b00      	cmp	r3, #0
    3926:	d055      	beq.n	39d4 <uarte_nrfx_isr_async+0x2e4>
	__asm__ volatile(
    3928:	f04f 0320 	mov.w	r3, #32
    392c:	f3ef 8611 	mrs	r6, BASEPRI
    3930:	f383 8812 	msr	BASEPRI_MAX, r3
    3934:	f3bf 8f6f 	isb	sy
				start_tx_locked(dev, data);
    3938:	4629      	mov	r1, r5
    393a:	4620      	mov	r0, r4
    393c:	f003 fab1 	bl	6ea2 <start_tx_locked>
	__asm__ volatile(
    3940:	f386 8811 	msr	BASEPRI, r6
    3944:	f3bf 8f6f 	isb	sy
				return;
    3948:	e6e7      	b.n	371a <uarte_nrfx_isr_async+0x2a>
		.data.rx_stop.reason = UARTE_ERROR_FROM_MASK(err),
    394a:	2601      	movs	r6, #1
    394c:	e705      	b.n	375a <uarte_nrfx_isr_async+0x6a>
    394e:	2602      	movs	r6, #2
    3950:	e703      	b.n	375a <uarte_nrfx_isr_async+0x6a>
    3952:	2604      	movs	r6, #4
    3954:	e701      	b.n	375a <uarte_nrfx_isr_async+0x6a>
	rx_buf_release(dev, &data->async->rx_buf);
    3956:	3160      	adds	r1, #96	; 0x60
    3958:	4620      	mov	r0, r4
    395a:	f003 f98f 	bl	6c7c <rx_buf_release>
	__asm__ volatile(
    395e:	f04f 0320 	mov.w	r3, #32
    3962:	f3ef 8111 	mrs	r1, BASEPRI
    3966:	f383 8812 	msr	BASEPRI_MAX, r3
    396a:	f3bf 8f6f 	isb	sy
	if (data->async->rx_next_buf) {
    396e:	68fb      	ldr	r3, [r7, #12]
    3970:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    3972:	b1d2      	cbz	r2, 39aa <uarte_nrfx_isr_async+0x2ba>
		data->async->rx_buf = data->async->rx_next_buf;
    3974:	661a      	str	r2, [r3, #96]	; 0x60
		data->async->rx_buf_len = data->async->rx_next_buf_len;
    3976:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    3978:	665a      	str	r2, [r3, #100]	; 0x64
		data->async->rx_next_buf = NULL;
    397a:	2200      	movs	r2, #0
		data->async->rx_next_buf_len = 0;
    397c:	e9c3 221b 	strd	r2, r2, [r3, #108]	; 0x6c
		data->async->rx_offset = 0;
    3980:	669a      	str	r2, [r3, #104]	; 0x68
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3982:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
		if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
    3986:	b90b      	cbnz	r3, 398c <uarte_nrfx_isr_async+0x29c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3988:	2301      	movs	r3, #1
    398a:	6033      	str	r3, [r6, #0]
    p_reg->SHORTS &= ~(mask);
    398c:	f8d6 3200 	ldr.w	r3, [r6, #512]	; 0x200
    3990:	f023 0320 	bic.w	r3, r3, #32
    3994:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	__asm__ volatile(
    3998:	f381 8811 	msr	BASEPRI, r1
    399c:	f3bf 8f6f 	isb	sy
	data->async->is_in_irq = false;
    39a0:	68fb      	ldr	r3, [r7, #12]
    39a2:	2200      	movs	r2, #0
    39a4:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    39a8:	e713      	b.n	37d2 <uarte_nrfx_isr_async+0xe2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39aa:	2301      	movs	r3, #1
    39ac:	6073      	str	r3, [r6, #4]
}
    39ae:	e7f3      	b.n	3998 <uarte_nrfx_isr_async+0x2a8>
		(void)rx_flush(dev, NULL, 0);
    39b0:	6860      	ldr	r0, [r4, #4]
    39b2:	4611      	mov	r1, r2
    39b4:	f003 f9f6 	bl	6da4 <rx_flush.isra.0>
    39b8:	e75d      	b.n	3876 <uarte_nrfx_isr_async+0x186>
    p_reg->INTENCLR = mask;
    39ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    39be:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
		async_uart_release(dev, UARTE_LOW_POWER_TX);
    39c2:	2101      	movs	r1, #1
    39c4:	4620      	mov	r0, r4
    39c6:	f003 fa35 	bl	6e34 <async_uart_release>
		if (!data->async->tx_size) {
    39ca:	68eb      	ldr	r3, [r5, #12]
    39cc:	68db      	ldr	r3, [r3, #12]
    39ce:	2b00      	cmp	r3, #0
    39d0:	d18b      	bne.n	38ea <uarte_nrfx_isr_async+0x1fa>
    39d2:	e6a2      	b.n	371a <uarte_nrfx_isr_async+0x2a>
	if (data->async->tx_buf != data->async->xfer_buf) {
    39d4:	6882      	ldr	r2, [r0, #8]
    39d6:	6903      	ldr	r3, [r0, #16]
    39d8:	429a      	cmp	r2, r3
    39da:	d00b      	beq.n	39f4 <uarte_nrfx_isr_async+0x304>
		if (amount == data->async->xfer_len) {
    39dc:	6942      	ldr	r2, [r0, #20]
			data->async->tx_cache_offset += amount;
    39de:	6a03      	ldr	r3, [r0, #32]
		if (amount == data->async->xfer_len) {
    39e0:	42b2      	cmp	r2, r6
			data->async->tx_cache_offset += amount;
    39e2:	4433      	add	r3, r6
		if (amount == data->async->xfer_len) {
    39e4:	d125      	bne.n	3a32 <uarte_nrfx_isr_async+0x342>
			data->async->tx_cache_offset += amount;
    39e6:	6203      	str	r3, [r0, #32]
			if (setup_tx_cache(data)) {
    39e8:	f003 fa10 	bl	6e0c <setup_tx_cache.isra.0>
    39ec:	2800      	cmp	r0, #0
    39ee:	d19b      	bne.n	3928 <uarte_nrfx_isr_async+0x238>
			amount = data->async->tx_cache_offset;
    39f0:	68eb      	ldr	r3, [r5, #12]
    39f2:	6a1e      	ldr	r6, [r3, #32]
	k_timer_stop(&data->async->tx_timeout_timer);
    39f4:	68e8      	ldr	r0, [r5, #12]
    39f6:	3028      	adds	r0, #40	; 0x28
	z_impl_k_timer_stop(timer);
    39f8:	f003 fe8f 	bl	771a <z_impl_k_timer_stop>
	struct uart_event evt = {
    39fc:	2214      	movs	r2, #20
    39fe:	2100      	movs	r1, #0
    3a00:	a803      	add	r0, sp, #12
    3a02:	f002 ffe5 	bl	69d0 <memset>
		.data.tx.buf = data->async->tx_buf,
    3a06:	68eb      	ldr	r3, [r5, #12]
	struct uart_event evt = {
    3a08:	689a      	ldr	r2, [r3, #8]
    3a0a:	e9cd 2604 	strd	r2, r6, [sp, #16]
	if (amount == data->async->tx_size) {
    3a0e:	68da      	ldr	r2, [r3, #12]
    3a10:	4296      	cmp	r6, r2
		evt.type = UART_TX_ABORTED;
    3a12:	bf1c      	itt	ne
    3a14:	2201      	movne	r2, #1
    3a16:	f88d 200c 	strbne.w	r2, [sp, #12]
    3a1a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    3a1e:	f8c7 2308 	str.w	r2, [r7, #776]	; 0x308
	data->async->tx_buf = NULL;
    3a22:	2200      	movs	r2, #0
    3a24:	609a      	str	r2, [r3, #8]
	data->async->tx_size = 0;
    3a26:	60da      	str	r2, [r3, #12]
	user_callback(dev, &evt);
    3a28:	a903      	add	r1, sp, #12
    3a2a:	4620      	mov	r0, r4
    3a2c:	f003 f906 	bl	6c3c <user_callback>
    3a30:	e673      	b.n	371a <uarte_nrfx_isr_async+0x2a>
			amount += data->async->tx_cache_offset;
    3a32:	461e      	mov	r6, r3
    3a34:	e7de      	b.n	39f4 <uarte_nrfx_isr_async+0x304>
    3a36:	bf00      	nop
    3a38:	000f423f 	.word	0x000f423f
    3a3c:	000f4240 	.word	0x000f4240

00003a40 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3a40:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3a42:	2301      	movs	r3, #1
    3a44:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3a46:	4a11      	ldr	r2, [pc, #68]	; (3a8c <compare_int_lock+0x4c>)
    3a48:	f3bf 8f5b 	dmb	ish
    3a4c:	43dc      	mvns	r4, r3
    3a4e:	e852 1f00 	ldrex	r1, [r2]
    3a52:	ea01 0c04 	and.w	ip, r1, r4
    3a56:	e842 ce00 	strex	lr, ip, [r2]
    3a5a:	f1be 0f00 	cmp.w	lr, #0
    3a5e:	d1f6      	bne.n	3a4e <compare_int_lock+0xe>
    3a60:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3a64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3a68:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3a6c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3a70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3a74:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3a78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a7c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3a80:	420b      	tst	r3, r1
}
    3a82:	bf14      	ite	ne
    3a84:	2001      	movne	r0, #1
    3a86:	2000      	moveq	r0, #0
    3a88:	bd10      	pop	{r4, pc}
    3a8a:	bf00      	nop
    3a8c:	20001048 	.word	0x20001048

00003a90 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3a90:	4919      	ldr	r1, [pc, #100]	; (3af8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x60>)
{
    3a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a94:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3a96:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3a9a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3a9c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3aa0:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3aa4:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3aa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3aaa:	d222      	bcs.n	3af2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x5a>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3aac:	4b13      	ldr	r3, [pc, #76]	; (3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>)
    3aae:	681b      	ldr	r3, [r3, #0]
    3ab0:	0a1a      	lsrs	r2, r3, #8
    3ab2:	061b      	lsls	r3, r3, #24
    3ab4:	195e      	adds	r6, r3, r5
    3ab6:	4b12      	ldr	r3, [pc, #72]	; (3b00 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x68>)
    3ab8:	f142 0700 	adc.w	r7, r2, #0
    3abc:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    3ac0:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3ac2:	f001 ffe7 	bl	5a94 <sys_clock_announce>
    return p_reg->CC[ch];
    3ac6:	00a3      	lsls	r3, r4, #2
    3ac8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3acc:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3ad0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3ad4:	42aa      	cmp	r2, r5
    3ad6:	d10b      	bne.n	3af0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x58>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3ad8:	b91e      	cbnz	r6, 3ae2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4a>
    p_reg->CC[ch] = cc_val;
    3ada:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3ade:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3ae2:	4b08      	ldr	r3, [pc, #32]	; (3b04 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x6c>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3ae4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3ae8:	fa00 f404 	lsl.w	r4, r0, r4
    3aec:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    3af2:	2600      	movs	r6, #0
    3af4:	e7e5      	b.n	3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
    3af6:	bf00      	nop
    3af8:	200008c8 	.word	0x200008c8
    3afc:	2000104c 	.word	0x2000104c
    3b00:	200008b0 	.word	0x200008b0
    3b04:	40011000 	.word	0x40011000

00003b08 <compare_int_unlock>:
	if (key) {
    3b08:	b319      	cbz	r1, 3b52 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3b0a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    3b0e:	2301      	movs	r3, #1
    3b10:	4a10      	ldr	r2, [pc, #64]	; (3b54 <compare_int_unlock+0x4c>)
    3b12:	4083      	lsls	r3, r0
    3b14:	e852 1f00 	ldrex	r1, [r2]
    3b18:	4319      	orrs	r1, r3
    3b1a:	e842 1c00 	strex	ip, r1, [r2]
    3b1e:	f1bc 0f00 	cmp.w	ip, #0
    3b22:	d1f7      	bne.n	3b14 <compare_int_unlock+0xc>
    3b24:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3b28:	4a0b      	ldr	r2, [pc, #44]	; (3b58 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3b2e:	4083      	lsls	r3, r0
    3b30:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3b34:	4b09      	ldr	r3, [pc, #36]	; (3b5c <compare_int_unlock+0x54>)
    3b36:	f3bf 8f5b 	dmb	ish
    3b3a:	681b      	ldr	r3, [r3, #0]
    3b3c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3b40:	fa23 f000 	lsr.w	r0, r3, r0
    3b44:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b46:	bf42      	ittt	mi
    3b48:	4b05      	ldrmi	r3, [pc, #20]	; (3b60 <compare_int_unlock+0x58>)
    3b4a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3b4e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3b52:	4770      	bx	lr
    3b54:	20001048 	.word	0x20001048
    3b58:	40011000 	.word	0x40011000
    3b5c:	20001044 	.word	0x20001044
    3b60:	e000e100 	.word	0xe000e100

00003b64 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3b64:	4b0d      	ldr	r3, [pc, #52]	; (3b9c <z_nrf_rtc_timer_read+0x38>)
    3b66:	6818      	ldr	r0, [r3, #0]
    3b68:	0a01      	lsrs	r1, r0, #8
    3b6a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3b6c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3b70:	4b0b      	ldr	r3, [pc, #44]	; (3ba0 <z_nrf_rtc_timer_read+0x3c>)
    3b72:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3b76:	1818      	adds	r0, r3, r0
    3b78:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3b80:	d20a      	bcs.n	3b98 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3b82:	4b08      	ldr	r3, [pc, #32]	; (3ba4 <z_nrf_rtc_timer_read+0x40>)
    3b84:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b88:	4290      	cmp	r0, r2
    3b8a:	eb71 0303 	sbcs.w	r3, r1, r3
    3b8e:	d203      	bcs.n	3b98 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3b90:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3b94:	f141 0100 	adc.w	r1, r1, #0
}
    3b98:	4770      	bx	lr
    3b9a:	bf00      	nop
    3b9c:	2000104c 	.word	0x2000104c
    3ba0:	40011000 	.word	0x40011000
    3ba4:	200008b0 	.word	0x200008b0

00003ba8 <compare_set>:
{
    3ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bac:	b085      	sub	sp, #20
    3bae:	4616      	mov	r6, r2
    3bb0:	4698      	mov	r8, r3
    3bb2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    3bb4:	f7ff ff44 	bl	3a40 <compare_int_lock>
    3bb8:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    3bba:	f7ff ffd3 	bl	3b64 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    3bbe:	42b0      	cmp	r0, r6
    3bc0:	eb71 0308 	sbcs.w	r3, r1, r8
    3bc4:	d278      	bcs.n	3cb8 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    3bc6:	4b46      	ldr	r3, [pc, #280]	; (3ce0 <compare_set+0x138>)
    3bc8:	1a30      	subs	r0, r6, r0
    3bca:	eb68 0101 	sbc.w	r1, r8, r1
    3bce:	4298      	cmp	r0, r3
    3bd0:	f171 0300 	sbcs.w	r3, r1, #0
    3bd4:	f080 8081 	bcs.w	3cda <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    3bd8:	4b42      	ldr	r3, [pc, #264]	; (3ce4 <compare_set+0x13c>)
    3bda:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    3bde:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    3be2:	45d8      	cmp	r8, fp
    3be4:	bf08      	it	eq
    3be6:	4556      	cmpeq	r6, sl
    3be8:	d051      	beq.n	3c8e <compare_set+0xe6>
    3bea:	ea4f 0985 	mov.w	r9, r5, lsl #2
    3bee:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3bf2:	f105 0750 	add.w	r7, r5, #80	; 0x50
    3bf6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    3bfa:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3bfc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3c00:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3c04:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    3c06:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    3c0a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3c0e:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    3c10:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3c14:	4b34      	ldr	r3, [pc, #208]	; (3ce8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3c16:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3c1a:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    3c1c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3c20:	1a40      	subs	r0, r0, r1
    3c22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3c26:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3c2a:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    3c2c:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    3c30:	d107      	bne.n	3c42 <compare_set+0x9a>
    3c32:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3c36:	2013      	movs	r0, #19
    3c38:	f003 fd5f 	bl	76fa <z_impl_k_busy_wait>
    3c3c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    3c40:	4b29      	ldr	r3, [pc, #164]	; (3ce8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3c42:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3c46:	eba4 000c 	sub.w	r0, r4, ip
    3c4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    3c4e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3c52:	bf88      	it	hi
    3c54:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3c56:	2000      	movs	r0, #0
    3c58:	6038      	str	r0, [r7, #0]
    3c5a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    3c5c:	9801      	ldr	r0, [sp, #4]
    3c5e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3c62:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3c66:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3c6a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3c6e:	4281      	cmp	r1, r0
    3c70:	d006      	beq.n	3c80 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    3c72:	1a20      	subs	r0, r4, r0
    3c74:	3802      	subs	r0, #2
    3c76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3c7a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3c7e:	d819      	bhi.n	3cb4 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    3c80:	1aa4      	subs	r4, r4, r2
    3c82:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3c86:	eb14 0a06 	adds.w	sl, r4, r6
    3c8a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    3c8e:	4915      	ldr	r1, [pc, #84]	; (3ce4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    3c90:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    3c92:	012b      	lsls	r3, r5, #4
    3c94:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    3c98:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    3c9c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    3c9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3ca0:	6053      	str	r3, [r2, #4]
	return ret;
    3ca2:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    3ca4:	4628      	mov	r0, r5
    3ca6:	9900      	ldr	r1, [sp, #0]
    3ca8:	f7ff ff2e 	bl	3b08 <compare_int_unlock>
}
    3cac:	4620      	mov	r0, r4
    3cae:	b005      	add	sp, #20
    3cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3cb4:	4620      	mov	r0, r4
    3cb6:	e7b1      	b.n	3c1c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    3cb8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3cba:	4a0c      	ldr	r2, [pc, #48]	; (3cec <compare_set+0x144>)
    3cbc:	f3bf 8f5b 	dmb	ish
    3cc0:	40ab      	lsls	r3, r5
    3cc2:	e852 1f00 	ldrex	r1, [r2]
    3cc6:	4319      	orrs	r1, r3
    3cc8:	e842 1000 	strex	r0, r1, [r2]
    3ccc:	2800      	cmp	r0, #0
    3cce:	d1f8      	bne.n	3cc2 <compare_set+0x11a>
    3cd0:	f3bf 8f5b 	dmb	ish
    3cd4:	46b2      	mov	sl, r6
    3cd6:	46c3      	mov	fp, r8
    3cd8:	e7d9      	b.n	3c8e <compare_set+0xe6>
			return -EINVAL;
    3cda:	f06f 0415 	mvn.w	r4, #21
    3cde:	e7e1      	b.n	3ca4 <compare_set+0xfc>
    3ce0:	01000001 	.word	0x01000001
    3ce4:	200008b8 	.word	0x200008b8
    3ce8:	40011000 	.word	0x40011000
    3cec:	20001044 	.word	0x20001044

00003cf0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    3cf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    3cf2:	4b19      	ldr	r3, [pc, #100]	; (3d58 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    3cf4:	4d19      	ldr	r5, [pc, #100]	; (3d5c <sys_clock_driver_init+0x6c>)
    3cf6:	2400      	movs	r4, #0
    3cf8:	f04f 30ff 	mov.w	r0, #4294967295
    3cfc:	f04f 31ff 	mov.w	r1, #4294967295
    3d00:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3d04:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3d0c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3d10:	4b13      	ldr	r3, [pc, #76]	; (3d60 <sys_clock_driver_init+0x70>)
    3d12:	2602      	movs	r6, #2
    3d14:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3d18:	2101      	movs	r1, #1
    3d1a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3d1e:	2011      	movs	r0, #17
    3d20:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3d24:	4622      	mov	r2, r4
    3d26:	f7fe fa09 	bl	213c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3d2a:	2011      	movs	r0, #17
    3d2c:	f7fe f9e8 	bl	2100 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3d30:	4a0c      	ldr	r2, [pc, #48]	; (3d64 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3d32:	2301      	movs	r3, #1
    3d34:	60ab      	str	r3, [r5, #8]
    3d36:	602b      	str	r3, [r5, #0]
    3d38:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3d3a:	4b0b      	ldr	r3, [pc, #44]	; (3d68 <sys_clock_driver_init+0x78>)
    3d3c:	4a0b      	ldr	r2, [pc, #44]	; (3d6c <sys_clock_driver_init+0x7c>)
    3d3e:	9300      	str	r3, [sp, #0]
    3d40:	9401      	str	r4, [sp, #4]
    3d42:	2300      	movs	r3, #0
    3d44:	4620      	mov	r0, r4
    3d46:	f7ff ff2f 	bl	3ba8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3d4a:	4630      	mov	r0, r6
    3d4c:	f7ff f89e 	bl	2e8c <z_nrf_clock_control_lf_on>

	return 0;
}
    3d50:	4620      	mov	r0, r4
    3d52:	b002      	add	sp, #8
    3d54:	bd70      	pop	{r4, r5, r6, pc}
    3d56:	bf00      	nop
    3d58:	200008b8 	.word	0x200008b8
    3d5c:	40011000 	.word	0x40011000
    3d60:	e000e100 	.word	0xe000e100
    3d64:	20001048 	.word	0x20001048
    3d68:	00003a91 	.word	0x00003a91
    3d6c:	007fffff 	.word	0x007fffff

00003d70 <rtc_nrf_isr>:
{
    3d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3d74:	4c35      	ldr	r4, [pc, #212]	; (3e4c <rtc_nrf_isr+0xdc>)
    3d76:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3d7a:	079a      	lsls	r2, r3, #30
    3d7c:	d50b      	bpl.n	3d96 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3d7e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3d82:	b143      	cbz	r3, 3d96 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3d84:	4a32      	ldr	r2, [pc, #200]	; (3e50 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3d86:	2300      	movs	r3, #0
    3d88:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3d8c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3d90:	6813      	ldr	r3, [r2, #0]
    3d92:	3301      	adds	r3, #1
    3d94:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3d96:	f04f 0320 	mov.w	r3, #32
    3d9a:	f3ef 8211 	mrs	r2, BASEPRI
    3d9e:	f383 8812 	msr	BASEPRI_MAX, r3
    3da2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3da6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3daa:	03db      	lsls	r3, r3, #15
    3dac:	d512      	bpl.n	3dd4 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3dae:	f3bf 8f5b 	dmb	ish
    3db2:	4b28      	ldr	r3, [pc, #160]	; (3e54 <rtc_nrf_isr+0xe4>)
    3db4:	e853 1f00 	ldrex	r1, [r3]
    3db8:	f021 0001 	bic.w	r0, r1, #1
    3dbc:	e843 0600 	strex	r6, r0, [r3]
    3dc0:	2e00      	cmp	r6, #0
    3dc2:	d1f7      	bne.n	3db4 <rtc_nrf_isr+0x44>
    3dc4:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3dc8:	2900      	cmp	r1, #0
    3dca:	d136      	bne.n	3e3a <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3dcc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    3dd0:	2b00      	cmp	r3, #0
    3dd2:	d132      	bne.n	3e3a <rtc_nrf_isr+0xca>
{
    3dd4:	2300      	movs	r3, #0
	__asm__ volatile(
    3dd6:	f382 8811 	msr	BASEPRI, r2
    3dda:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3dde:	b34b      	cbz	r3, 3e34 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    3de0:	f7ff fec0 	bl	3b64 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3de4:	f04f 0320 	mov.w	r3, #32
    3de8:	f3ef 8c11 	mrs	ip, BASEPRI
    3dec:	f383 8812 	msr	BASEPRI_MAX, r3
    3df0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3df4:	4b18      	ldr	r3, [pc, #96]	; (3e58 <rtc_nrf_isr+0xe8>)
    3df6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3dfa:	42b0      	cmp	r0, r6
    3dfc:	eb71 0207 	sbcs.w	r2, r1, r7
    3e00:	f04f 0200 	mov.w	r2, #0
    3e04:	d320      	bcc.n	3e48 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3e06:	f04f 38ff 	mov.w	r8, #4294967295
    3e0a:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    3e0e:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3e12:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3e16:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3e1c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3e20:	f38c 8811 	msr	BASEPRI, ip
    3e24:	f3bf 8f6f 	isb	sy
		if (handler) {
    3e28:	b121      	cbz	r1, 3e34 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    3e2a:	9500      	str	r5, [sp, #0]
    3e2c:	4632      	mov	r2, r6
    3e2e:	463b      	mov	r3, r7
    3e30:	2000      	movs	r0, #0
    3e32:	4788      	blx	r1
}
    3e34:	b003      	add	sp, #12
    3e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3e3a:	2300      	movs	r3, #0
    3e3c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    3e40:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3e44:	2301      	movs	r3, #1
}
    3e46:	e7c6      	b.n	3dd6 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3e48:	4611      	mov	r1, r2
    3e4a:	e7e9      	b.n	3e20 <rtc_nrf_isr+0xb0>
    3e4c:	40011000 	.word	0x40011000
    3e50:	2000104c 	.word	0x2000104c
    3e54:	20001044 	.word	0x20001044
    3e58:	200008b8 	.word	0x200008b8

00003e5c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3e5c:	1c43      	adds	r3, r0, #1
{
    3e5e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3e60:	d021      	beq.n	3ea6 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3e62:	2801      	cmp	r0, #1
    3e64:	dd21      	ble.n	3eaa <sys_clock_set_timeout+0x4e>
    3e66:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3e6a:	da20      	bge.n	3eae <sys_clock_set_timeout+0x52>
    3e6c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3e6e:	f7ff fe79 	bl	3b64 <z_nrf_rtc_timer_read>
    3e72:	4b10      	ldr	r3, [pc, #64]	; (3eb4 <sys_clock_set_timeout+0x58>)
    3e74:	e9d3 1300 	ldrd	r1, r3, [r3]
    3e78:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3e7a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3e7e:	bf28      	it	cs
    3e80:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3e82:	3001      	adds	r0, #1
    3e84:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3e86:	480c      	ldr	r0, [pc, #48]	; (3eb8 <sys_clock_set_timeout+0x5c>)
    3e88:	4282      	cmp	r2, r0
    3e8a:	bf28      	it	cs
    3e8c:	4602      	movcs	r2, r0
    3e8e:	1852      	adds	r2, r2, r1
    3e90:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3e94:	4909      	ldr	r1, [pc, #36]	; (3ebc <sys_clock_set_timeout+0x60>)
    3e96:	9001      	str	r0, [sp, #4]
    3e98:	9100      	str	r1, [sp, #0]
    3e9a:	f143 0300 	adc.w	r3, r3, #0
    3e9e:	f7ff fe83 	bl	3ba8 <compare_set>
}
    3ea2:	b002      	add	sp, #8
    3ea4:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3ea6:	4804      	ldr	r0, [pc, #16]	; (3eb8 <sys_clock_set_timeout+0x5c>)
    3ea8:	e7e0      	b.n	3e6c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3eaa:	2400      	movs	r4, #0
    3eac:	e7df      	b.n	3e6e <sys_clock_set_timeout+0x12>
    3eae:	4c02      	ldr	r4, [pc, #8]	; (3eb8 <sys_clock_set_timeout+0x5c>)
    3eb0:	e7dd      	b.n	3e6e <sys_clock_set_timeout+0x12>
    3eb2:	bf00      	nop
    3eb4:	200008c8 	.word	0x200008c8
    3eb8:	007fffff 	.word	0x007fffff
    3ebc:	00003a91 	.word	0x00003a91

00003ec0 <sys_clock_elapsed>:
{
    3ec0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3ec2:	f7ff fe4f 	bl	3b64 <z_nrf_rtc_timer_read>
    3ec6:	4b02      	ldr	r3, [pc, #8]	; (3ed0 <sys_clock_elapsed+0x10>)
    3ec8:	681b      	ldr	r3, [r3, #0]
}
    3eca:	1ac0      	subs	r0, r0, r3
    3ecc:	bd08      	pop	{r3, pc}
    3ece:	bf00      	nop
    3ed0:	200008c8 	.word	0x200008c8

00003ed4 <nrf_gpio_pin_clear>:
    *p_pin = pin_number & 0x1F;
    3ed4:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3ed8:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    3eda:	2801      	cmp	r0, #1
    3edc:	4b04      	ldr	r3, [pc, #16]	; (3ef0 <nrf_gpio_pin_clear+0x1c>)
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3ede:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3ee2:	bf18      	it	ne
    3ee4:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    3ee8:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    3eea:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    3eee:	4770      	bx	lr
    3ef0:	50000300 	.word	0x50000300

00003ef4 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    3ef4:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3ef8:	2b00      	cmp	r3, #0
{
    3efa:	b530      	push	{r4, r5, lr}
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    3efc:	bf07      	ittee	eq
    3efe:	4614      	moveq	r4, r2
    3f00:	460d      	moveq	r5, r1
    3f02:	2401      	movne	r4, #1
    3f04:	2500      	movne	r5, #0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    3f06:	f3c0 1281 	ubfx	r2, r0, #6, #2
    *p_pin = pin_number & 0x1F;
    3f0a:	f000 011f 	and.w	r1, r0, #31
        case 1: return NRF_P1;
    3f0e:	f010 0f20 	tst.w	r0, #32
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    3f12:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3f16:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
        case 1: return NRF_P1;
    3f1a:	4b06      	ldr	r3, [pc, #24]	; (3f34 <nrf_pin_configure+0x40>)
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3f1c:	ea42 0205 	orr.w	r2, r2, r5
        case 1: return NRF_P1;
    3f20:	bf08      	it	eq
    3f22:	f04f 43a0 	moveq.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    3f26:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    3f2a:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    3f2e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    3f32:	bd30      	pop	{r4, r5, pc}
    3f34:	50000300 	.word	0x50000300

00003f38 <nrf_gpio_pin_set>:
    *p_pin = pin_number & 0x1F;
    3f38:	f000 011f 	and.w	r1, r0, #31
    return pin_number >> 5;
    3f3c:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    3f3e:	2801      	cmp	r0, #1
    3f40:	4b04      	ldr	r3, [pc, #16]	; (3f54 <nrf_gpio_pin_set+0x1c>)
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3f42:	f04f 0201 	mov.w	r2, #1
        case 1: return NRF_P1;
    3f46:	bf18      	it	ne
    3f48:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    3f4c:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    3f4e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
}
    3f52:	4770      	bx	lr
    3f54:	50000300 	.word	0x50000300

00003f58 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    3f58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    3f5a:	f7fd fb2d 	bl	15b8 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3f5e:	4b07      	ldr	r3, [pc, #28]	; (3f7c <k_sys_fatal_error_handler+0x24>)
    3f60:	9305      	str	r3, [sp, #20]
    3f62:	2302      	movs	r3, #2
    3f64:	9304      	str	r3, [sp, #16]
    3f66:	4806      	ldr	r0, [pc, #24]	; (3f80 <k_sys_fatal_error_handler+0x28>)
    3f68:	2300      	movs	r3, #0
    3f6a:	aa04      	add	r2, sp, #16
    3f6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f70:	f002 fcae 	bl	68d0 <z_impl_z_log_msg2_static_create>
		sys_arch_reboot(0);
    3f74:	2000      	movs	r0, #0
    3f76:	f7fe fe79 	bl	2c6c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3f7a:	bf00      	nop
    3f7c:	000083a2 	.word	0x000083a2
    3f80:	000079cc 	.word	0x000079cc

00003f84 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3f84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    3f88:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    3f8c:	2a08      	cmp	r2, #8
    3f8e:	d106      	bne.n	3f9e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3f90:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    3f94:	2b05      	cmp	r3, #5
    3f96:	d802      	bhi.n	3f9e <nrf52_errata_103+0x1a>
    3f98:	4a02      	ldr	r2, [pc, #8]	; (3fa4 <nrf52_errata_103+0x20>)
    3f9a:	5cd0      	ldrb	r0, [r2, r3]
    3f9c:	4770      	bx	lr
        return false;
    3f9e:	2000      	movs	r0, #0
}
    3fa0:	4770      	bx	lr
    3fa2:	bf00      	nop
    3fa4:	000083c5 	.word	0x000083c5

00003fa8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3fa8:	4a02      	ldr	r2, [pc, #8]	; (3fb4 <nvmc_wait+0xc>)
    3faa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    3fae:	2b00      	cmp	r3, #0
    3fb0:	d0fb      	beq.n	3faa <nvmc_wait+0x2>
}
    3fb2:	4770      	bx	lr
    3fb4:	4001e000 	.word	0x4001e000

00003fb8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3fb8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    3fba:	f003 f95e 	bl	727a <nrf52_errata_136>
    3fbe:	b140      	cbz	r0, 3fd2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    3fc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3fc4:	2200      	movs	r2, #0
    3fc6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    3fca:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    3fce:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    3fd2:	f003 f952 	bl	727a <nrf52_errata_136>
    3fd6:	2800      	cmp	r0, #0
    3fd8:	d046      	beq.n	4068 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3fde:	4b60      	ldr	r3, [pc, #384]	; (4160 <SystemInit+0x1a8>)
    3fe0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3fe4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3fe8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3fec:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3ff0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3ff4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3ff8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3ffc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4000:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4004:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    4008:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    400c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4010:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4014:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    4018:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    401c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4020:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4024:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    4028:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    402c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4030:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4034:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    4038:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    403c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4040:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4044:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    4048:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    404c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4050:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4054:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    4058:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    405c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4060:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4064:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    4068:	f7ff ff8c 	bl	3f84 <nrf52_errata_103>
    406c:	b118      	cbz	r0, 4076 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    406e:	4b3d      	ldr	r3, [pc, #244]	; (4164 <SystemInit+0x1ac>)
    4070:	4a3d      	ldr	r2, [pc, #244]	; (4168 <SystemInit+0x1b0>)
    4072:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    4076:	f7ff ff85 	bl	3f84 <nrf52_errata_103>
    407a:	b118      	cbz	r0, 4084 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    407c:	4b3b      	ldr	r3, [pc, #236]	; (416c <SystemInit+0x1b4>)
    407e:	22fb      	movs	r2, #251	; 0xfb
    4080:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    4084:	f7ff ff7e 	bl	3f84 <nrf52_errata_103>
    4088:	b170      	cbz	r0, 40a8 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    408a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    408e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4092:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    4096:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    409a:	f022 020f 	bic.w	r2, r2, #15
    409e:	f003 030f 	and.w	r3, r3, #15
    40a2:	4313      	orrs	r3, r2
    40a4:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    40a8:	f7ff ff6c 	bl	3f84 <nrf52_errata_103>
    40ac:	b120      	cbz	r0, 40b8 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    40ae:	4b30      	ldr	r3, [pc, #192]	; (4170 <SystemInit+0x1b8>)
    40b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    40b4:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    40b8:	f003 f8df 	bl	727a <nrf52_errata_136>
    40bc:	b148      	cbz	r0, 40d2 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    40be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40c2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    40c6:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    40c8:	bf44      	itt	mi
    40ca:	f06f 0201 	mvnmi.w	r2, #1
    40ce:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    40d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    40d6:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    40da:	2a08      	cmp	r2, #8
    40dc:	d10e      	bne.n	40fc <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    40de:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    40e2:	2b05      	cmp	r3, #5
    40e4:	d802      	bhi.n	40ec <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    40e6:	4a23      	ldr	r2, [pc, #140]	; (4174 <SystemInit+0x1bc>)
    40e8:	5cd3      	ldrb	r3, [r2, r3]
    40ea:	b13b      	cbz	r3, 40fc <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    40ec:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    40f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    40f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40f8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    40fc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4100:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4104:	2a00      	cmp	r2, #0
    4106:	db03      	blt.n	4110 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    4108:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    410c:	2b00      	cmp	r3, #0
    410e:	da22      	bge.n	4156 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4110:	4919      	ldr	r1, [pc, #100]	; (4178 <SystemInit+0x1c0>)
    4112:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4114:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4118:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    411c:	2412      	movs	r4, #18
    nvmc_wait();
    411e:	f7ff ff43 	bl	3fa8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4122:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4126:	f7ff ff3f 	bl	3fa8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    412a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    412e:	f7ff ff3b 	bl	3fa8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4132:	2300      	movs	r3, #0
    4134:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4138:	f7ff ff36 	bl	3fa8 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    413c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4140:	490e      	ldr	r1, [pc, #56]	; (417c <SystemInit+0x1c4>)
    4142:	4b0f      	ldr	r3, [pc, #60]	; (4180 <SystemInit+0x1c8>)
    4144:	68ca      	ldr	r2, [r1, #12]
    4146:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    414a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    414c:	60cb      	str	r3, [r1, #12]
    414e:	f3bf 8f4f 	dsb	sy
    __NOP();
    4152:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4154:	e7fd      	b.n	4152 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4156:	4b0b      	ldr	r3, [pc, #44]	; (4184 <SystemInit+0x1cc>)
    4158:	4a0b      	ldr	r2, [pc, #44]	; (4188 <SystemInit+0x1d0>)
    415a:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    415c:	bd10      	pop	{r4, pc}
    415e:	bf00      	nop
    4160:	4000c000 	.word	0x4000c000
    4164:	40005000 	.word	0x40005000
    4168:	00038148 	.word	0x00038148
    416c:	4000f000 	.word	0x4000f000
    4170:	40029000 	.word	0x40029000
    4174:	000083bf 	.word	0x000083bf
    4178:	4001e000 	.word	0x4001e000
    417c:	e000ed00 	.word	0xe000ed00
    4180:	05fa0004 	.word	0x05fa0004
    4184:	20000064 	.word	0x20000064
    4188:	03d09000 	.word	0x03d09000

0000418c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    418c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    418e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4190:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4192:	fab2 f382 	clz	r3, r2
    4196:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    419a:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    419c:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    419e:	d014      	beq.n	41ca <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    41a0:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    41a4:	fa05 f303 	lsl.w	r3, r5, r3
    41a8:	ea22 0303 	bic.w	r3, r2, r3
    41ac:	e850 6f00 	ldrex	r6, [r0]
    41b0:	4296      	cmp	r6, r2
    41b2:	d104      	bne.n	41be <nrfx_flag32_alloc+0x32>
    41b4:	e840 3c00 	strex	ip, r3, [r0]
    41b8:	f1bc 0f00 	cmp.w	ip, #0
    41bc:	d1f6      	bne.n	41ac <nrfx_flag32_alloc+0x20>
    41be:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    41c2:	d1e5      	bne.n	4190 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    41c4:	4802      	ldr	r0, [pc, #8]	; (41d0 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    41c6:	700c      	strb	r4, [r1, #0]
}
    41c8:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    41ca:	4802      	ldr	r0, [pc, #8]	; (41d4 <nrfx_flag32_alloc+0x48>)
    41cc:	e7fc      	b.n	41c8 <nrfx_flag32_alloc+0x3c>
    41ce:	bf00      	nop
    41d0:	0bad0000 	.word	0x0bad0000
    41d4:	0bad0002 	.word	0x0bad0002

000041d8 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    41d8:	6803      	ldr	r3, [r0, #0]
    41da:	40cb      	lsrs	r3, r1
    41dc:	07db      	lsls	r3, r3, #31
{
    41de:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    41e0:	d415      	bmi.n	420e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    41e2:	2301      	movs	r3, #1
    41e4:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    41e8:	6803      	ldr	r3, [r0, #0]
    41ea:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    41ee:	ea41 0203 	orr.w	r2, r1, r3
    41f2:	e850 4f00 	ldrex	r4, [r0]
    41f6:	429c      	cmp	r4, r3
    41f8:	d104      	bne.n	4204 <nrfx_flag32_free+0x2c>
    41fa:	e840 2c00 	strex	ip, r2, [r0]
    41fe:	f1bc 0f00 	cmp.w	ip, #0
    4202:	d1f6      	bne.n	41f2 <nrfx_flag32_free+0x1a>
    4204:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4208:	d1ee      	bne.n	41e8 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    420a:	4802      	ldr	r0, [pc, #8]	; (4214 <nrfx_flag32_free+0x3c>)
}
    420c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    420e:	4802      	ldr	r0, [pc, #8]	; (4218 <nrfx_flag32_free+0x40>)
    4210:	e7fc      	b.n	420c <nrfx_flag32_free+0x34>
    4212:	bf00      	nop
    4214:	0bad0000 	.word	0x0bad0000
    4218:	0bad0004 	.word	0x0bad0004

0000421c <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    421c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    421e:	4604      	mov	r4, r0
    4220:	b118      	cbz	r0, 422a <clock_stop+0xe>
    4222:	2801      	cmp	r0, #1
    4224:	d029      	beq.n	427a <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4226:	b003      	add	sp, #12
    4228:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    422a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    422e:	2202      	movs	r2, #2
    4230:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4234:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    4238:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    423c:	2201      	movs	r2, #1
    423e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4240:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4242:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4244:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4248:	bf14      	ite	ne
    424a:	2500      	movne	r5, #0
    424c:	f10d 0507 	addeq.w	r5, sp, #7
    4250:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4254:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    4258:	b1d4      	cbz	r4, 4290 <clock_stop+0x74>
    425a:	2c01      	cmp	r4, #1
    425c:	d1e3      	bne.n	4226 <clock_stop+0xa>
            if (p_clk_src != NULL)
    425e:	b125      	cbz	r5, 426a <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4260:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4264:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4268:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    426a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    426e:	03db      	lsls	r3, r3, #15
    4270:	d418      	bmi.n	42a4 <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
    4272:	4b13      	ldr	r3, [pc, #76]	; (42c0 <clock_stop+0xa4>)
    4274:	2200      	movs	r2, #0
    4276:	715a      	strb	r2, [r3, #5]
    4278:	e7d5      	b.n	4226 <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    427a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    427e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    4280:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4284:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4288:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    428c:	6058      	str	r0, [r3, #4]
}
    428e:	e7d7      	b.n	4240 <clock_stop+0x24>
            if (p_clk_src != NULL)
    4290:	b125      	cbz	r5, 429c <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4292:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4296:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    429a:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    429c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    42a0:	03da      	lsls	r2, r3, #15
    42a2:	d5c0      	bpl.n	4226 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    42a4:	b92d      	cbnz	r5, 42b2 <clock_stop+0x96>
    42a6:	2001      	movs	r0, #1
    42a8:	f002 fff1 	bl	728e <nrfx_busy_wait>
    42ac:	3f01      	subs	r7, #1
    42ae:	d1d3      	bne.n	4258 <clock_stop+0x3c>
    42b0:	e003      	b.n	42ba <clock_stop+0x9e>
    42b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    42b6:	2b01      	cmp	r3, #1
    42b8:	d0f5      	beq.n	42a6 <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    42ba:	2c01      	cmp	r4, #1
    42bc:	d0d9      	beq.n	4272 <clock_stop+0x56>
    42be:	e7b2      	b.n	4226 <clock_stop+0xa>
    42c0:	20001050 	.word	0x20001050

000042c4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    42c4:	4b04      	ldr	r3, [pc, #16]	; (42d8 <nrfx_clock_init+0x14>)
    42c6:	791a      	ldrb	r2, [r3, #4]
    42c8:	b922      	cbnz	r2, 42d4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    42ca:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    42cc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    42ce:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    42d0:	4802      	ldr	r0, [pc, #8]	; (42dc <nrfx_clock_init+0x18>)
    42d2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    42d4:	4802      	ldr	r0, [pc, #8]	; (42e0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    42d6:	4770      	bx	lr
    42d8:	20001050 	.word	0x20001050
    42dc:	0bad0000 	.word	0x0bad0000
    42e0:	0bad000c 	.word	0x0bad000c

000042e4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    42e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    42e8:	b510      	push	{r4, lr}
    42ea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    42ee:	b16a      	cbz	r2, 430c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42f0:	2200      	movs	r2, #0
    42f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    42f6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    42fa:	2201      	movs	r2, #1
    42fc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4300:	4b11      	ldr	r3, [pc, #68]	; (4348 <nrfx_power_clock_irq_handler+0x64>)
    4302:	7958      	ldrb	r0, [r3, #5]
    4304:	b910      	cbnz	r0, 430c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    4306:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4308:	681b      	ldr	r3, [r3, #0]
    430a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    430c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4310:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4314:	b172      	cbz	r2, 4334 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4316:	2200      	movs	r2, #0
    4318:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    431c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4320:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4324:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4328:	0792      	lsls	r2, r2, #30
    432a:	d104      	bne.n	4336 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    432c:	2201      	movs	r2, #1
    432e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4332:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4334:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    4336:	2202      	movs	r2, #2
    4338:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    433c:	4b02      	ldr	r3, [pc, #8]	; (4348 <nrfx_power_clock_irq_handler+0x64>)
}
    433e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4342:	681b      	ldr	r3, [r3, #0]
    4344:	2001      	movs	r0, #1
    4346:	4718      	bx	r3
    4348:	20001050 	.word	0x20001050

0000434c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    434c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    434e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    4352:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
    4354:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
    4356:	6002      	str	r2, [r0, #0]
}
    4358:	4802      	ldr	r0, [pc, #8]	; (4364 <nrf_gpio_pin_port_decode+0x18>)
    435a:	bf18      	it	ne
    435c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    4360:	4770      	bx	lr
    4362:	bf00      	nop
    4364:	50000300 	.word	0x50000300

00004368 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4368:	4b03      	ldr	r3, [pc, #12]	; (4378 <pin_in_use_by_te+0x10>)
    436a:	3008      	adds	r0, #8
    436c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4370:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4374:	4770      	bx	lr
    4376:	bf00      	nop
    4378:	20000068 	.word	0x20000068

0000437c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    437c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    437e:	f100 0308 	add.w	r3, r0, #8
    4382:	4c0c      	ldr	r4, [pc, #48]	; (43b4 <call_handler+0x38>)
    4384:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4388:	05da      	lsls	r2, r3, #23
{
    438a:	4605      	mov	r5, r0
    438c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    438e:	d507      	bpl.n	43a0 <call_handler+0x24>
    4390:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4394:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4398:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    439c:	6852      	ldr	r2, [r2, #4]
    439e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    43a0:	68a3      	ldr	r3, [r4, #8]
    43a2:	b12b      	cbz	r3, 43b0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    43a4:	68e2      	ldr	r2, [r4, #12]
    43a6:	4631      	mov	r1, r6
    43a8:	4628      	mov	r0, r5
    }
}
    43aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    43ae:	4718      	bx	r3
}
    43b0:	bd70      	pop	{r4, r5, r6, pc}
    43b2:	bf00      	nop
    43b4:	20000068 	.word	0x20000068

000043b8 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    43b8:	4a12      	ldr	r2, [pc, #72]	; (4404 <release_handler+0x4c>)
    43ba:	3008      	adds	r0, #8
{
    43bc:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    43be:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    43c2:	05d9      	lsls	r1, r3, #23
    43c4:	d51b      	bpl.n	43fe <release_handler+0x46>
    43c6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    43ca:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    43ce:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    43d2:	f102 0410 	add.w	r4, r2, #16
    43d6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    43d8:	f834 3b02 	ldrh.w	r3, [r4], #2
    43dc:	f413 7f80 	tst.w	r3, #256	; 0x100
    43e0:	d003      	beq.n	43ea <release_handler+0x32>
    43e2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    43e6:	4299      	cmp	r1, r3
    43e8:	d009      	beq.n	43fe <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    43ea:	3001      	adds	r0, #1
    43ec:	2830      	cmp	r0, #48	; 0x30
    43ee:	d1f3      	bne.n	43d8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    43f0:	2300      	movs	r3, #0
    43f2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    43f6:	4804      	ldr	r0, [pc, #16]	; (4408 <release_handler+0x50>)
}
    43f8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    43fa:	f7ff beed 	b.w	41d8 <nrfx_flag32_free>
}
    43fe:	bc10      	pop	{r4}
    4400:	4770      	bx	lr
    4402:	bf00      	nop
    4404:	20000068 	.word	0x20000068
    4408:	200000dc 	.word	0x200000dc

0000440c <pin_handler_trigger_uninit>:
{
    440c:	b538      	push	{r3, r4, r5, lr}
    440e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4410:	f7ff ffaa 	bl	4368 <pin_in_use_by_te>
    4414:	4c09      	ldr	r4, [pc, #36]	; (443c <pin_handler_trigger_uninit+0x30>)
    4416:	f102 0508 	add.w	r5, r2, #8
    441a:	b140      	cbz	r0, 442e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    441c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4420:	4907      	ldr	r1, [pc, #28]	; (4440 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4422:	0b5b      	lsrs	r3, r3, #13
    4424:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4428:	2000      	movs	r0, #0
    442a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    442e:	4610      	mov	r0, r2
    4430:	f7ff ffc2 	bl	43b8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4434:	2300      	movs	r3, #0
    4436:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    443a:	bd38      	pop	{r3, r4, r5, pc}
    443c:	20000068 	.word	0x20000068
    4440:	40006000 	.word	0x40006000

00004444 <nrfx_gpiote_input_configure>:
{
    4444:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    4448:	4604      	mov	r4, r0
    444a:	4617      	mov	r7, r2
    444c:	461d      	mov	r5, r3
    if (p_input_config)
    444e:	b321      	cbz	r1, 449a <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4450:	4e4e      	ldr	r6, [pc, #312]	; (458c <nrfx_gpiote_input_configure+0x148>)
    4452:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4456:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    445a:	079b      	lsls	r3, r3, #30
    445c:	d506      	bpl.n	446c <nrfx_gpiote_input_configure+0x28>
    445e:	f7ff ff83 	bl	4368 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    4462:	b118      	cbz	r0, 446c <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
    4464:	484a      	ldr	r0, [pc, #296]	; (4590 <nrfx_gpiote_input_configure+0x14c>)
}
    4466:	b004      	add	sp, #16
    4468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    446c:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    446e:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4472:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4476:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    447a:	f10d 020f 	add.w	r2, sp, #15
    447e:	460b      	mov	r3, r1
    4480:	4620      	mov	r0, r4
    4482:	f10d 010e 	add.w	r1, sp, #14
    4486:	f002 ff50 	bl	732a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    448a:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
    448e:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4492:	f043 0301 	orr.w	r3, r3, #1
    4496:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
    449a:	b197      	cbz	r7, 44c2 <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    449c:	4b3b      	ldr	r3, [pc, #236]	; (458c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    449e:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    44a0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    44a2:	f104 0008 	add.w	r0, r4, #8
    44a6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    44aa:	078f      	lsls	r7, r1, #30
    44ac:	d50c      	bpl.n	44c8 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
    44ae:	2a00      	cmp	r2, #0
    44b0:	d1d8      	bne.n	4464 <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    44b2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    44b6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    44ba:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    44be:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    44c2:	bbcd      	cbnz	r5, 4538 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
    44c4:	4833      	ldr	r0, [pc, #204]	; (4594 <nrfx_gpiote_input_configure+0x150>)
    44c6:	e7ce      	b.n	4466 <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    44c8:	f021 0120 	bic.w	r1, r1, #32
    44cc:	04c9      	lsls	r1, r1, #19
    44ce:	0cc9      	lsrs	r1, r1, #19
    44d0:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    44d4:	2a00      	cmp	r2, #0
    44d6:	d0ec      	beq.n	44b2 <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
    44d8:	2e03      	cmp	r6, #3
    44da:	d8c3      	bhi.n	4464 <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
    44dc:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    44de:	b92e      	cbnz	r6, 44ec <nrfx_gpiote_input_configure+0xa8>
    44e0:	4a2d      	ldr	r2, [pc, #180]	; (4598 <nrfx_gpiote_input_configure+0x154>)
    44e2:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    44e6:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    44ea:	e7e2      	b.n	44b2 <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    44ec:	00ba      	lsls	r2, r7, #2
    44ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    44f2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    44f6:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    44fa:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    44fe:	f02c 0c03 	bic.w	ip, ip, #3
    4502:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4506:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    450a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    450e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    4512:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4516:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    451a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    451e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    4522:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    4526:	ea4c 0c0e 	orr.w	ip, ip, lr
    452a:	f041 0120 	orr.w	r1, r1, #32
    452e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    4532:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    4536:	e7bc      	b.n	44b2 <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4538:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    453c:	4620      	mov	r0, r4
    453e:	f7ff ff3b 	bl	43b8 <release_handler>
    if (!handler)
    4542:	2e00      	cmp	r6, #0
    4544:	d0be      	beq.n	44c4 <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4546:	4d11      	ldr	r5, [pc, #68]	; (458c <nrfx_gpiote_input_configure+0x148>)
    4548:	682b      	ldr	r3, [r5, #0]
    454a:	429e      	cmp	r6, r3
    454c:	d104      	bne.n	4558 <nrfx_gpiote_input_configure+0x114>
    454e:	686b      	ldr	r3, [r5, #4]
    4550:	429f      	cmp	r7, r3
    4552:	d101      	bne.n	4558 <nrfx_gpiote_input_configure+0x114>
    4554:	2200      	movs	r2, #0
    4556:	e00a      	b.n	456e <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4558:	4810      	ldr	r0, [pc, #64]	; (459c <nrfx_gpiote_input_configure+0x158>)
    455a:	f10d 010f 	add.w	r1, sp, #15
    455e:	f7ff fe15 	bl	418c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4562:	4b0c      	ldr	r3, [pc, #48]	; (4594 <nrfx_gpiote_input_configure+0x150>)
    4564:	4298      	cmp	r0, r3
    4566:	f47f af7e 	bne.w	4466 <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
    456a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    456e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4572:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4576:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4578:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    457a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    457e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4586:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    458a:	e79b      	b.n	44c4 <nrfx_gpiote_input_configure+0x80>
    458c:	20000068 	.word	0x20000068
    4590:	0bad0004 	.word	0x0bad0004
    4594:	0bad0000 	.word	0x0bad0000
    4598:	40006000 	.word	0x40006000
    459c:	200000dc 	.word	0x200000dc

000045a0 <nrfx_gpiote_output_configure>:
{
    45a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45a2:	4604      	mov	r4, r0
    45a4:	b085      	sub	sp, #20
    45a6:	4615      	mov	r5, r2
    if (p_config)
    45a8:	b319      	cbz	r1, 45f2 <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    45aa:	4e33      	ldr	r6, [pc, #204]	; (4678 <nrfx_gpiote_output_configure+0xd8>)
    45ac:	f100 0708 	add.w	r7, r0, #8
    45b0:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    45b4:	0793      	lsls	r3, r2, #30
    45b6:	d403      	bmi.n	45c0 <nrfx_gpiote_output_configure+0x20>
    45b8:	f7ff fed6 	bl	4368 <pin_in_use_by_te>
    45bc:	2800      	cmp	r0, #0
    45be:	d158      	bne.n	4672 <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    45c0:	f012 0f1c 	tst.w	r2, #28
    45c4:	d002      	beq.n	45cc <nrfx_gpiote_output_configure+0x2c>
    45c6:	784b      	ldrb	r3, [r1, #1]
    45c8:	2b01      	cmp	r3, #1
    45ca:	d052      	beq.n	4672 <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    45cc:	2301      	movs	r3, #1
    45ce:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    45d2:	2300      	movs	r3, #0
    45d4:	e9cd 1300 	strd	r1, r3, [sp]
    45d8:	1c4a      	adds	r2, r1, #1
    45da:	1c8b      	adds	r3, r1, #2
    45dc:	4620      	mov	r0, r4
    45de:	f10d 010f 	add.w	r1, sp, #15
    45e2:	f002 fea2 	bl	732a <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    45e6:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    45ea:	f043 0303 	orr.w	r3, r3, #3
    45ee:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    45f2:	b915      	cbnz	r5, 45fa <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
    45f4:	4821      	ldr	r0, [pc, #132]	; (467c <nrfx_gpiote_output_configure+0xdc>)
}
    45f6:	b005      	add	sp, #20
    45f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    45fa:	4e1f      	ldr	r6, [pc, #124]	; (4678 <nrfx_gpiote_output_configure+0xd8>)
    45fc:	f104 0708 	add.w	r7, r4, #8
    4600:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4604:	0783      	lsls	r3, r0, #30
    4606:	d534      	bpl.n	4672 <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
    4608:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    460c:	4661      	mov	r1, ip
    460e:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4610:	f020 0020 	bic.w	r0, r0, #32
    4614:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4618:	04c0      	lsls	r0, r0, #19
    461a:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    461e:	0cc0      	lsrs	r0, r0, #19
    4620:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4624:	2300      	movs	r3, #0
    4626:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    462a:	786a      	ldrb	r2, [r5, #1]
    462c:	2a00      	cmp	r2, #0
    462e:	d0e1      	beq.n	45f4 <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4630:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4634:	78ad      	ldrb	r5, [r5, #2]
    4636:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    463a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    463e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4642:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4646:	0223      	lsls	r3, r4, #8
    4648:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    464c:	0412      	lsls	r2, r2, #16
    464e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4652:	ea43 030e 	orr.w	r3, r3, lr
    4656:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4658:	052a      	lsls	r2, r5, #20
    465a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    465e:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4662:	4313      	orrs	r3, r2
    4664:	f040 0020 	orr.w	r0, r0, #32
    4668:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    466c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4670:	e7c0      	b.n	45f4 <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
    4672:	4803      	ldr	r0, [pc, #12]	; (4680 <nrfx_gpiote_output_configure+0xe0>)
    4674:	e7bf      	b.n	45f6 <nrfx_gpiote_output_configure+0x56>
    4676:	bf00      	nop
    4678:	20000068 	.word	0x20000068
    467c:	0bad0000 	.word	0x0bad0000
    4680:	0bad0004 	.word	0x0bad0004

00004684 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4684:	4b01      	ldr	r3, [pc, #4]	; (468c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4686:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    468a:	4770      	bx	lr
    468c:	20000068 	.word	0x20000068

00004690 <nrfx_gpiote_channel_get>:
{
    4690:	b508      	push	{r3, lr}
    4692:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4694:	f7ff fe68 	bl	4368 <pin_in_use_by_te>
    4698:	b138      	cbz	r0, 46aa <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    469a:	4b05      	ldr	r3, [pc, #20]	; (46b0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    469c:	4805      	ldr	r0, [pc, #20]	; (46b4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    469e:	3208      	adds	r2, #8
    46a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    46a4:	0b5b      	lsrs	r3, r3, #13
    46a6:	700b      	strb	r3, [r1, #0]
}
    46a8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    46aa:	4803      	ldr	r0, [pc, #12]	; (46b8 <nrfx_gpiote_channel_get+0x28>)
    46ac:	e7fc      	b.n	46a8 <nrfx_gpiote_channel_get+0x18>
    46ae:	bf00      	nop
    46b0:	20000068 	.word	0x20000068
    46b4:	0bad0000 	.word	0x0bad0000
    46b8:	0bad0004 	.word	0x0bad0004

000046bc <nrfx_gpiote_init>:
{
    46bc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    46be:	4c0f      	ldr	r4, [pc, #60]	; (46fc <nrfx_gpiote_init+0x40>)
    46c0:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    46c4:	b9bd      	cbnz	r5, 46f6 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    46c6:	2260      	movs	r2, #96	; 0x60
    46c8:	4629      	mov	r1, r5
    46ca:	f104 0010 	add.w	r0, r4, #16
    46ce:	f002 f97f 	bl	69d0 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    46d2:	2006      	movs	r0, #6
    46d4:	f7fd fd14 	bl	2100 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    46d8:	4b09      	ldr	r3, [pc, #36]	; (4700 <nrfx_gpiote_init+0x44>)
    return err_code;
    46da:	480a      	ldr	r0, [pc, #40]	; (4704 <nrfx_gpiote_init+0x48>)
    46dc:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    46e0:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    46e4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    46e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    46ec:	2301      	movs	r3, #1
    46ee:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    46f2:	6763      	str	r3, [r4, #116]	; 0x74
}
    46f4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    46f6:	4804      	ldr	r0, [pc, #16]	; (4708 <nrfx_gpiote_init+0x4c>)
    46f8:	e7fc      	b.n	46f4 <nrfx_gpiote_init+0x38>
    46fa:	bf00      	nop
    46fc:	20000068 	.word	0x20000068
    4700:	40006000 	.word	0x40006000
    4704:	0bad0000 	.word	0x0bad0000
    4708:	0bad0005 	.word	0x0bad0005

0000470c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    470c:	4b03      	ldr	r3, [pc, #12]	; (471c <nrfx_gpiote_is_init+0x10>)
    470e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4712:	3800      	subs	r0, #0
    4714:	bf18      	it	ne
    4716:	2001      	movne	r0, #1
    4718:	4770      	bx	lr
    471a:	bf00      	nop
    471c:	20000068 	.word	0x20000068

00004720 <nrfx_gpiote_channel_free>:
{
    4720:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4722:	4801      	ldr	r0, [pc, #4]	; (4728 <nrfx_gpiote_channel_free+0x8>)
    4724:	f7ff bd58 	b.w	41d8 <nrfx_flag32_free>
    4728:	200000d8 	.word	0x200000d8

0000472c <nrfx_gpiote_channel_alloc>:
{
    472c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    472e:	4801      	ldr	r0, [pc, #4]	; (4734 <nrfx_gpiote_channel_alloc+0x8>)
    4730:	f7ff bd2c 	b.w	418c <nrfx_flag32_alloc>
    4734:	200000d8 	.word	0x200000d8

00004738 <nrfx_gpiote_trigger_enable>:
{
    4738:	b537      	push	{r0, r1, r2, r4, r5, lr}
    473a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    473c:	f7ff fe14 	bl	4368 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4740:	f104 0208 	add.w	r2, r4, #8
    4744:	4b1e      	ldr	r3, [pc, #120]	; (47c0 <nrfx_gpiote_trigger_enable+0x88>)
    4746:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    474a:	b1e8      	cbz	r0, 4788 <nrfx_gpiote_trigger_enable+0x50>
    474c:	f013 0502 	ands.w	r5, r3, #2
    4750:	d11a      	bne.n	4788 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4752:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4754:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4756:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    475a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    475e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4762:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4766:	6005      	str	r5, [r0, #0]
    4768:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    476a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    476e:	f040 0001 	orr.w	r0, r0, #1
    4772:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4776:	b129      	cbz	r1, 4784 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4778:	2201      	movs	r2, #1
    477a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    477e:	4a11      	ldr	r2, [pc, #68]	; (47c4 <nrfx_gpiote_trigger_enable+0x8c>)
    4780:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4784:	b003      	add	sp, #12
    4786:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4788:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    478c:	2b04      	cmp	r3, #4
    478e:	d012      	beq.n	47b6 <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4790:	2b05      	cmp	r3, #5
    4792:	d012      	beq.n	47ba <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4794:	a801      	add	r0, sp, #4
    4796:	9401      	str	r4, [sp, #4]
    4798:	f7ff fdd8 	bl	434c <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    479c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    479e:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    47a2:	40d9      	lsrs	r1, r3
    47a4:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    47a8:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    47aa:	4620      	mov	r0, r4
}
    47ac:	b003      	add	sp, #12
    47ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    47b2:	f002 be01 	b.w	73b8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    47b6:	2103      	movs	r1, #3
    47b8:	e7f7      	b.n	47aa <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    47ba:	2102      	movs	r1, #2
    47bc:	e7f5      	b.n	47aa <nrfx_gpiote_trigger_enable+0x72>
    47be:	bf00      	nop
    47c0:	20000068 	.word	0x20000068
    47c4:	40006000 	.word	0x40006000

000047c8 <nrfx_gpiote_trigger_disable>:
{
    47c8:	b508      	push	{r3, lr}
    47ca:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    47cc:	f7ff fdcc 	bl	4368 <pin_in_use_by_te>
    47d0:	b1c0      	cbz	r0, 4804 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    47d2:	f102 0108 	add.w	r1, r2, #8
    47d6:	4b0e      	ldr	r3, [pc, #56]	; (4810 <nrfx_gpiote_trigger_disable+0x48>)
    47d8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    47dc:	0799      	lsls	r1, r3, #30
    47de:	d411      	bmi.n	4804 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    47e0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    47e2:	2201      	movs	r2, #1
    47e4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    47e6:	009b      	lsls	r3, r3, #2
    47e8:	490a      	ldr	r1, [pc, #40]	; (4814 <nrfx_gpiote_trigger_disable+0x4c>)
    47ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    47ee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    47f2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    47f6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    47fa:	f022 0203 	bic.w	r2, r2, #3
    47fe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4802:	bd08      	pop	{r3, pc}
    4804:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4808:	2100      	movs	r1, #0
    480a:	4610      	mov	r0, r2
    480c:	f002 bdd4 	b.w	73b8 <nrf_gpio_cfg_sense_set>
    4810:	20000068 	.word	0x20000068
    4814:	40006000 	.word	0x40006000

00004818 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4818:	4b0e      	ldr	r3, [pc, #56]	; (4854 <nrfx_gpiote_pin_uninit+0x3c>)
    481a:	f100 0208 	add.w	r2, r0, #8
{
    481e:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4820:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4824:	07db      	lsls	r3, r3, #31
{
    4826:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4828:	d511      	bpl.n	484e <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    482a:	f7ff ffcd 	bl	47c8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    482e:	4620      	mov	r0, r4
    4830:	f7ff fdec 	bl	440c <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4834:	a801      	add	r0, sp, #4
    4836:	9401      	str	r4, [sp, #4]
    4838:	f7ff fd88 	bl	434c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    483c:	9b01      	ldr	r3, [sp, #4]
    483e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4842:	2202      	movs	r2, #2
    4844:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    4848:	4803      	ldr	r0, [pc, #12]	; (4858 <nrfx_gpiote_pin_uninit+0x40>)
}
    484a:	b002      	add	sp, #8
    484c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    484e:	4803      	ldr	r0, [pc, #12]	; (485c <nrfx_gpiote_pin_uninit+0x44>)
    4850:	e7fb      	b.n	484a <nrfx_gpiote_pin_uninit+0x32>
    4852:	bf00      	nop
    4854:	20000068 	.word	0x20000068
    4858:	0bad0000 	.word	0x0bad0000
    485c:	0bad0004 	.word	0x0bad0004

00004860 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4864:	4b64      	ldr	r3, [pc, #400]	; (49f8 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
    4866:	4865      	ldr	r0, [pc, #404]	; (49fc <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4868:	4965      	ldr	r1, [pc, #404]	; (4a00 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
    486a:	2600      	movs	r6, #0
{
    486c:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    486e:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4870:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4872:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4874:	b135      	cbz	r5, 4884 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    4876:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    487a:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    487c:	bf1e      	ittt	ne
    487e:	601c      	strne	r4, [r3, #0]
    4880:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4882:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4884:	3304      	adds	r3, #4
    4886:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4888:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    488c:	d1f1      	bne.n	4872 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    488e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 49fc <nrfx_gpiote_irq_handler+0x19c>
    4892:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4896:	2b00      	cmp	r3, #0
    4898:	f000 8091 	beq.w	49be <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
    489c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    48a0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    48a4:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    48a6:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    48aa:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    48ae:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    48b0:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    48b4:	2700      	movs	r7, #0
            while (latch[i])
    48b6:	f10d 0910 	add.w	r9, sp, #16
    48ba:	017b      	lsls	r3, r7, #5
    48bc:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    48be:	f04f 0a01 	mov.w	sl, #1
    48c2:	e049      	b.n	4958 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
    48c4:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    48c6:	4a4f      	ldr	r2, [pc, #316]	; (4a04 <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
    48c8:	fa94 f4a4 	rbit	r4, r4
    48cc:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    48d0:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    48d2:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    48d6:	08e0      	lsrs	r0, r4, #3
    48d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    48dc:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    48de:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    48e2:	fa0a fc02 	lsl.w	ip, sl, r2
    48e6:	f819 2000 	ldrb.w	r2, [r9, r0]
    48ea:	ea22 020c 	bic.w	r2, r2, ip
    48ee:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    48f2:	a803      	add	r0, sp, #12
    48f4:	f3c3 0582 	ubfx	r5, r3, #2, #3
    48f8:	0899      	lsrs	r1, r3, #2
    48fa:	f7ff fd27 	bl	434c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    48fe:	9a03      	ldr	r2, [sp, #12]
    4900:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
    4904:	074b      	lsls	r3, r1, #29
    4906:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    490a:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    490c:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    4910:	d529      	bpl.n	4966 <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
    4912:	4620      	mov	r0, r4
    4914:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4916:	b2d5      	uxtb	r5, r2
    4918:	f7ff fd30 	bl	437c <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    491c:	a803      	add	r0, sp, #12
    491e:	9403      	str	r4, [sp, #12]
    4920:	f7ff fd14 	bl	434c <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4924:	9b03      	ldr	r3, [sp, #12]
    4926:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    492a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    492e:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4932:	429d      	cmp	r5, r3
    4934:	d107      	bne.n	4946 <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4936:	2100      	movs	r1, #0
    4938:	4620      	mov	r0, r4
    493a:	f002 fd3d 	bl	73b8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    493e:	4629      	mov	r1, r5
    4940:	4620      	mov	r0, r4
    4942:	f002 fd39 	bl	73b8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4946:	a803      	add	r0, sp, #12
    4948:	9403      	str	r4, [sp, #12]
    494a:	f7ff fcff 	bl	434c <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    494e:	9b03      	ldr	r3, [sp, #12]
    4950:	fa0a f303 	lsl.w	r3, sl, r3
    4954:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    4958:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    495c:	2c00      	cmp	r4, #0
    495e:	d1b1      	bne.n	48c4 <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    4960:	b9cf      	cbnz	r7, 4996 <nrfx_gpiote_irq_handler+0x136>
    4962:	2701      	movs	r7, #1
    4964:	e7a9      	b.n	48ba <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4966:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4968:	bf0c      	ite	eq
    496a:	2103      	moveq	r1, #3
    496c:	2102      	movne	r1, #2
    496e:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4970:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4972:	f002 fd21 	bl	73b8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4976:	2d03      	cmp	r5, #3
    4978:	d004      	beq.n	4984 <nrfx_gpiote_irq_handler+0x124>
    497a:	9a01      	ldr	r2, [sp, #4]
    497c:	2a02      	cmp	r2, #2
    497e:	d106      	bne.n	498e <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4980:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4982:	d1e0      	bne.n	4946 <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
    4984:	4659      	mov	r1, fp
    4986:	4620      	mov	r0, r4
    4988:	f7ff fcf8 	bl	437c <call_handler>
    498c:	e7db      	b.n	4946 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    498e:	2a03      	cmp	r2, #3
    4990:	d1d9      	bne.n	4946 <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4992:	2d02      	cmp	r5, #2
    4994:	e7f5      	b.n	4982 <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4996:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    499a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    499e:	491a      	ldr	r1, [pc, #104]	; (4a08 <nrfx_gpiote_irq_handler+0x1a8>)
    49a0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    49a4:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    49a8:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    49aa:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    49ae:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    49b2:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    49b4:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    49b8:	4313      	orrs	r3, r2
    49ba:	f47f af7b 	bne.w	48b4 <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    49be:	2401      	movs	r4, #1
    while (mask)
    49c0:	b916      	cbnz	r6, 49c8 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    49c2:	b007      	add	sp, #28
    49c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    49c8:	fa96 f3a6 	rbit	r3, r6
    49cc:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    49d0:	fa04 f203 	lsl.w	r2, r4, r3
    49d4:	009b      	lsls	r3, r3, #2
    49d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    49da:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    49de:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    49e2:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    49e6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    49ea:	f3c0 2005 	ubfx	r0, r0, #8, #6
    49ee:	f3c1 4101 	ubfx	r1, r1, #16, #2
    49f2:	f7ff fcc3 	bl	437c <call_handler>
    49f6:	e7e3      	b.n	49c0 <nrfx_gpiote_irq_handler+0x160>
    49f8:	40006100 	.word	0x40006100
    49fc:	40006000 	.word	0x40006000
    4a00:	40006120 	.word	0x40006120
    4a04:	20000068 	.word	0x20000068
    4a08:	50000300 	.word	0x50000300

00004a0c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4a0c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4a0e:	4801      	ldr	r0, [pc, #4]	; (4a14 <nrfx_ppi_channel_alloc+0x8>)
    4a10:	f7ff bbbc 	b.w	418c <nrfx_flag32_alloc>
    4a14:	200000e4 	.word	0x200000e4

00004a18 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4a18:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4a1a:	4c11      	ldr	r4, [pc, #68]	; (4a60 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4a1c:	4a11      	ldr	r2, [pc, #68]	; (4a64 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4a1e:	4912      	ldr	r1, [pc, #72]	; (4a68 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4a20:	2303      	movs	r3, #3
    4a22:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4a24:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4a26:	4b11      	ldr	r3, [pc, #68]	; (4a6c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    4a28:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4a2a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4a2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4a30:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4a32:	2300      	movs	r3, #0
    4a34:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4a36:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4a38:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4a3a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4a3c:	4a0c      	ldr	r2, [pc, #48]	; (4a70 <_DoInit+0x58>)
    4a3e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4a40:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4a42:	2210      	movs	r2, #16
    4a44:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4a46:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4a48:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4a4a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4a4c:	f001 ff9b 	bl	6986 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    4a50:	4908      	ldr	r1, [pc, #32]	; (4a74 <_DoInit+0x5c>)
    4a52:	4620      	mov	r0, r4
    4a54:	f001 ff97 	bl	6986 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    4a58:	2320      	movs	r3, #32
    4a5a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    4a5c:	bd10      	pop	{r4, pc}
    4a5e:	bf00      	nop
    4a60:	20001058 	.word	0x20001058
    4a64:	000083cb 	.word	0x000083cb
    4a68:	000083d4 	.word	0x000083d4
    4a6c:	2000134c 	.word	0x2000134c
    4a70:	2000133c 	.word	0x2000133c
    4a74:	000083d8 	.word	0x000083d8

00004a78 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4a78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    4a7c:	4f23      	ldr	r7, [pc, #140]	; (4b0c <SEGGER_RTT_WriteSkipNoLock+0x94>)
    4a7e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4a82:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    4a84:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4a88:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    4a8a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    4a8c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4a8e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4a90:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4a92:	d834      	bhi.n	4afe <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    4a94:	f8d2 a020 	ldr.w	sl, [r2, #32]
    4a98:	ebaa 0905 	sub.w	r9, sl, r5
    4a9c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    4aa0:	4294      	cmp	r4, r2
    4aa2:	d811      	bhi.n	4ac8 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4aa4:	f04f 0918 	mov.w	r9, #24
    4aa8:	fb06 9309 	mla	r3, r6, r9, r9
    4aac:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    4aae:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4ab0:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    4ab2:	4641      	mov	r1, r8
    4ab4:	4428      	add	r0, r5
    4ab6:	f001 ff80 	bl	69ba <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    4aba:	fb09 7606 	mla	r6, r9, r6, r7
    4abe:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    4ac0:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    4ac2:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    4ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    4ac8:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    4aca:	429c      	cmp	r4, r3
    4acc:	d81b      	bhi.n	4b06 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4ace:	fb00 bb0b 	mla	fp, r0, fp, fp
    4ad2:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    4ad4:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4ad6:	f8db 0004 	ldr.w	r0, [fp, #4]
    4ada:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    4adc:	4428      	add	r0, r5
    4ade:	f001 ff6c 	bl	69ba <memcpy>
      if (NumBytes) {
    4ae2:	ebb4 040a 	subs.w	r4, r4, sl
    4ae6:	d006      	beq.n	4af6 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    4ae8:	f8db 0004 	ldr.w	r0, [fp, #4]
    4aec:	4622      	mov	r2, r4
    4aee:	eb08 0109 	add.w	r1, r8, r9
    4af2:	f001 ff62 	bl	69ba <memcpy>
      pRing->WrOff = NumBytes;
    4af6:	2018      	movs	r0, #24
    4af8:	fb00 7606 	mla	r6, r0, r6, r7
    4afc:	e7e0      	b.n	4ac0 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    4afe:	3b01      	subs	r3, #1
    4b00:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    4b02:	42a3      	cmp	r3, r4
    4b04:	d2ce      	bcs.n	4aa4 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    4b06:	2000      	movs	r0, #0
    4b08:	e7dc      	b.n	4ac4 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    4b0a:	bf00      	nop
    4b0c:	20001058 	.word	0x20001058

00004b10 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    4b10:	4b03      	ldr	r3, [pc, #12]	; (4b20 <SEGGER_RTT_HasDataUp+0x10>)
    4b12:	2218      	movs	r2, #24
    4b14:	fb02 3300 	mla	r3, r2, r0, r3
    4b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    4b1a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    4b1c:	1a80      	subs	r0, r0, r2
    4b1e:	4770      	bx	lr
    4b20:	20001058 	.word	0x20001058

00004b24 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4b24:	4b0e      	ldr	r3, [pc, #56]	; (4b60 <z_sys_init_run_level+0x3c>)
{
    4b26:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4b28:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4b2c:	3001      	adds	r0, #1
    4b2e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4b32:	42a6      	cmp	r6, r4
    4b34:	d800      	bhi.n	4b38 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4b36:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4b38:	e9d4 3500 	ldrd	r3, r5, [r4]
    4b3c:	4628      	mov	r0, r5
    4b3e:	4798      	blx	r3
		if (dev != NULL) {
    4b40:	b165      	cbz	r5, 4b5c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4b42:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4b44:	b130      	cbz	r0, 4b54 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4b46:	2800      	cmp	r0, #0
    4b48:	bfb8      	it	lt
    4b4a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4b4c:	28ff      	cmp	r0, #255	; 0xff
    4b4e:	bfa8      	it	ge
    4b50:	20ff      	movge	r0, #255	; 0xff
    4b52:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4b54:	785a      	ldrb	r2, [r3, #1]
    4b56:	f042 0201 	orr.w	r2, r2, #1
    4b5a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4b5c:	3408      	adds	r4, #8
    4b5e:	e7e8      	b.n	4b32 <z_sys_init_run_level+0xe>
    4b60:	00007c8c 	.word	0x00007c8c

00004b64 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b68:	b086      	sub	sp, #24
    4b6a:	4605      	mov	r5, r0
    4b6c:	af00      	add	r7, sp, #0
    4b6e:	460e      	mov	r6, r1
	__asm__ volatile(
    4b70:	f04f 0320 	mov.w	r3, #32
    4b74:	f3ef 8811 	mrs	r8, BASEPRI
    4b78:	f383 8812 	msr	BASEPRI_MAX, r3
    4b7c:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4b80:	f000 fe52 	bl	5828 <z_impl_z_current_get>
    4b84:	2d04      	cmp	r5, #4
    4b86:	bf96      	itet	ls
    4b88:	4b2c      	ldrls	r3, [pc, #176]	; (4c3c <z_fatal_error+0xd8>)
    4b8a:	4b2d      	ldrhi	r3, [pc, #180]	; (4c40 <z_fatal_error+0xdc>)
    4b8c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4b90:	492c      	ldr	r1, [pc, #176]	; (4c44 <z_fatal_error+0xe0>)
    4b92:	46e9      	mov	r9, sp
    4b94:	b08a      	sub	sp, #40	; 0x28
    4b96:	466a      	mov	r2, sp
    4b98:	f04f 0a00 	mov.w	sl, #0
    4b9c:	61d3      	str	r3, [r2, #28]
    4b9e:	2303      	movs	r3, #3
    4ba0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    4ba4:	4b28      	ldr	r3, [pc, #160]	; (4c48 <z_fatal_error+0xe4>)
    4ba6:	f8c2 a020 	str.w	sl, [r2, #32]
    4baa:	e9c2 1505 	strd	r1, r5, [r2, #20]
    4bae:	4604      	mov	r4, r0
    4bb0:	f842 3f10 	str.w	r3, [r2, #16]!
    4bb4:	4825      	ldr	r0, [pc, #148]	; (4c4c <z_fatal_error+0xe8>)
    4bb6:	4653      	mov	r3, sl
    4bb8:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    4bbc:	f001 fe88 	bl	68d0 <z_impl_z_log_msg2_static_create>
    4bc0:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4bc2:	b17e      	cbz	r6, 4be4 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4bc4:	69f3      	ldr	r3, [r6, #28]
    4bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4bca:	b15b      	cbz	r3, 4be4 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    4bcc:	4b20      	ldr	r3, [pc, #128]	; (4c50 <z_fatal_error+0xec>)
    4bce:	617b      	str	r3, [r7, #20]
    4bd0:	2302      	movs	r3, #2
    4bd2:	613b      	str	r3, [r7, #16]
    4bd4:	481d      	ldr	r0, [pc, #116]	; (4c4c <z_fatal_error+0xe8>)
    4bd6:	4653      	mov	r3, sl
    4bd8:	f107 0210 	add.w	r2, r7, #16
    4bdc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4be0:	f001 fe76 	bl	68d0 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    4be4:	b12c      	cbz	r4, 4bf2 <z_fatal_error+0x8e>
    4be6:	4620      	mov	r0, r4
    4be8:	f002 fc58 	bl	749c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    4bec:	b108      	cbz	r0, 4bf2 <z_fatal_error+0x8e>
    4bee:	7803      	ldrb	r3, [r0, #0]
    4bf0:	b903      	cbnz	r3, 4bf4 <z_fatal_error+0x90>
		thread_name = "unknown";
    4bf2:	4818      	ldr	r0, [pc, #96]	; (4c54 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4bf4:	4b18      	ldr	r3, [pc, #96]	; (4c58 <z_fatal_error+0xf4>)
    4bf6:	46e9      	mov	r9, sp
    4bf8:	b08a      	sub	sp, #40	; 0x28
    4bfa:	466a      	mov	r2, sp
    4bfc:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4c00:	2303      	movs	r3, #3
    4c02:	f882 3020 	strb.w	r3, [r2, #32]
    4c06:	4b15      	ldr	r3, [pc, #84]	; (4c5c <z_fatal_error+0xf8>)
    4c08:	61d0      	str	r0, [r2, #28]
    4c0a:	f842 3f10 	str.w	r3, [r2, #16]!
    4c0e:	2300      	movs	r3, #0
    4c10:	480e      	ldr	r0, [pc, #56]	; (4c4c <z_fatal_error+0xe8>)
    4c12:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    4c16:	f001 fe5b 	bl	68d0 <z_impl_z_log_msg2_static_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4c1a:	4631      	mov	r1, r6
    4c1c:	46cd      	mov	sp, r9
    4c1e:	4628      	mov	r0, r5
    4c20:	f7ff f99a 	bl	3f58 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4c24:	f388 8811 	msr	BASEPRI, r8
    4c28:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4c2c:	4620      	mov	r0, r4
    4c2e:	f7fd fee9 	bl	2a04 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4c32:	3718      	adds	r7, #24
    4c34:	46bd      	mov	sp, r7
    4c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4c3a:	bf00      	nop
    4c3c:	00007ca4 	.word	0x00007ca4
    4c40:	000083df 	.word	0x000083df
    4c44:	000083f5 	.word	0x000083f5
    4c48:	01000005 	.word	0x01000005
    4c4c:	000079ec 	.word	0x000079ec
    4c50:	0000841d 	.word	0x0000841d
    4c54:	000083ed 	.word	0x000083ed
    4c58:	0000843e 	.word	0x0000843e
    4c5c:	01000004 	.word	0x01000004

00004c60 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4c60:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4c62:	4b0a      	ldr	r3, [pc, #40]	; (4c8c <bg_thread_main+0x2c>)
    4c64:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4c66:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4c68:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4c6a:	f7ff ff5b 	bl	4b24 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4c6e:	f001 f81d 	bl	5cac <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4c72:	2003      	movs	r0, #3
    4c74:	f7ff ff56 	bl	4b24 <z_sys_init_run_level>

	z_init_static_threads();
    4c78:	f000 f96a 	bl	4f50 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4c7c:	f7fb fc26 	bl	4cc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4c80:	4a03      	ldr	r2, [pc, #12]	; (4c90 <bg_thread_main+0x30>)
    4c82:	7b13      	ldrb	r3, [r2, #12]
    4c84:	f023 0301 	bic.w	r3, r3, #1
    4c88:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4c8a:	bd08      	pop	{r3, pc}
    4c8c:	2000174c 	.word	0x2000174c
    4c90:	20000950 	.word	0x20000950

00004c94 <z_bss_zero>:
{
    4c94:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4c96:	4803      	ldr	r0, [pc, #12]	; (4ca4 <z_bss_zero+0x10>)
    4c98:	4a03      	ldr	r2, [pc, #12]	; (4ca8 <z_bss_zero+0x14>)
    4c9a:	2100      	movs	r1, #0
    4c9c:	1a12      	subs	r2, r2, r0
    4c9e:	f002 fbac 	bl	73fa <z_early_memset>
}
    4ca2:	bd08      	pop	{r3, pc}
    4ca4:	20000248 	.word	0x20000248
    4ca8:	20001750 	.word	0x20001750

00004cac <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4cac:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    4cae:	2300      	movs	r3, #0
{
    4cb0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    4cb2:	2201      	movs	r2, #1
    4cb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    4cb8:	4e13      	ldr	r6, [pc, #76]	; (4d08 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4cba:	4d14      	ldr	r5, [pc, #80]	; (4d0c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    4cbc:	9301      	str	r3, [sp, #4]
    4cbe:	220f      	movs	r2, #15
    4cc0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4cc4:	4912      	ldr	r1, [pc, #72]	; (4d10 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4cc6:	2318      	movs	r3, #24
    4cc8:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    4ccc:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    4cd0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    4cd2:	f44f 70b0 	mov.w	r0, #352	; 0x160
    4cd6:	fb00 1104 	mla	r1, r0, r4, r1
    4cda:	4b0e      	ldr	r3, [pc, #56]	; (4d14 <z_init_cpu+0x68>)
    4cdc:	9500      	str	r5, [sp, #0]
    4cde:	f44f 72a0 	mov.w	r2, #320	; 0x140
    4ce2:	4630      	mov	r0, r6
    4ce4:	f000 f8d6 	bl	4e94 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4ce8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4cea:	480b      	ldr	r0, [pc, #44]	; (4d18 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    4cec:	752c      	strb	r4, [r5, #20]
    4cee:	f023 0304 	bic.w	r3, r3, #4
    4cf2:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4cf4:	f44f 6302 	mov.w	r3, #2080	; 0x820
    4cf8:	fb03 0404 	mla	r4, r3, r4, r0
    4cfc:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4cfe:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    4d00:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    4d02:	b006      	add	sp, #24
    4d04:	bd70      	pop	{r4, r5, r6, pc}
    4d06:	bf00      	nop
    4d08:	200008d0 	.word	0x200008d0
    4d0c:	20001100 	.word	0x20001100
    4d10:	20001ea0 	.word	0x20001ea0
    4d14:	00005009 	.word	0x00005009
    4d18:	20002000 	.word	0x20002000

00004d1c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4d1c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4d1e:	4b2e      	ldr	r3, [pc, #184]	; (4dd8 <z_cstart+0xbc>)
    4d20:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4d22:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4d26:	4d2d      	ldr	r5, [pc, #180]	; (4ddc <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    4d28:	4e2d      	ldr	r6, [pc, #180]	; (4de0 <z_cstart+0xc4>)
    4d2a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4d2c:	4f2d      	ldr	r7, [pc, #180]	; (4de4 <z_cstart+0xc8>)
    4d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4d32:	2400      	movs	r4, #0
    4d34:	616b      	str	r3, [r5, #20]
    4d36:	23e0      	movs	r3, #224	; 0xe0
    4d38:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4d3c:	77ec      	strb	r4, [r5, #31]
    4d3e:	762c      	strb	r4, [r5, #24]
    4d40:	766c      	strb	r4, [r5, #25]
    4d42:	76ac      	strb	r4, [r5, #26]
    4d44:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4d48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4d4a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4d4e:	626b      	str	r3, [r5, #36]	; 0x24
    4d50:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4d54:	f7fd fdca 	bl	28ec <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4d58:	f7fd f94e 	bl	1ff8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4d5c:	f04f 33ff 	mov.w	r3, #4294967295
    4d60:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4d62:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4d64:	f7fd ff1c 	bl	2ba0 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4d68:	f7fd fe62 	bl	2a30 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    4d6c:	f7fc fb2e 	bl	13cc <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4d70:	f240 1301 	movw	r3, #257	; 0x101
    4d74:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4d78:	ab06      	add	r3, sp, #24
    4d7a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4d7c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4d80:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4d82:	f002 fb2f 	bl	73e4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4d86:	4620      	mov	r0, r4
    4d88:	f7ff fecc 	bl	4b24 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4d8c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4d8e:	4d16      	ldr	r5, [pc, #88]	; (4de8 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4d90:	f7ff fec8 	bl	4b24 <z_sys_init_run_level>
	z_sched_init();
    4d94:	f000 fc9a 	bl	56cc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4d98:	4b14      	ldr	r3, [pc, #80]	; (4dec <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    4d9a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4d9c:	9305      	str	r3, [sp, #20]
    4d9e:	2301      	movs	r3, #1
    4da0:	4913      	ldr	r1, [pc, #76]	; (4df0 <z_cstart+0xd4>)
    4da2:	9400      	str	r4, [sp, #0]
    4da4:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4dac:	463b      	mov	r3, r7
    4dae:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4db2:	4628      	mov	r0, r5
    4db4:	f000 f86e 	bl	4e94 <z_setup_new_thread>
    4db8:	7b6a      	ldrb	r2, [r5, #13]
    4dba:	4606      	mov	r6, r0
    4dbc:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4dc0:	4628      	mov	r0, r5
    4dc2:	736a      	strb	r2, [r5, #13]
    4dc4:	f002 fbcc 	bl	7560 <z_ready_thread>
	z_init_cpu(0);
    4dc8:	4620      	mov	r0, r4
    4dca:	f7ff ff6f 	bl	4cac <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4dce:	463a      	mov	r2, r7
    4dd0:	4631      	mov	r1, r6
    4dd2:	4628      	mov	r0, r5
    4dd4:	f7fd fa70 	bl	22b8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4dd8:	20002820 	.word	0x20002820
    4ddc:	e000ed00 	.word	0xe000ed00
    4de0:	20001100 	.word	0x20001100
    4de4:	00004c61 	.word	0x00004c61
    4de8:	20000950 	.word	0x20000950
    4dec:	000084a0 	.word	0x000084a0
    4df0:	20001a80 	.word	0x20001a80

00004df4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    4df4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4df6:	4b0e      	ldr	r3, [pc, #56]	; (4e30 <init_mem_slab_module+0x3c>)
    4df8:	4c0e      	ldr	r4, [pc, #56]	; (4e34 <init_mem_slab_module+0x40>)
    4dfa:	42a3      	cmp	r3, r4
    4dfc:	d301      	bcc.n	4e02 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4dfe:	2000      	movs	r0, #0
	return rc;
}
    4e00:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4e02:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    4e06:	ea41 0200 	orr.w	r2, r1, r0
    4e0a:	f012 0203 	ands.w	r2, r2, #3
    4e0e:	d10b      	bne.n	4e28 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    4e10:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    4e12:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    4e14:	42aa      	cmp	r2, r5
    4e16:	d101      	bne.n	4e1c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4e18:	331c      	adds	r3, #28
    4e1a:	e7ee      	b.n	4dfa <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    4e1c:	695e      	ldr	r6, [r3, #20]
    4e1e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    4e20:	3201      	adds	r2, #1
		slab->free_list = p;
    4e22:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    4e24:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    4e26:	e7f5      	b.n	4e14 <init_mem_slab_module+0x20>
	return rc;
    4e28:	f06f 0015 	mvn.w	r0, #21
    4e2c:	e7e8      	b.n	4e00 <init_mem_slab_module+0xc>
    4e2e:	bf00      	nop
    4e30:	200001d4 	.word	0x200001d4
    4e34:	200001d4 	.word	0x200001d4

00004e38 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    4e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4e3a:	460c      	mov	r4, r1
	__asm__ volatile(
    4e3c:	f04f 0520 	mov.w	r5, #32
    4e40:	f3ef 8111 	mrs	r1, BASEPRI
    4e44:	f385 8812 	msr	BASEPRI_MAX, r5
    4e48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    4e4c:	6945      	ldr	r5, [r0, #20]
    4e4e:	b15d      	cbz	r5, 4e68 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    4e50:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    4e52:	682b      	ldr	r3, [r5, #0]
    4e54:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    4e56:	6983      	ldr	r3, [r0, #24]
    4e58:	3301      	adds	r3, #1
    4e5a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    4e5c:	2000      	movs	r0, #0
	__asm__ volatile(
    4e5e:	f381 8811 	msr	BASEPRI, r1
    4e62:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    4e66:	e011      	b.n	4e8c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    4e68:	ea52 0c03 	orrs.w	ip, r2, r3
    4e6c:	d103      	bne.n	4e76 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    4e6e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    4e70:	f06f 000b 	mvn.w	r0, #11
    4e74:	e7f3      	b.n	4e5e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    4e76:	e9cd 2300 	strd	r2, r3, [sp]
    4e7a:	4602      	mov	r2, r0
    4e7c:	3008      	adds	r0, #8
    4e7e:	f000 fb7b 	bl	5578 <z_pend_curr>
		if (result == 0) {
    4e82:	b918      	cbnz	r0, 4e8c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    4e84:	4b02      	ldr	r3, [pc, #8]	; (4e90 <k_mem_slab_alloc+0x58>)
    4e86:	689b      	ldr	r3, [r3, #8]
    4e88:	695b      	ldr	r3, [r3, #20]
    4e8a:	6023      	str	r3, [r4, #0]
}
    4e8c:	b003      	add	sp, #12
    4e8e:	bd30      	pop	{r4, r5, pc}
    4e90:	20001100 	.word	0x20001100

00004e94 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    4e94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    4e98:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    4e9a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    4e9c:	2604      	movs	r6, #4
    4e9e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    4ea0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4ea2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    4ea4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    4ea8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4eaa:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    4eac:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4eb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    4eb2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4eb4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    4eb8:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    4eba:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    4ebe:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    4ec2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    4ec4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    4ec6:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    4ec8:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4ecc:	9202      	str	r2, [sp, #8]
    4ece:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    4ed0:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    4ed2:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4ed4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    4ed6:	9200      	str	r2, [sp, #0]
    4ed8:	4642      	mov	r2, r8
{
    4eda:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    4edc:	f7fd f9ba 	bl	2254 <arch_new_thread>
	if (!_current) {
    4ee0:	4b04      	ldr	r3, [pc, #16]	; (4ef4 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    4ee2:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    4ee4:	689b      	ldr	r3, [r3, #8]
    4ee6:	b103      	cbz	r3, 4eea <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    4ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    4eea:	6723      	str	r3, [r4, #112]	; 0x70
}
    4eec:	4640      	mov	r0, r8
    4eee:	b004      	add	sp, #16
    4ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4ef4:	20001100 	.word	0x20001100

00004ef8 <z_impl_k_thread_create>:
{
    4ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4efa:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4efc:	2700      	movs	r7, #0
    4efe:	9705      	str	r7, [sp, #20]
    4f00:	9f10      	ldr	r7, [sp, #64]	; 0x40
    4f02:	9704      	str	r7, [sp, #16]
    4f04:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    4f06:	9703      	str	r7, [sp, #12]
    4f08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    4f0a:	9702      	str	r7, [sp, #8]
{
    4f0c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4f10:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    4f12:	9701      	str	r7, [sp, #4]
    4f14:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    4f16:	9700      	str	r7, [sp, #0]
{
    4f18:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    4f1a:	f7ff ffbb 	bl	4e94 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    4f1e:	f1b5 3fff 	cmp.w	r5, #4294967295
    4f22:	bf08      	it	eq
    4f24:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    4f28:	d005      	beq.n	4f36 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4f2a:	ea55 0306 	orrs.w	r3, r5, r6
    4f2e:	d105      	bne.n	4f3c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    4f30:	4620      	mov	r0, r4
    4f32:	f000 fac5 	bl	54c0 <z_sched_start>
}
    4f36:	4620      	mov	r0, r4
    4f38:	b007      	add	sp, #28
    4f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    4f3c:	4903      	ldr	r1, [pc, #12]	; (4f4c <z_impl_k_thread_create+0x54>)
    4f3e:	4632      	mov	r2, r6
    4f40:	462b      	mov	r3, r5
    4f42:	f104 0018 	add.w	r0, r4, #24
    4f46:	f000 fd2b 	bl	59a0 <z_add_timeout>
    4f4a:	e7f4      	b.n	4f36 <z_impl_k_thread_create+0x3e>
    4f4c:	00007581 	.word	0x00007581

00004f50 <z_init_static_threads>:
{
    4f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4f54:	4c29      	ldr	r4, [pc, #164]	; (4ffc <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    4f56:	4d2a      	ldr	r5, [pc, #168]	; (5000 <z_init_static_threads+0xb0>)
{
    4f58:	b087      	sub	sp, #28
    4f5a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    4f5c:	42ae      	cmp	r6, r5
    4f5e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    4f62:	d30f      	bcc.n	4f84 <z_init_static_threads+0x34>
	k_sched_lock();
    4f64:	f000 f9c6 	bl	52f4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    4f68:	4c24      	ldr	r4, [pc, #144]	; (4ffc <z_init_static_threads+0xac>)
    4f6a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5004 <z_init_static_threads+0xb4>
    4f6e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    4f72:	f240 37e7 	movw	r7, #999	; 0x3e7
    4f76:	42ac      	cmp	r4, r5
    4f78:	d320      	bcc.n	4fbc <z_init_static_threads+0x6c>
}
    4f7a:	b007      	add	sp, #28
    4f7c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    4f80:	f000 bb88 	b.w	5694 <k_sched_unlock>
		z_setup_new_thread(
    4f84:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4f88:	9305      	str	r3, [sp, #20]
    4f8a:	f854 3c10 	ldr.w	r3, [r4, #-16]
    4f8e:	9304      	str	r3, [sp, #16]
    4f90:	f854 3c14 	ldr.w	r3, [r4, #-20]
    4f94:	9303      	str	r3, [sp, #12]
    4f96:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4f9a:	9302      	str	r3, [sp, #8]
    4f9c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4fa0:	9301      	str	r3, [sp, #4]
    4fa2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4fa6:	9300      	str	r3, [sp, #0]
    4fa8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    4fac:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    4fb0:	f7ff ff70 	bl	4e94 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    4fb4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4fb8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    4fba:	e7ce      	b.n	4f5a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    4fbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4fbe:	1c5a      	adds	r2, r3, #1
    4fc0:	d00d      	beq.n	4fde <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    4fc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    4fc6:	2100      	movs	r1, #0
    4fc8:	4638      	mov	r0, r7
    4fca:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4fce:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    4fd2:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    4fd6:	d104      	bne.n	4fe2 <z_init_static_threads+0x92>
	z_sched_start(thread);
    4fd8:	4640      	mov	r0, r8
    4fda:	f000 fa71 	bl	54c0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4fde:	3430      	adds	r4, #48	; 0x30
    4fe0:	e7c9      	b.n	4f76 <z_init_static_threads+0x26>
    4fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4fe6:	2300      	movs	r3, #0
    4fe8:	f7fb f88a 	bl	100 <__aeabi_uldivmod>
    4fec:	4602      	mov	r2, r0
    4fee:	460b      	mov	r3, r1
    4ff0:	f108 0018 	add.w	r0, r8, #24
    4ff4:	4649      	mov	r1, r9
    4ff6:	f000 fcd3 	bl	59a0 <z_add_timeout>
    4ffa:	e7f0      	b.n	4fde <z_init_static_threads+0x8e>
    4ffc:	200001d4 	.word	0x200001d4
    5000:	200001d4 	.word	0x200001d4
    5004:	00007581 	.word	0x00007581

00005008 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    5008:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    500a:	4c0b      	ldr	r4, [pc, #44]	; (5038 <idle+0x30>)
	return !z_sys_post_kernel;
    500c:	4d0b      	ldr	r5, [pc, #44]	; (503c <idle+0x34>)
	__asm__ volatile(
    500e:	f04f 0220 	mov.w	r2, #32
    5012:	f3ef 8311 	mrs	r3, BASEPRI
    5016:	f382 8812 	msr	BASEPRI_MAX, r2
    501a:	f3bf 8f6f 	isb	sy
    501e:	f002 fb3e 	bl	769e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5022:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    5024:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5026:	b913      	cbnz	r3, 502e <idle+0x26>
	arch_cpu_idle();
    5028:	f7fc ffec 	bl	2004 <arch_cpu_idle>
}
    502c:	e7ef      	b.n	500e <idle+0x6>
    502e:	f7fc fe3f 	bl	1cb0 <pm_system_suspend>
    5032:	2800      	cmp	r0, #0
    5034:	d1eb      	bne.n	500e <idle+0x6>
    5036:	e7f7      	b.n	5028 <idle+0x20>
    5038:	20001100 	.word	0x20001100
    503c:	2000174c 	.word	0x2000174c

00005040 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5040:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5044:	4604      	mov	r4, r0
    5046:	4617      	mov	r7, r2
    5048:	461e      	mov	r6, r3
    504a:	f04f 0320 	mov.w	r3, #32
    504e:	f3ef 8811 	mrs	r8, BASEPRI
    5052:	f383 8812 	msr	BASEPRI_MAX, r3
    5056:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    505a:	68c3      	ldr	r3, [r0, #12]
    505c:	4a32      	ldr	r2, [pc, #200]	; (5128 <z_impl_k_mutex_lock+0xe8>)
    505e:	b16b      	cbz	r3, 507c <z_impl_k_mutex_lock+0x3c>
    5060:	6880      	ldr	r0, [r0, #8]
    5062:	6891      	ldr	r1, [r2, #8]
    5064:	4288      	cmp	r0, r1
    5066:	d019      	beq.n	509c <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5068:	ea57 0306 	orrs.w	r3, r7, r6
    506c:	d118      	bne.n	50a0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    506e:	f388 8811 	msr	BASEPRI, r8
    5072:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5076:	f06f 000f 	mvn.w	r0, #15
    507a:	e00c      	b.n	5096 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    507c:	6891      	ldr	r1, [r2, #8]
    507e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5082:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5084:	3301      	adds	r3, #1
    5086:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5088:	6893      	ldr	r3, [r2, #8]
    508a:	60a3      	str	r3, [r4, #8]
    508c:	f388 8811 	msr	BASEPRI, r8
    5090:	f3bf 8f6f 	isb	sy
		return 0;
    5094:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5096:	b002      	add	sp, #8
    5098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    509c:	6921      	ldr	r1, [r4, #16]
    509e:	e7f0      	b.n	5082 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    50a0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    50a4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    50a8:	4299      	cmp	r1, r3
    50aa:	bfa8      	it	ge
    50ac:	4619      	movge	r1, r3
    50ae:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    50b2:	4291      	cmp	r1, r2
    50b4:	bfb8      	it	lt
    50b6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    50b8:	428b      	cmp	r3, r1
    50ba:	dd2e      	ble.n	511a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    50bc:	f002 f9f7 	bl	74ae <adjust_owner_prio.isra.0>
    50c0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    50c2:	e9cd 7600 	strd	r7, r6, [sp]
    50c6:	4819      	ldr	r0, [pc, #100]	; (512c <z_impl_k_mutex_lock+0xec>)
    50c8:	4622      	mov	r2, r4
    50ca:	4641      	mov	r1, r8
    50cc:	f000 fa54 	bl	5578 <z_pend_curr>
	if (got_mutex == 0) {
    50d0:	2800      	cmp	r0, #0
    50d2:	d0e0      	beq.n	5096 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    50d4:	f04f 0320 	mov.w	r3, #32
    50d8:	f3ef 8611 	mrs	r6, BASEPRI
    50dc:	f383 8812 	msr	BASEPRI_MAX, r3
    50e0:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    50e4:	6823      	ldr	r3, [r4, #0]
    50e6:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    50e8:	429c      	cmp	r4, r3
    50ea:	d00a      	beq.n	5102 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    50ec:	b14b      	cbz	r3, 5102 <z_impl_k_mutex_lock+0xc2>
    50ee:	f993 300e 	ldrsb.w	r3, [r3, #14]
    50f2:	4299      	cmp	r1, r3
    50f4:	bfa8      	it	ge
    50f6:	4619      	movge	r1, r3
    50f8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    50fc:	4299      	cmp	r1, r3
    50fe:	bfb8      	it	lt
    5100:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5102:	68a0      	ldr	r0, [r4, #8]
    5104:	f002 f9d3 	bl	74ae <adjust_owner_prio.isra.0>
    5108:	b900      	cbnz	r0, 510c <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    510a:	b145      	cbz	r5, 511e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    510c:	4807      	ldr	r0, [pc, #28]	; (512c <z_impl_k_mutex_lock+0xec>)
    510e:	4631      	mov	r1, r6
    5110:	f000 f8de 	bl	52d0 <z_reschedule>
	return -EAGAIN;
    5114:	f06f 000a 	mvn.w	r0, #10
    5118:	e7bd      	b.n	5096 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    511a:	2500      	movs	r5, #0
    511c:	e7d1      	b.n	50c2 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    511e:	f386 8811 	msr	BASEPRI, r6
    5122:	f3bf 8f6f 	isb	sy
    5126:	e7f5      	b.n	5114 <z_impl_k_mutex_lock+0xd4>
    5128:	20001100 	.word	0x20001100
    512c:	2000174d 	.word	0x2000174d

00005130 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5130:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5132:	6883      	ldr	r3, [r0, #8]
{
    5134:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    5136:	2b00      	cmp	r3, #0
    5138:	d032      	beq.n	51a0 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    513a:	4a1c      	ldr	r2, [pc, #112]	; (51ac <z_impl_k_mutex_unlock+0x7c>)
    513c:	6892      	ldr	r2, [r2, #8]
    513e:	4293      	cmp	r3, r2
    5140:	d131      	bne.n	51a6 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5142:	7bda      	ldrb	r2, [r3, #15]
    5144:	3a01      	subs	r2, #1
    5146:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    5148:	68c3      	ldr	r3, [r0, #12]
    514a:	2b01      	cmp	r3, #1
    514c:	d905      	bls.n	515a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    514e:	3b01      	subs	r3, #1
    5150:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5152:	f000 fa9f 	bl	5694 <k_sched_unlock>

	return 0;
    5156:	2000      	movs	r0, #0
}
    5158:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    515a:	f04f 0320 	mov.w	r3, #32
    515e:	f3ef 8511 	mrs	r5, BASEPRI
    5162:	f383 8812 	msr	BASEPRI_MAX, r3
    5166:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    516a:	6901      	ldr	r1, [r0, #16]
    516c:	6880      	ldr	r0, [r0, #8]
    516e:	f002 f99e 	bl	74ae <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5172:	4620      	mov	r0, r4
    5174:	f002 fa65 	bl	7642 <z_unpend_first_thread>
	mutex->owner = new_owner;
    5178:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    517a:	b158      	cbz	r0, 5194 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    517c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5180:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5182:	2200      	movs	r2, #0
    5184:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    5186:	f002 f9eb 	bl	7560 <z_ready_thread>
		z_reschedule(&lock, key);
    518a:	4809      	ldr	r0, [pc, #36]	; (51b0 <z_impl_k_mutex_unlock+0x80>)
    518c:	4629      	mov	r1, r5
    518e:	f000 f89f 	bl	52d0 <z_reschedule>
    5192:	e7de      	b.n	5152 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    5194:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    5196:	f385 8811 	msr	BASEPRI, r5
    519a:	f3bf 8f6f 	isb	sy
    519e:	e7d8      	b.n	5152 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    51a0:	f06f 0015 	mvn.w	r0, #21
    51a4:	e7d8      	b.n	5158 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    51a6:	f04f 30ff 	mov.w	r0, #4294967295
    51aa:	e7d5      	b.n	5158 <z_impl_k_mutex_unlock+0x28>
    51ac:	20001100 	.word	0x20001100
    51b0:	2000174d 	.word	0x2000174d

000051b4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    51b4:	b538      	push	{r3, r4, r5, lr}
    51b6:	4604      	mov	r4, r0
	__asm__ volatile(
    51b8:	f04f 0320 	mov.w	r3, #32
    51bc:	f3ef 8511 	mrs	r5, BASEPRI
    51c0:	f383 8812 	msr	BASEPRI_MAX, r3
    51c4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    51c8:	f002 fa3b 	bl	7642 <z_unpend_first_thread>

	if (thread != NULL) {
    51cc:	b148      	cbz	r0, 51e2 <z_impl_k_sem_give+0x2e>
    51ce:	2200      	movs	r2, #0
    51d0:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    51d2:	f002 f9c5 	bl	7560 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    51d6:	4629      	mov	r1, r5
    51d8:	4805      	ldr	r0, [pc, #20]	; (51f0 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    51da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    51de:	f000 b877 	b.w	52d0 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    51e2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    51e6:	429a      	cmp	r2, r3
    51e8:	bf18      	it	ne
    51ea:	3301      	addne	r3, #1
    51ec:	60a3      	str	r3, [r4, #8]
}
    51ee:	e7f2      	b.n	51d6 <z_impl_k_sem_give+0x22>
    51f0:	2000174d 	.word	0x2000174d

000051f4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    51f4:	b513      	push	{r0, r1, r4, lr}
    51f6:	f04f 0420 	mov.w	r4, #32
    51fa:	f3ef 8111 	mrs	r1, BASEPRI
    51fe:	f384 8812 	msr	BASEPRI_MAX, r4
    5202:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5206:	6884      	ldr	r4, [r0, #8]
    5208:	b144      	cbz	r4, 521c <z_impl_k_sem_take+0x28>
		sem->count--;
    520a:	3c01      	subs	r4, #1
    520c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    520e:	f381 8811 	msr	BASEPRI, r1
    5212:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5216:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5218:	b002      	add	sp, #8
    521a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    521c:	ea52 0403 	orrs.w	r4, r2, r3
    5220:	d106      	bne.n	5230 <z_impl_k_sem_take+0x3c>
    5222:	f381 8811 	msr	BASEPRI, r1
    5226:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    522a:	f06f 000f 	mvn.w	r0, #15
    522e:	e7f3      	b.n	5218 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5230:	e9cd 2300 	strd	r2, r3, [sp]
    5234:	4602      	mov	r2, r0
    5236:	4802      	ldr	r0, [pc, #8]	; (5240 <z_impl_k_sem_take+0x4c>)
    5238:	f000 f99e 	bl	5578 <z_pend_curr>
	return ret;
    523c:	e7ec      	b.n	5218 <z_impl_k_sem_take+0x24>
    523e:	bf00      	nop
    5240:	2000174d 	.word	0x2000174d

00005244 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5244:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5246:	4d07      	ldr	r5, [pc, #28]	; (5264 <z_reset_time_slice+0x20>)
    5248:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    524a:	b154      	cbz	r4, 5262 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    524c:	f7fe fe38 	bl	3ec0 <sys_clock_elapsed>
    5250:	4b05      	ldr	r3, [pc, #20]	; (5268 <z_reset_time_slice+0x24>)
    5252:	4404      	add	r4, r0
    5254:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5256:	6828      	ldr	r0, [r5, #0]
    5258:	2100      	movs	r1, #0
	}
}
    525a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    525e:	f002 ba2e 	b.w	76be <z_set_timeout_expiry>
}
    5262:	bd38      	pop	{r3, r4, r5, pc}
    5264:	20001130 	.word	0x20001130
    5268:	20001100 	.word	0x20001100

0000526c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    526e:	4604      	mov	r4, r0
    5270:	460d      	mov	r5, r1
	__asm__ volatile(
    5272:	f04f 0320 	mov.w	r3, #32
    5276:	f3ef 8711 	mrs	r7, BASEPRI
    527a:	f383 8812 	msr	BASEPRI_MAX, r3
    527e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5282:	4e10      	ldr	r6, [pc, #64]	; (52c4 <k_sched_time_slice_set+0x58>)
    5284:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    5286:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    528a:	f240 30e7 	movw	r0, #999	; 0x3e7
    528e:	6131      	str	r1, [r6, #16]
    5290:	2300      	movs	r3, #0
    5292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5296:	fbe4 010c 	umlal	r0, r1, r4, ip
    529a:	f7fa ff31 	bl	100 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    529e:	2c00      	cmp	r4, #0
    52a0:	4b09      	ldr	r3, [pc, #36]	; (52c8 <k_sched_time_slice_set+0x5c>)
    52a2:	dc0a      	bgt.n	52ba <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    52a4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    52a6:	4b09      	ldr	r3, [pc, #36]	; (52cc <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    52a8:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    52aa:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    52ac:	f7ff ffca 	bl	5244 <z_reset_time_slice>
	__asm__ volatile(
    52b0:	f387 8811 	msr	BASEPRI, r7
    52b4:	f3bf 8f6f 	isb	sy
	}
}
    52b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    52ba:	2802      	cmp	r0, #2
    52bc:	bfb8      	it	lt
    52be:	2002      	movlt	r0, #2
    52c0:	e7f0      	b.n	52a4 <k_sched_time_slice_set+0x38>
    52c2:	bf00      	nop
    52c4:	20001100 	.word	0x20001100
    52c8:	20001130 	.word	0x20001130
    52cc:	2000112c 	.word	0x2000112c

000052d0 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    52d0:	b949      	cbnz	r1, 52e6 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    52d2:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    52d6:	b930      	cbnz	r0, 52e6 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    52d8:	4b05      	ldr	r3, [pc, #20]	; (52f0 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    52da:	69da      	ldr	r2, [r3, #28]
    52dc:	689b      	ldr	r3, [r3, #8]
    52de:	429a      	cmp	r2, r3
    52e0:	d001      	beq.n	52e6 <z_reschedule+0x16>
	ret = arch_swap(key);
    52e2:	f7fc bf63 	b.w	21ac <arch_swap>
    52e6:	f381 8811 	msr	BASEPRI, r1
    52ea:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    52ee:	4770      	bx	lr
    52f0:	20001100 	.word	0x20001100

000052f4 <k_sched_lock>:
	__asm__ volatile(
    52f4:	f04f 0320 	mov.w	r3, #32
    52f8:	f3ef 8111 	mrs	r1, BASEPRI
    52fc:	f383 8812 	msr	BASEPRI_MAX, r3
    5300:	f3bf 8f6f 	isb	sy
    5304:	4b04      	ldr	r3, [pc, #16]	; (5318 <k_sched_lock+0x24>)
    5306:	689a      	ldr	r2, [r3, #8]
    5308:	7bd3      	ldrb	r3, [r2, #15]
    530a:	3b01      	subs	r3, #1
    530c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    530e:	f381 8811 	msr	BASEPRI, r1
    5312:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5316:	4770      	bx	lr
    5318:	20001100 	.word	0x20001100

0000531c <update_cache>:
{
    531c:	b538      	push	{r3, r4, r5, lr}
    531e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5320:	480c      	ldr	r0, [pc, #48]	; (5354 <update_cache+0x38>)
    5322:	4d0d      	ldr	r5, [pc, #52]	; (5358 <update_cache+0x3c>)
    5324:	f002 f916 	bl	7554 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5328:	4604      	mov	r4, r0
    532a:	b900      	cbnz	r0, 532e <update_cache+0x12>
    532c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    532e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5330:	b94a      	cbnz	r2, 5346 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    5332:	7b5a      	ldrb	r2, [r3, #13]
    5334:	06d2      	lsls	r2, r2, #27
    5336:	d106      	bne.n	5346 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5338:	69a2      	ldr	r2, [r4, #24]
    533a:	b922      	cbnz	r2, 5346 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    533c:	89da      	ldrh	r2, [r3, #14]
    533e:	2a7f      	cmp	r2, #127	; 0x7f
    5340:	d901      	bls.n	5346 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    5342:	61eb      	str	r3, [r5, #28]
}
    5344:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5346:	429c      	cmp	r4, r3
    5348:	d002      	beq.n	5350 <update_cache+0x34>
			z_reset_time_slice(thread);
    534a:	4620      	mov	r0, r4
    534c:	f7ff ff7a 	bl	5244 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5350:	61ec      	str	r4, [r5, #28]
}
    5352:	e7f7      	b.n	5344 <update_cache+0x28>
    5354:	20001120 	.word	0x20001120
    5358:	20001100 	.word	0x20001100

0000535c <move_thread_to_end_of_prio_q>:
{
    535c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    535e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5362:	7b43      	ldrb	r3, [r0, #13]
    5364:	2a00      	cmp	r2, #0
{
    5366:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5368:	da04      	bge.n	5374 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    536a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    536e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5370:	f002 f8b8 	bl	74e4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5374:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    5376:	4a15      	ldr	r2, [pc, #84]	; (53cc <move_thread_to_end_of_prio_q+0x70>)
    5378:	f063 037f 	orn	r3, r3, #127	; 0x7f
    537c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    537e:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5382:	f102 0520 	add.w	r5, r2, #32
    5386:	42ab      	cmp	r3, r5
    5388:	d01b      	beq.n	53c2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    538a:	b1d3      	cbz	r3, 53c2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    538c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5390:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5394:	4286      	cmp	r6, r0
    5396:	d00f      	beq.n	53b8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    5398:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    539a:	2800      	cmp	r0, #0
    539c:	dd0c      	ble.n	53b8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    539e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    53a0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    53a4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    53a6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    53a8:	6890      	ldr	r0, [r2, #8]
    53aa:	1a43      	subs	r3, r0, r1
    53ac:	4258      	negs	r0, r3
}
    53ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    53b2:	4158      	adcs	r0, r3
    53b4:	f7ff bfb2 	b.w	531c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    53b8:	42a3      	cmp	r3, r4
    53ba:	d002      	beq.n	53c2 <move_thread_to_end_of_prio_q+0x66>
    53bc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    53be:	2b00      	cmp	r3, #0
    53c0:	d1e6      	bne.n	5390 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    53c2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    53c6:	6021      	str	r1, [r4, #0]
	list->tail = node;
    53c8:	6251      	str	r1, [r2, #36]	; 0x24
}
    53ca:	e7ed      	b.n	53a8 <move_thread_to_end_of_prio_q+0x4c>
    53cc:	20001100 	.word	0x20001100

000053d0 <z_time_slice>:
{
    53d0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    53d2:	f04f 0320 	mov.w	r3, #32
    53d6:	f3ef 8511 	mrs	r5, BASEPRI
    53da:	f383 8812 	msr	BASEPRI_MAX, r3
    53de:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    53e2:	4b17      	ldr	r3, [pc, #92]	; (5440 <z_time_slice+0x70>)
    53e4:	4a17      	ldr	r2, [pc, #92]	; (5444 <z_time_slice+0x74>)
    53e6:	689c      	ldr	r4, [r3, #8]
    53e8:	6811      	ldr	r1, [r2, #0]
    53ea:	428c      	cmp	r4, r1
    53ec:	d107      	bne.n	53fe <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    53ee:	4620      	mov	r0, r4
    53f0:	f7ff ff28 	bl	5244 <z_reset_time_slice>
	__asm__ volatile(
    53f4:	f385 8811 	msr	BASEPRI, r5
    53f8:	f3bf 8f6f 	isb	sy
}
    53fc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    53fe:	2100      	movs	r1, #0
    5400:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    5402:	4a11      	ldr	r2, [pc, #68]	; (5448 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    5404:	6812      	ldr	r2, [r2, #0]
    5406:	b1c2      	cbz	r2, 543a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5408:	89e2      	ldrh	r2, [r4, #14]
    540a:	2a7f      	cmp	r2, #127	; 0x7f
    540c:	d815      	bhi.n	543a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    540e:	7b62      	ldrb	r2, [r4, #13]
    5410:	06d2      	lsls	r2, r2, #27
    5412:	d112      	bne.n	543a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5414:	4a0d      	ldr	r2, [pc, #52]	; (544c <z_time_slice+0x7c>)
    5416:	f994 100e 	ldrsb.w	r1, [r4, #14]
    541a:	6812      	ldr	r2, [r2, #0]
    541c:	4291      	cmp	r1, r2
    541e:	db0c      	blt.n	543a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    5420:	4a0b      	ldr	r2, [pc, #44]	; (5450 <z_time_slice+0x80>)
    5422:	4294      	cmp	r4, r2
    5424:	d009      	beq.n	543a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5426:	691a      	ldr	r2, [r3, #16]
    5428:	4282      	cmp	r2, r0
    542a:	dc03      	bgt.n	5434 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    542c:	4620      	mov	r0, r4
    542e:	f7ff ff95 	bl	535c <move_thread_to_end_of_prio_q>
    5432:	e7dc      	b.n	53ee <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5434:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    5436:	611a      	str	r2, [r3, #16]
    5438:	e7dc      	b.n	53f4 <z_time_slice+0x24>
    543a:	2200      	movs	r2, #0
    543c:	e7fb      	b.n	5436 <z_time_slice+0x66>
    543e:	bf00      	nop
    5440:	20001100 	.word	0x20001100
    5444:	20001128 	.word	0x20001128
    5448:	20001130 	.word	0x20001130
    544c:	2000112c 	.word	0x2000112c
    5450:	200008d0 	.word	0x200008d0

00005454 <ready_thread>:
{
    5454:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5456:	f990 200d 	ldrsb.w	r2, [r0, #13]
    545a:	7b43      	ldrb	r3, [r0, #13]
    545c:	2a00      	cmp	r2, #0
    545e:	db2a      	blt.n	54b6 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5460:	06da      	lsls	r2, r3, #27
    5462:	d128      	bne.n	54b6 <ready_thread+0x62>
    5464:	6982      	ldr	r2, [r0, #24]
    5466:	bb32      	cbnz	r2, 54b6 <ready_thread+0x62>
	return list->head == list;
    5468:	4a14      	ldr	r2, [pc, #80]	; (54bc <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    546a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    546e:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    5470:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5474:	f102 0520 	add.w	r5, r2, #32
    5478:	42ab      	cmp	r3, r5
    547a:	d017      	beq.n	54ac <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    547c:	b1b3      	cbz	r3, 54ac <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    547e:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5482:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5486:	428e      	cmp	r6, r1
    5488:	d00b      	beq.n	54a2 <ready_thread+0x4e>
		return b2 - b1;
    548a:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    548c:	2900      	cmp	r1, #0
    548e:	dd08      	ble.n	54a2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    5490:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5492:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5496:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5498:	6058      	str	r0, [r3, #4]
}
    549a:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    549c:	2000      	movs	r0, #0
    549e:	f7ff bf3d 	b.w	531c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    54a2:	42a3      	cmp	r3, r4
    54a4:	d002      	beq.n	54ac <ready_thread+0x58>
    54a6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    54a8:	2b00      	cmp	r3, #0
    54aa:	d1ea      	bne.n	5482 <ready_thread+0x2e>
	node->prev = tail;
    54ac:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    54b0:	6020      	str	r0, [r4, #0]
	list->tail = node;
    54b2:	6250      	str	r0, [r2, #36]	; 0x24
}
    54b4:	e7f1      	b.n	549a <ready_thread+0x46>
}
    54b6:	bc70      	pop	{r4, r5, r6}
    54b8:	4770      	bx	lr
    54ba:	bf00      	nop
    54bc:	20001100 	.word	0x20001100

000054c0 <z_sched_start>:
{
    54c0:	b510      	push	{r4, lr}
	__asm__ volatile(
    54c2:	f04f 0220 	mov.w	r2, #32
    54c6:	f3ef 8411 	mrs	r4, BASEPRI
    54ca:	f382 8812 	msr	BASEPRI_MAX, r2
    54ce:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    54d2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    54d4:	0751      	lsls	r1, r2, #29
    54d6:	d404      	bmi.n	54e2 <z_sched_start+0x22>
	__asm__ volatile(
    54d8:	f384 8811 	msr	BASEPRI, r4
    54dc:	f3bf 8f6f 	isb	sy
}
    54e0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    54e2:	f022 0204 	bic.w	r2, r2, #4
    54e6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    54e8:	f7ff ffb4 	bl	5454 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    54ec:	4621      	mov	r1, r4
    54ee:	4802      	ldr	r0, [pc, #8]	; (54f8 <z_sched_start+0x38>)
}
    54f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    54f4:	f7ff beec 	b.w	52d0 <z_reschedule>
    54f8:	2000174d 	.word	0x2000174d

000054fc <unready_thread>:
{
    54fc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    54fe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5502:	7b43      	ldrb	r3, [r0, #13]
    5504:	2a00      	cmp	r2, #0
{
    5506:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5508:	da04      	bge.n	5514 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    550a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    550e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5510:	f001 ffe8 	bl	74e4 <sys_dlist_remove>
	update_cache(thread == _current);
    5514:	4b04      	ldr	r3, [pc, #16]	; (5528 <unready_thread+0x2c>)
    5516:	6898      	ldr	r0, [r3, #8]
    5518:	1a43      	subs	r3, r0, r1
    551a:	4258      	negs	r0, r3
    551c:	4158      	adcs	r0, r3
}
    551e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5522:	f7ff befb 	b.w	531c <update_cache>
    5526:	bf00      	nop
    5528:	20001100 	.word	0x20001100

0000552c <pend>:
{
    552c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5530:	4606      	mov	r6, r0
    5532:	4615      	mov	r5, r2
    5534:	461c      	mov	r4, r3
	__asm__ volatile(
    5536:	f04f 0320 	mov.w	r3, #32
    553a:	f3ef 8711 	mrs	r7, BASEPRI
    553e:	f383 8812 	msr	BASEPRI_MAX, r3
    5542:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    5546:	f002 f83d 	bl	75c4 <add_to_waitq_locked>
	__asm__ volatile(
    554a:	f387 8811 	msr	BASEPRI, r7
    554e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5552:	f1b4 3fff 	cmp.w	r4, #4294967295
    5556:	bf08      	it	eq
    5558:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    555c:	d008      	beq.n	5570 <pend+0x44>
    555e:	462a      	mov	r2, r5
    5560:	4623      	mov	r3, r4
    5562:	f106 0018 	add.w	r0, r6, #24
    5566:	4903      	ldr	r1, [pc, #12]	; (5574 <pend+0x48>)
}
    5568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    556c:	f000 ba18 	b.w	59a0 <z_add_timeout>
    5570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5574:	00007581 	.word	0x00007581

00005578 <z_pend_curr>:
{
    5578:	b510      	push	{r4, lr}
	pending_current = _current;
    557a:	4b07      	ldr	r3, [pc, #28]	; (5598 <z_pend_curr+0x20>)
    557c:	6898      	ldr	r0, [r3, #8]
    557e:	4b07      	ldr	r3, [pc, #28]	; (559c <z_pend_curr+0x24>)
{
    5580:	460c      	mov	r4, r1
	pending_current = _current;
    5582:	6018      	str	r0, [r3, #0]
{
    5584:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    558a:	f7ff ffcf 	bl	552c <pend>
    558e:	4620      	mov	r0, r4
}
    5590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5594:	f7fc be0a 	b.w	21ac <arch_swap>
    5598:	20001100 	.word	0x20001100
    559c:	20001128 	.word	0x20001128

000055a0 <z_set_prio>:
{
    55a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    55a2:	4604      	mov	r4, r0
	__asm__ volatile(
    55a4:	f04f 0320 	mov.w	r3, #32
    55a8:	f3ef 8611 	mrs	r6, BASEPRI
    55ac:	f383 8812 	msr	BASEPRI_MAX, r3
    55b0:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    55b4:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    55b6:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    55b8:	b249      	sxtb	r1, r1
    55ba:	d133      	bne.n	5624 <z_set_prio+0x84>
		if (need_sched) {
    55bc:	6982      	ldr	r2, [r0, #24]
    55be:	bb8a      	cbnz	r2, 5624 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    55c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    55c4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    55c6:	f001 ff8d 	bl	74e4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    55ca:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    55cc:	4a17      	ldr	r2, [pc, #92]	; (562c <z_set_prio+0x8c>)
				thread->base.prio = prio;
    55ce:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    55d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    55d4:	7343      	strb	r3, [r0, #13]
    55d6:	4610      	mov	r0, r2
    55d8:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    55dc:	4283      	cmp	r3, r0
    55de:	d01b      	beq.n	5618 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    55e0:	b1d3      	cbz	r3, 5618 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    55e2:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    55e4:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    55e8:	42a9      	cmp	r1, r5
    55ea:	d010      	beq.n	560e <z_set_prio+0x6e>
		return b2 - b1;
    55ec:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    55ee:	2d00      	cmp	r5, #0
    55f0:	dd0d      	ble.n	560e <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    55f2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    55f4:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    55f8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    55fa:	605c      	str	r4, [r3, #4]
			update_cache(1);
    55fc:	2001      	movs	r0, #1
    55fe:	f7ff fe8d 	bl	531c <update_cache>
    5602:	2001      	movs	r0, #1
	__asm__ volatile(
    5604:	f386 8811 	msr	BASEPRI, r6
    5608:	f3bf 8f6f 	isb	sy
}
    560c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    560e:	42bb      	cmp	r3, r7
    5610:	d002      	beq.n	5618 <z_set_prio+0x78>
    5612:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5614:	2b00      	cmp	r3, #0
    5616:	d1e5      	bne.n	55e4 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    5618:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    561a:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    561e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5620:	6254      	str	r4, [r2, #36]	; 0x24
}
    5622:	e7eb      	b.n	55fc <z_set_prio+0x5c>
			thread->base.prio = prio;
    5624:	73a1      	strb	r1, [r4, #14]
    5626:	2000      	movs	r0, #0
    5628:	e7ec      	b.n	5604 <z_set_prio+0x64>
    562a:	bf00      	nop
    562c:	20001100 	.word	0x20001100

00005630 <z_impl_k_thread_suspend>:
{
    5630:	b570      	push	{r4, r5, r6, lr}
    5632:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5634:	3018      	adds	r0, #24
    5636:	f002 f81c 	bl	7672 <z_abort_timeout>
	__asm__ volatile(
    563a:	f04f 0320 	mov.w	r3, #32
    563e:	f3ef 8611 	mrs	r6, BASEPRI
    5642:	f383 8812 	msr	BASEPRI_MAX, r3
    5646:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    564a:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    564e:	7b63      	ldrb	r3, [r4, #13]
    5650:	2a00      	cmp	r2, #0
    5652:	da05      	bge.n	5660 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5658:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    565a:	4620      	mov	r0, r4
    565c:	f001 ff42 	bl	74e4 <sys_dlist_remove>
		update_cache(thread == _current);
    5660:	4d0b      	ldr	r5, [pc, #44]	; (5690 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5662:	7b63      	ldrb	r3, [r4, #13]
    5664:	68a8      	ldr	r0, [r5, #8]
    5666:	f043 0310 	orr.w	r3, r3, #16
    566a:	7363      	strb	r3, [r4, #13]
    566c:	1b03      	subs	r3, r0, r4
    566e:	4258      	negs	r0, r3
    5670:	4158      	adcs	r0, r3
    5672:	f7ff fe53 	bl	531c <update_cache>
	__asm__ volatile(
    5676:	f386 8811 	msr	BASEPRI, r6
    567a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    567e:	68ab      	ldr	r3, [r5, #8]
    5680:	42a3      	cmp	r3, r4
    5682:	d103      	bne.n	568c <z_impl_k_thread_suspend+0x5c>
}
    5684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5688:	f001 bf5a 	b.w	7540 <z_reschedule_unlocked>
}
    568c:	bd70      	pop	{r4, r5, r6, pc}
    568e:	bf00      	nop
    5690:	20001100 	.word	0x20001100

00005694 <k_sched_unlock>:
{
    5694:	b510      	push	{r4, lr}
	__asm__ volatile(
    5696:	f04f 0320 	mov.w	r3, #32
    569a:	f3ef 8411 	mrs	r4, BASEPRI
    569e:	f383 8812 	msr	BASEPRI_MAX, r3
    56a2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    56a6:	4b08      	ldr	r3, [pc, #32]	; (56c8 <k_sched_unlock+0x34>)
    56a8:	689a      	ldr	r2, [r3, #8]
    56aa:	7bd3      	ldrb	r3, [r2, #15]
    56ac:	3301      	adds	r3, #1
    56ae:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    56b0:	2000      	movs	r0, #0
    56b2:	f7ff fe33 	bl	531c <update_cache>
	__asm__ volatile(
    56b6:	f384 8811 	msr	BASEPRI, r4
    56ba:	f3bf 8f6f 	isb	sy
}
    56be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    56c2:	f001 bf3d 	b.w	7540 <z_reschedule_unlocked>
    56c6:	bf00      	nop
    56c8:	20001100 	.word	0x20001100

000056cc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    56cc:	4b04      	ldr	r3, [pc, #16]	; (56e0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    56ce:	2100      	movs	r1, #0
    56d0:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    56d4:	e9c3 2208 	strd	r2, r2, [r3, #32]
    56d8:	4608      	mov	r0, r1
    56da:	f7ff bdc7 	b.w	526c <k_sched_time_slice_set>
    56de:	bf00      	nop
    56e0:	20001100 	.word	0x20001100

000056e4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    56e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    56e6:	f04f 0320 	mov.w	r3, #32
    56ea:	f3ef 8511 	mrs	r5, BASEPRI
    56ee:	f383 8812 	msr	BASEPRI_MAX, r3
    56f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    56f6:	491a      	ldr	r1, [pc, #104]	; (5760 <z_impl_k_yield+0x7c>)
    56f8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    56fa:	7b43      	ldrb	r3, [r0, #13]
    56fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5700:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5702:	f001 feef 	bl	74e4 <sys_dlist_remove>
	}
	queue_thread(_current);
    5706:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5708:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    570a:	4608      	mov	r0, r1
    570c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5710:	735a      	strb	r2, [r3, #13]
    5712:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5716:	4282      	cmp	r2, r0
    5718:	d01c      	beq.n	5754 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    571a:	b1da      	cbz	r2, 5754 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    571c:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    571e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5722:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    5726:	42a6      	cmp	r6, r4
    5728:	d00f      	beq.n	574a <z_impl_k_yield+0x66>
		return b2 - b1;
    572a:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    572c:	2c00      	cmp	r4, #0
    572e:	dd0c      	ble.n	574a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    5730:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5732:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5736:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5738:	6053      	str	r3, [r2, #4]
	update_cache(1);
    573a:	2001      	movs	r0, #1
    573c:	f7ff fdee 	bl	531c <update_cache>
    5740:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5742:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5746:	f7fc bd31 	b.w	21ac <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    574a:	42ba      	cmp	r2, r7
    574c:	d002      	beq.n	5754 <z_impl_k_yield+0x70>
    574e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5750:	2a00      	cmp	r2, #0
    5752:	d1e6      	bne.n	5722 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    5754:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    5756:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    575a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    575c:	624b      	str	r3, [r1, #36]	; 0x24
}
    575e:	e7ec      	b.n	573a <z_impl_k_yield+0x56>
    5760:	20001100 	.word	0x20001100

00005764 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5764:	ea50 0301 	orrs.w	r3, r0, r1
{
    5768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    576c:	4605      	mov	r5, r0
    576e:	460e      	mov	r6, r1
	if (ticks == 0) {
    5770:	d103      	bne.n	577a <z_tick_sleep+0x16>
	z_impl_k_yield();
    5772:	f7ff ffb7 	bl	56e4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    5776:	2000      	movs	r0, #0
    5778:	e033      	b.n	57e2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    577a:	f06f 0401 	mvn.w	r4, #1
    577e:	1a24      	subs	r4, r4, r0
    5780:	f04f 33ff 	mov.w	r3, #4294967295
    5784:	eb63 0301 	sbc.w	r3, r3, r1
    5788:	2c01      	cmp	r4, #1
    578a:	f173 0300 	sbcs.w	r3, r3, #0
    578e:	da02      	bge.n	5796 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5790:	f001 ffaf 	bl	76f2 <sys_clock_tick_get_32>
    5794:	1944      	adds	r4, r0, r5
    5796:	f04f 0320 	mov.w	r3, #32
    579a:	f3ef 8811 	mrs	r8, BASEPRI
    579e:	f383 8812 	msr	BASEPRI_MAX, r3
    57a2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    57a6:	4f10      	ldr	r7, [pc, #64]	; (57e8 <z_tick_sleep+0x84>)
    57a8:	4b10      	ldr	r3, [pc, #64]	; (57ec <z_tick_sleep+0x88>)
    57aa:	68b8      	ldr	r0, [r7, #8]
    57ac:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    57ae:	f7ff fea5 	bl	54fc <unready_thread>
	z_add_thread_timeout(_current, timeout);
    57b2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    57b4:	490e      	ldr	r1, [pc, #56]	; (57f0 <z_tick_sleep+0x8c>)
    57b6:	462a      	mov	r2, r5
    57b8:	4633      	mov	r3, r6
    57ba:	3018      	adds	r0, #24
    57bc:	f000 f8f0 	bl	59a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    57c0:	68ba      	ldr	r2, [r7, #8]
    57c2:	7b53      	ldrb	r3, [r2, #13]
    57c4:	f043 0310 	orr.w	r3, r3, #16
    57c8:	7353      	strb	r3, [r2, #13]
    57ca:	4640      	mov	r0, r8
    57cc:	f7fc fcee 	bl	21ac <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    57d0:	f001 ff8f 	bl	76f2 <sys_clock_tick_get_32>
    57d4:	1a20      	subs	r0, r4, r0
    57d6:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    57da:	2801      	cmp	r0, #1
    57dc:	f173 0300 	sbcs.w	r3, r3, #0
    57e0:	dbc9      	blt.n	5776 <z_tick_sleep+0x12>
}
    57e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57e6:	bf00      	nop
    57e8:	20001100 	.word	0x20001100
    57ec:	20001128 	.word	0x20001128
    57f0:	00007581 	.word	0x00007581

000057f4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    57f4:	f1b1 3fff 	cmp.w	r1, #4294967295
    57f8:	bf08      	it	eq
    57fa:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    57fe:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5800:	d106      	bne.n	5810 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5802:	4b08      	ldr	r3, [pc, #32]	; (5824 <z_impl_k_sleep+0x30>)
    5804:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5806:	f7ff ff13 	bl	5630 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    580a:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    580e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5810:	f7ff ffa8 	bl	5764 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5814:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5818:	fb80 0303 	smull	r0, r3, r0, r3
    581c:	0bc0      	lsrs	r0, r0, #15
    581e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5822:	e7f4      	b.n	580e <z_impl_k_sleep+0x1a>
    5824:	20001100 	.word	0x20001100

00005828 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5828:	4b01      	ldr	r3, [pc, #4]	; (5830 <z_impl_z_current_get+0x8>)
    582a:	6898      	ldr	r0, [r3, #8]
    582c:	4770      	bx	lr
    582e:	bf00      	nop
    5830:	20001100 	.word	0x20001100

00005834 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5838:	4604      	mov	r4, r0
    583a:	f04f 0320 	mov.w	r3, #32
    583e:	f3ef 8611 	mrs	r6, BASEPRI
    5842:	f383 8812 	msr	BASEPRI_MAX, r3
    5846:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    584a:	7b43      	ldrb	r3, [r0, #13]
    584c:	071a      	lsls	r2, r3, #28
    584e:	d505      	bpl.n	585c <z_thread_abort+0x28>
	__asm__ volatile(
    5850:	f386 8811 	msr	BASEPRI, r6
    5854:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    585c:	f023 0220 	bic.w	r2, r3, #32
    5860:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5864:	09d2      	lsrs	r2, r2, #7
    5866:	d120      	bne.n	58aa <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5868:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    586a:	68a3      	ldr	r3, [r4, #8]
    586c:	b113      	cbz	r3, 5874 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    586e:	4620      	mov	r0, r4
    5870:	f001 fe40 	bl	74f4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5874:	f104 0018 	add.w	r0, r4, #24
    5878:	f001 fefb 	bl	7672 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    587c:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5880:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5884:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5886:	42bd      	cmp	r5, r7
    5888:	d000      	beq.n	588c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    588a:	b9b5      	cbnz	r5, 58ba <z_thread_abort+0x86>
		update_cache(1);
    588c:	2001      	movs	r0, #1
    588e:	f7ff fd45 	bl	531c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5892:	4b10      	ldr	r3, [pc, #64]	; (58d4 <z_thread_abort+0xa0>)
    5894:	689b      	ldr	r3, [r3, #8]
    5896:	42a3      	cmp	r3, r4
    5898:	d1da      	bne.n	5850 <z_thread_abort+0x1c>
    589a:	f3ef 8305 	mrs	r3, IPSR
    589e:	2b00      	cmp	r3, #0
    58a0:	d1d6      	bne.n	5850 <z_thread_abort+0x1c>
    58a2:	4630      	mov	r0, r6
    58a4:	f7fc fc82 	bl	21ac <arch_swap>
	return ret;
    58a8:	e7d2      	b.n	5850 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    58aa:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    58ae:	f043 0308 	orr.w	r3, r3, #8
    58b2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    58b4:	f001 fe16 	bl	74e4 <sys_dlist_remove>
}
    58b8:	e7d7      	b.n	586a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    58ba:	4628      	mov	r0, r5
    58bc:	f001 fe1a 	bl	74f4 <unpend_thread_no_timeout>
    58c0:	f105 0018 	add.w	r0, r5, #24
    58c4:	f001 fed5 	bl	7672 <z_abort_timeout>
    58c8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    58cc:	4628      	mov	r0, r5
    58ce:	f7ff fdc1 	bl	5454 <ready_thread>
    58d2:	e7d7      	b.n	5884 <z_thread_abort+0x50>
    58d4:	20001100 	.word	0x20001100

000058d8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    58d8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    58da:	4806      	ldr	r0, [pc, #24]	; (58f4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    58dc:	4a06      	ldr	r2, [pc, #24]	; (58f8 <z_data_copy+0x20>)
    58de:	4907      	ldr	r1, [pc, #28]	; (58fc <z_data_copy+0x24>)
    58e0:	1a12      	subs	r2, r2, r0
    58e2:	f001 fd8c 	bl	73fe <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    58e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    58ea:	4a05      	ldr	r2, [pc, #20]	; (5900 <z_data_copy+0x28>)
    58ec:	4905      	ldr	r1, [pc, #20]	; (5904 <z_data_copy+0x2c>)
    58ee:	4806      	ldr	r0, [pc, #24]	; (5908 <z_data_copy+0x30>)
    58f0:	f001 bd85 	b.w	73fe <z_early_memcpy>
    58f4:	20000000 	.word	0x20000000
    58f8:	20000248 	.word	0x20000248
    58fc:	000084dc 	.word	0x000084dc
    5900:	00000000 	.word	0x00000000
    5904:	000084dc 	.word	0x000084dc
    5908:	20000000 	.word	0x20000000

0000590c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    590c:	4b03      	ldr	r3, [pc, #12]	; (591c <elapsed+0x10>)
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	b90b      	cbnz	r3, 5916 <elapsed+0xa>
    5912:	f7fe bad5 	b.w	3ec0 <sys_clock_elapsed>
}
    5916:	2000      	movs	r0, #0
    5918:	4770      	bx	lr
    591a:	bf00      	nop
    591c:	20001134 	.word	0x20001134

00005920 <next_timeout>:
	return list->head == list;
    5920:	4b10      	ldr	r3, [pc, #64]	; (5964 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    5922:	b510      	push	{r4, lr}
    5924:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5926:	429c      	cmp	r4, r3
    5928:	bf08      	it	eq
    592a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    592c:	f7ff ffee 	bl	590c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    5930:	b1a4      	cbz	r4, 595c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5932:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5936:	1a1b      	subs	r3, r3, r0
    5938:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    593c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5940:	f170 0200 	sbcs.w	r2, r0, #0
    5944:	da0a      	bge.n	595c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    5946:	2800      	cmp	r0, #0
    5948:	bfac      	ite	ge
    594a:	4618      	movge	r0, r3
    594c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    594e:	4b06      	ldr	r3, [pc, #24]	; (5968 <next_timeout+0x48>)
    5950:	691b      	ldr	r3, [r3, #16]
    5952:	b113      	cbz	r3, 595a <next_timeout+0x3a>
    5954:	4298      	cmp	r0, r3
    5956:	bfa8      	it	ge
    5958:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    595a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    595c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5960:	e7f5      	b.n	594e <next_timeout+0x2e>
    5962:	bf00      	nop
    5964:	200000e8 	.word	0x200000e8
    5968:	20001100 	.word	0x20001100

0000596c <remove_timeout>:
{
    596c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    596e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5970:	b168      	cbz	r0, 598e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5972:	4a0a      	ldr	r2, [pc, #40]	; (599c <remove_timeout+0x30>)
    5974:	6852      	ldr	r2, [r2, #4]
    5976:	4290      	cmp	r0, r2
    5978:	d009      	beq.n	598e <remove_timeout+0x22>
	if (next(t) != NULL) {
    597a:	b143      	cbz	r3, 598e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    597c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5980:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5984:	1912      	adds	r2, r2, r4
    5986:	eb41 0105 	adc.w	r1, r1, r5
    598a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    598e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5990:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5992:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5994:	2300      	movs	r3, #0
	node->prev = NULL;
    5996:	e9c0 3300 	strd	r3, r3, [r0]
}
    599a:	bd30      	pop	{r4, r5, pc}
    599c:	200000e8 	.word	0x200000e8

000059a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    59a0:	f1b3 3fff 	cmp.w	r3, #4294967295
    59a4:	bf08      	it	eq
    59a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    59aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    59ac:	4604      	mov	r4, r0
    59ae:	461f      	mov	r7, r3
    59b0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    59b2:	d067      	beq.n	5a84 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    59b4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    59b6:	f04f 0320 	mov.w	r3, #32
    59ba:	f3ef 8611 	mrs	r6, BASEPRI
    59be:	f383 8812 	msr	BASEPRI_MAX, r3
    59c2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    59c6:	f06f 0201 	mvn.w	r2, #1
    59ca:	1b53      	subs	r3, r2, r5
    59cc:	f04f 3cff 	mov.w	ip, #4294967295
    59d0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    59d4:	2b00      	cmp	r3, #0
    59d6:	db1b      	blt.n	5a10 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    59d8:	4b2b      	ldr	r3, [pc, #172]	; (5a88 <z_add_timeout+0xe8>)
    59da:	e9d3 1300 	ldrd	r1, r3, [r3]
    59de:	1a52      	subs	r2, r2, r1
    59e0:	eb6c 0303 	sbc.w	r3, ip, r3
    59e4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    59e6:	eb63 0307 	sbc.w	r3, r3, r7
    59ea:	2d01      	cmp	r5, #1
    59ec:	f173 0200 	sbcs.w	r2, r3, #0
    59f0:	bfbc      	itt	lt
    59f2:	2501      	movlt	r5, #1
    59f4:	2300      	movlt	r3, #0
    59f6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    59fa:	4824      	ldr	r0, [pc, #144]	; (5a8c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    59fc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a00:	4283      	cmp	r3, r0
    5a02:	d118      	bne.n	5a36 <z_add_timeout+0x96>
	node->prev = tail;
    5a04:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    5a08:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5a0c:	6044      	str	r4, [r0, #4]
}
    5a0e:	e026      	b.n	5a5e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5a10:	f7ff ff7c 	bl	590c <elapsed>
    5a14:	3501      	adds	r5, #1
    5a16:	f147 0700 	adc.w	r7, r7, #0
    5a1a:	182d      	adds	r5, r5, r0
    5a1c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    5a20:	e9c4 5704 	strd	r5, r7, [r4, #16]
    5a24:	e7e9      	b.n	59fa <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5a26:	1a52      	subs	r2, r2, r1
    5a28:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    5a2c:	459c      	cmp	ip, r3
    5a2e:	e9c4 2504 	strd	r2, r5, [r4, #16]
    5a32:	d0e7      	beq.n	5a04 <z_add_timeout+0x64>
    5a34:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5a36:	2b00      	cmp	r3, #0
    5a38:	d0e4      	beq.n	5a04 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    5a3a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    5a3e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    5a42:	428a      	cmp	r2, r1
    5a44:	eb75 0e07 	sbcs.w	lr, r5, r7
    5a48:	daed      	bge.n	5a26 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    5a4a:	1a8a      	subs	r2, r1, r2
    5a4c:	eb67 0505 	sbc.w	r5, r7, r5
    5a50:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5a54:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5a56:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5a5a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5a5c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    5a5e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5a60:	4283      	cmp	r3, r0
    5a62:	d00b      	beq.n	5a7c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5a64:	429c      	cmp	r4, r3
    5a66:	d109      	bne.n	5a7c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5a68:	f7ff ff5a 	bl	5920 <next_timeout>

			if (next_time == 0 ||
    5a6c:	b118      	cbz	r0, 5a76 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    5a6e:	4b08      	ldr	r3, [pc, #32]	; (5a90 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    5a70:	691b      	ldr	r3, [r3, #16]
    5a72:	4283      	cmp	r3, r0
    5a74:	d002      	beq.n	5a7c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    5a76:	2100      	movs	r1, #0
    5a78:	f7fe f9f0 	bl	3e5c <sys_clock_set_timeout>
	__asm__ volatile(
    5a7c:	f386 8811 	msr	BASEPRI, r6
    5a80:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5a86:	bf00      	nop
    5a88:	200009d0 	.word	0x200009d0
    5a8c:	200000e8 	.word	0x200000e8
    5a90:	20001100 	.word	0x20001100

00005a94 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5a98:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5a9a:	f7ff fc99 	bl	53d0 <z_time_slice>
	__asm__ volatile(
    5a9e:	f04f 0320 	mov.w	r3, #32
    5aa2:	f3ef 8411 	mrs	r4, BASEPRI
    5aa6:	f383 8812 	msr	BASEPRI_MAX, r3
    5aaa:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5aae:	4e24      	ldr	r6, [pc, #144]	; (5b40 <sys_clock_announce+0xac>)
	return list->head == list;
    5ab0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 5b44 <sys_clock_announce+0xb0>
    5ab4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5ab6:	4d24      	ldr	r5, [pc, #144]	; (5b48 <sys_clock_announce+0xb4>)
    5ab8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5abc:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5abe:	4540      	cmp	r0, r8
		curr_tick += dt;
    5ac0:	e9d5 1e00 	ldrd	r1, lr, [r5]
    5ac4:	ea4f 77e2 	mov.w	r7, r2, asr #31
    5ac8:	d00b      	beq.n	5ae2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5aca:	b150      	cbz	r0, 5ae2 <sys_clock_announce+0x4e>
    5acc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    5ad0:	429a      	cmp	r2, r3
    5ad2:	eb77 090c 	sbcs.w	r9, r7, ip
    5ad6:	da16      	bge.n	5b06 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5ad8:	1a9b      	subs	r3, r3, r2
    5ada:	eb6c 0c07 	sbc.w	ip, ip, r7
    5ade:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5ae2:	1852      	adds	r2, r2, r1
    5ae4:	eb4e 0707 	adc.w	r7, lr, r7
    5ae8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    5aec:	2500      	movs	r5, #0
    5aee:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5af0:	f7ff ff16 	bl	5920 <next_timeout>
    5af4:	4629      	mov	r1, r5
    5af6:	f7fe f9b1 	bl	3e5c <sys_clock_set_timeout>
	__asm__ volatile(
    5afa:	f384 8811 	msr	BASEPRI, r4
    5afe:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5b06:	1859      	adds	r1, r3, r1
    5b08:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    5b0c:	1ad3      	subs	r3, r2, r3
    5b0e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    5b10:	2200      	movs	r2, #0
    5b12:	2300      	movs	r3, #0
    5b14:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    5b18:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    5b1c:	f7ff ff26 	bl	596c <remove_timeout>
    5b20:	f384 8811 	msr	BASEPRI, r4
    5b24:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5b28:	6883      	ldr	r3, [r0, #8]
    5b2a:	4798      	blx	r3
	__asm__ volatile(
    5b2c:	f04f 0320 	mov.w	r3, #32
    5b30:	f3ef 8411 	mrs	r4, BASEPRI
    5b34:	f383 8812 	msr	BASEPRI_MAX, r3
    5b38:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5b3c:	e7bc      	b.n	5ab8 <sys_clock_announce+0x24>
    5b3e:	bf00      	nop
    5b40:	20001134 	.word	0x20001134
    5b44:	200000e8 	.word	0x200000e8
    5b48:	200009d0 	.word	0x200009d0

00005b4c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5b4c:	b510      	push	{r4, lr}
    5b4e:	f04f 0320 	mov.w	r3, #32
    5b52:	f3ef 8411 	mrs	r4, BASEPRI
    5b56:	f383 8812 	msr	BASEPRI_MAX, r3
    5b5a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    5b5e:	f7fe f9af 	bl	3ec0 <sys_clock_elapsed>
    5b62:	4a05      	ldr	r2, [pc, #20]	; (5b78 <sys_clock_tick_get+0x2c>)
    5b64:	e9d2 3100 	ldrd	r3, r1, [r2]
    5b68:	18c0      	adds	r0, r0, r3
    5b6a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    5b6e:	f384 8811 	msr	BASEPRI, r4
    5b72:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5b76:	bd10      	pop	{r4, pc}
    5b78:	200009d0 	.word	0x200009d0

00005b7c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    5b7c:	b570      	push	{r4, r5, r6, lr}
    5b7e:	4604      	mov	r4, r0
	__asm__ volatile(
    5b80:	f04f 0320 	mov.w	r3, #32
    5b84:	f3ef 8511 	mrs	r5, BASEPRI
    5b88:	f383 8812 	msr	BASEPRI_MAX, r3
    5b8c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5b90:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    5b94:	3301      	adds	r3, #1
    5b96:	f142 0200 	adc.w	r2, r2, #0
    5b9a:	2b02      	cmp	r3, #2
    5b9c:	f172 0300 	sbcs.w	r3, r2, #0
    5ba0:	d304      	bcc.n	5bac <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5ba2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    5ba6:	4917      	ldr	r1, [pc, #92]	; (5c04 <z_timer_expiration_handler+0x88>)
    5ba8:	f7ff fefa 	bl	59a0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    5bac:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5bae:	3301      	adds	r3, #1
    5bb0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    5bb2:	6a23      	ldr	r3, [r4, #32]
    5bb4:	b173      	cbz	r3, 5bd4 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    5bb6:	f385 8811 	msr	BASEPRI, r5
    5bba:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    5bbe:	6a23      	ldr	r3, [r4, #32]
    5bc0:	4620      	mov	r0, r4
    5bc2:	4798      	blx	r3
	__asm__ volatile(
    5bc4:	f04f 0320 	mov.w	r3, #32
    5bc8:	f3ef 8511 	mrs	r5, BASEPRI
    5bcc:	f383 8812 	msr	BASEPRI_MAX, r3
    5bd0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5bd4:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5bd8:	42a6      	cmp	r6, r4
    5bda:	d000      	beq.n	5bde <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    5bdc:	b926      	cbnz	r6, 5be8 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    5bde:	f385 8811 	msr	BASEPRI, r5
    5be2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    5be6:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    5be8:	4630      	mov	r0, r6
    5bea:	f001 fc8d 	bl	7508 <z_unpend_thread_no_timeout>
    5bee:	2300      	movs	r3, #0
    5bf0:	67b3      	str	r3, [r6, #120]	; 0x78
    5bf2:	f385 8811 	msr	BASEPRI, r5
    5bf6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    5bfa:	4630      	mov	r0, r6
}
    5bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    5c00:	f001 bcae 	b.w	7560 <z_ready_thread>
    5c04:	00005b7d 	.word	0x00005b7d

00005c08 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    5c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c0c:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
    5c12:	bf08      	it	eq
    5c14:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
    5c18:	4606      	mov	r6, r0
    5c1a:	461c      	mov	r4, r3
    5c1c:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    5c20:	4689      	mov	r9, r1
    5c22:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    5c24:	d03e      	beq.n	5ca4 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5c26:	f1b0 3fff 	cmp.w	r0, #4294967295
    5c2a:	bf08      	it	eq
    5c2c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    5c30:	4615      	mov	r5, r2
    5c32:	4607      	mov	r7, r0
    5c34:	d014      	beq.n	5c60 <z_impl_k_timer_start+0x58>
    5c36:	ea50 0302 	orrs.w	r3, r0, r2
    5c3a:	d011      	beq.n	5c60 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    5c3c:	f06f 0301 	mvn.w	r3, #1
    5c40:	1a9b      	subs	r3, r3, r2
    5c42:	f04f 33ff 	mov.w	r3, #4294967295
    5c46:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    5c4a:	2b00      	cmp	r3, #0
    5c4c:	da08      	bge.n	5c60 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    5c4e:	2a02      	cmp	r2, #2
    5c50:	f170 0300 	sbcs.w	r3, r0, #0
    5c54:	bfbc      	itt	lt
    5c56:	2502      	movlt	r5, #2
    5c58:	2700      	movlt	r7, #0
    5c5a:	3d01      	subs	r5, #1
    5c5c:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    5c60:	f06f 0301 	mvn.w	r3, #1
    5c64:	1a5b      	subs	r3, r3, r1
    5c66:	f04f 33ff 	mov.w	r3, #4294967295
    5c6a:	eb63 0304 	sbc.w	r3, r3, r4
    5c6e:	2b00      	cmp	r3, #0
    5c70:	da09      	bge.n	5c86 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    5c72:	2901      	cmp	r1, #1
    5c74:	f174 0300 	sbcs.w	r3, r4, #0
    5c78:	bfbc      	itt	lt
    5c7a:	2101      	movlt	r1, #1
    5c7c:	2400      	movlt	r4, #0
    5c7e:	f111 39ff 	adds.w	r9, r1, #4294967295
    5c82:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    5c86:	4630      	mov	r0, r6
    5c88:	f001 fcf3 	bl	7672 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    5c8c:	2300      	movs	r3, #0
    5c8e:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    5c90:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5c94:	464a      	mov	r2, r9
    5c96:	4643      	mov	r3, r8
    5c98:	4630      	mov	r0, r6
    5c9a:	4903      	ldr	r1, [pc, #12]	; (5ca8 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    5c9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5ca0:	f7ff be7e 	b.w	59a0 <z_add_timeout>
}
    5ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ca8:	00005b7d 	.word	0x00005b7d

00005cac <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    5cac:	4a02      	ldr	r2, [pc, #8]	; (5cb8 <boot_banner+0xc>)
    5cae:	4903      	ldr	r1, [pc, #12]	; (5cbc <boot_banner+0x10>)
    5cb0:	4803      	ldr	r0, [pc, #12]	; (5cc0 <boot_banner+0x14>)
    5cb2:	f000 ba6f 	b.w	6194 <printk>
    5cb6:	bf00      	nop
    5cb8:	00007d8d 	.word	0x00007d8d
    5cbc:	000084a8 	.word	0x000084a8
    5cc0:	000084b5 	.word	0x000084b5

00005cc4 <nrf_cc3xx_platform_init_no_rng>:
    5cc4:	b510      	push	{r4, lr}
    5cc6:	4c0a      	ldr	r4, [pc, #40]	; (5cf0 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    5cc8:	6823      	ldr	r3, [r4, #0]
    5cca:	b11b      	cbz	r3, 5cd4 <nrf_cc3xx_platform_init_no_rng+0x10>
    5ccc:	2301      	movs	r3, #1
    5cce:	6023      	str	r3, [r4, #0]
    5cd0:	2000      	movs	r0, #0
    5cd2:	bd10      	pop	{r4, pc}
    5cd4:	f000 f8ce 	bl	5e74 <CC_LibInitNoRng>
    5cd8:	2800      	cmp	r0, #0
    5cda:	d0f7      	beq.n	5ccc <nrf_cc3xx_platform_init_no_rng+0x8>
    5cdc:	3801      	subs	r0, #1
    5cde:	2806      	cmp	r0, #6
    5ce0:	d803      	bhi.n	5cea <nrf_cc3xx_platform_init_no_rng+0x26>
    5ce2:	4b04      	ldr	r3, [pc, #16]	; (5cf4 <nrf_cc3xx_platform_init_no_rng+0x30>)
    5ce4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    5ce8:	bd10      	pop	{r4, pc}
    5cea:	4803      	ldr	r0, [pc, #12]	; (5cf8 <nrf_cc3xx_platform_init_no_rng+0x34>)
    5cec:	bd10      	pop	{r4, pc}
    5cee:	bf00      	nop
    5cf0:	20001138 	.word	0x20001138
    5cf4:	00007cb8 	.word	0x00007cb8
    5cf8:	ffff8ffe 	.word	0xffff8ffe

00005cfc <nrf_cc3xx_platform_abort>:
    5cfc:	f3bf 8f4f 	dsb	sy
    5d00:	4905      	ldr	r1, [pc, #20]	; (5d18 <nrf_cc3xx_platform_abort+0x1c>)
    5d02:	4b06      	ldr	r3, [pc, #24]	; (5d1c <nrf_cc3xx_platform_abort+0x20>)
    5d04:	68ca      	ldr	r2, [r1, #12]
    5d06:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5d0a:	4313      	orrs	r3, r2
    5d0c:	60cb      	str	r3, [r1, #12]
    5d0e:	f3bf 8f4f 	dsb	sy
    5d12:	bf00      	nop
    5d14:	e7fd      	b.n	5d12 <nrf_cc3xx_platform_abort+0x16>
    5d16:	bf00      	nop
    5d18:	e000ed00 	.word	0xe000ed00
    5d1c:	05fa0004 	.word	0x05fa0004

00005d20 <CC_PalAbort>:
    5d20:	b410      	push	{r4}
    5d22:	4b09      	ldr	r3, [pc, #36]	; (5d48 <CC_PalAbort+0x28>)
    5d24:	4909      	ldr	r1, [pc, #36]	; (5d4c <CC_PalAbort+0x2c>)
    5d26:	4c0a      	ldr	r4, [pc, #40]	; (5d50 <CC_PalAbort+0x30>)
    5d28:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    5d2c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    5d30:	6849      	ldr	r1, [r1, #4]
    5d32:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    5d36:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    5d3a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    5d3e:	2300      	movs	r3, #0
    5d40:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    5d44:	bc10      	pop	{r4}
    5d46:	4708      	bx	r1
    5d48:	5002b000 	.word	0x5002b000
    5d4c:	200000f0 	.word	0x200000f0
    5d50:	5002a000 	.word	0x5002a000

00005d54 <nrf_cc3xx_platform_set_abort>:
    5d54:	e9d0 1200 	ldrd	r1, r2, [r0]
    5d58:	4b01      	ldr	r3, [pc, #4]	; (5d60 <nrf_cc3xx_platform_set_abort+0xc>)
    5d5a:	e9c3 1200 	strd	r1, r2, [r3]
    5d5e:	4770      	bx	lr
    5d60:	200000f0 	.word	0x200000f0

00005d64 <mutex_free>:
    5d64:	b510      	push	{r4, lr}
    5d66:	4604      	mov	r4, r0
    5d68:	b130      	cbz	r0, 5d78 <mutex_free+0x14>
    5d6a:	6863      	ldr	r3, [r4, #4]
    5d6c:	06db      	lsls	r3, r3, #27
    5d6e:	d502      	bpl.n	5d76 <mutex_free+0x12>
    5d70:	2300      	movs	r3, #0
    5d72:	6023      	str	r3, [r4, #0]
    5d74:	6063      	str	r3, [r4, #4]
    5d76:	bd10      	pop	{r4, pc}
    5d78:	4b02      	ldr	r3, [pc, #8]	; (5d84 <mutex_free+0x20>)
    5d7a:	4803      	ldr	r0, [pc, #12]	; (5d88 <mutex_free+0x24>)
    5d7c:	685b      	ldr	r3, [r3, #4]
    5d7e:	4798      	blx	r3
    5d80:	e7f3      	b.n	5d6a <mutex_free+0x6>
    5d82:	bf00      	nop
    5d84:	200000f0 	.word	0x200000f0
    5d88:	00007cd4 	.word	0x00007cd4

00005d8c <mutex_lock>:
    5d8c:	b1b0      	cbz	r0, 5dbc <mutex_lock+0x30>
    5d8e:	6843      	ldr	r3, [r0, #4]
    5d90:	b193      	cbz	r3, 5db8 <mutex_lock+0x2c>
    5d92:	06db      	lsls	r3, r3, #27
    5d94:	d50e      	bpl.n	5db4 <mutex_lock+0x28>
    5d96:	2301      	movs	r3, #1
    5d98:	e850 2f00 	ldrex	r2, [r0]
    5d9c:	4619      	mov	r1, r3
    5d9e:	e840 1c00 	strex	ip, r1, [r0]
    5da2:	f09c 0f00 	teq	ip, #0
    5da6:	d1f7      	bne.n	5d98 <mutex_lock+0xc>
    5da8:	2a01      	cmp	r2, #1
    5daa:	d0f5      	beq.n	5d98 <mutex_lock+0xc>
    5dac:	f3bf 8f5f 	dmb	sy
    5db0:	2000      	movs	r0, #0
    5db2:	4770      	bx	lr
    5db4:	4803      	ldr	r0, [pc, #12]	; (5dc4 <mutex_lock+0x38>)
    5db6:	4770      	bx	lr
    5db8:	4803      	ldr	r0, [pc, #12]	; (5dc8 <mutex_lock+0x3c>)
    5dba:	4770      	bx	lr
    5dbc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5dc0:	4770      	bx	lr
    5dc2:	bf00      	nop
    5dc4:	ffff8fe9 	.word	0xffff8fe9
    5dc8:	ffff8fea 	.word	0xffff8fea

00005dcc <mutex_unlock>:
    5dcc:	b168      	cbz	r0, 5dea <mutex_unlock+0x1e>
    5dce:	6843      	ldr	r3, [r0, #4]
    5dd0:	b13b      	cbz	r3, 5de2 <mutex_unlock+0x16>
    5dd2:	06db      	lsls	r3, r3, #27
    5dd4:	d507      	bpl.n	5de6 <mutex_unlock+0x1a>
    5dd6:	f3bf 8f5f 	dmb	sy
    5dda:	2300      	movs	r3, #0
    5ddc:	6003      	str	r3, [r0, #0]
    5dde:	4618      	mov	r0, r3
    5de0:	4770      	bx	lr
    5de2:	4803      	ldr	r0, [pc, #12]	; (5df0 <mutex_unlock+0x24>)
    5de4:	4770      	bx	lr
    5de6:	4803      	ldr	r0, [pc, #12]	; (5df4 <mutex_unlock+0x28>)
    5de8:	4770      	bx	lr
    5dea:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    5dee:	4770      	bx	lr
    5df0:	ffff8fea 	.word	0xffff8fea
    5df4:	ffff8fe9 	.word	0xffff8fe9

00005df8 <mutex_init>:
    5df8:	b510      	push	{r4, lr}
    5dfa:	4604      	mov	r4, r0
    5dfc:	b120      	cbz	r0, 5e08 <mutex_init+0x10>
    5dfe:	2200      	movs	r2, #0
    5e00:	2311      	movs	r3, #17
    5e02:	6022      	str	r2, [r4, #0]
    5e04:	6063      	str	r3, [r4, #4]
    5e06:	bd10      	pop	{r4, pc}
    5e08:	4801      	ldr	r0, [pc, #4]	; (5e10 <mutex_init+0x18>)
    5e0a:	f7ff ff89 	bl	5d20 <CC_PalAbort>
    5e0e:	e7f6      	b.n	5dfe <mutex_init+0x6>
    5e10:	00007cfc 	.word	0x00007cfc

00005e14 <nrf_cc3xx_platform_set_mutexes>:
    5e14:	b570      	push	{r4, r5, r6, lr}
    5e16:	e9d0 2300 	ldrd	r2, r3, [r0]
    5e1a:	4c13      	ldr	r4, [pc, #76]	; (5e68 <nrf_cc3xx_platform_set_mutexes+0x54>)
    5e1c:	4d13      	ldr	r5, [pc, #76]	; (5e6c <nrf_cc3xx_platform_set_mutexes+0x58>)
    5e1e:	6063      	str	r3, [r4, #4]
    5e20:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    5e24:	e9c4 3002 	strd	r3, r0, [r4, #8]
    5e28:	6022      	str	r2, [r4, #0]
    5e2a:	4b11      	ldr	r3, [pc, #68]	; (5e70 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    5e2c:	6808      	ldr	r0, [r1, #0]
    5e2e:	6018      	str	r0, [r3, #0]
    5e30:	6848      	ldr	r0, [r1, #4]
    5e32:	6058      	str	r0, [r3, #4]
    5e34:	6888      	ldr	r0, [r1, #8]
    5e36:	6098      	str	r0, [r3, #8]
    5e38:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    5e3c:	60d8      	str	r0, [r3, #12]
    5e3e:	6119      	str	r1, [r3, #16]
    5e40:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    5e44:	06db      	lsls	r3, r3, #27
    5e46:	d50d      	bpl.n	5e64 <nrf_cc3xx_platform_set_mutexes+0x50>
    5e48:	2300      	movs	r3, #0
    5e4a:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    5e4e:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    5e52:	f505 708a 	add.w	r0, r5, #276	; 0x114
    5e56:	4790      	blx	r2
    5e58:	6823      	ldr	r3, [r4, #0]
    5e5a:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    5e5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5e62:	4718      	bx	r3
    5e64:	bd70      	pop	{r4, r5, r6, pc}
    5e66:	bf00      	nop
    5e68:	20000100 	.word	0x20000100
    5e6c:	20001150 	.word	0x20001150
    5e70:	20000110 	.word	0x20000110

00005e74 <CC_LibInitNoRng>:
    5e74:	b538      	push	{r3, r4, r5, lr}
    5e76:	f000 f82f 	bl	5ed8 <CC_HalInit>
    5e7a:	b120      	cbz	r0, 5e86 <CC_LibInitNoRng+0x12>
    5e7c:	2403      	movs	r4, #3
    5e7e:	f000 f863 	bl	5f48 <CC_PalTerminate>
    5e82:	4620      	mov	r0, r4
    5e84:	bd38      	pop	{r3, r4, r5, pc}
    5e86:	f000 f831 	bl	5eec <CC_PalInit>
    5e8a:	b998      	cbnz	r0, 5eb4 <CC_LibInitNoRng+0x40>
    5e8c:	f000 f8ac 	bl	5fe8 <CC_PalPowerSaveModeSelect>
    5e90:	b998      	cbnz	r0, 5eba <CC_LibInitNoRng+0x46>
    5e92:	4d0f      	ldr	r5, [pc, #60]	; (5ed0 <CC_LibInitNoRng+0x5c>)
    5e94:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    5e98:	0e1b      	lsrs	r3, r3, #24
    5e9a:	2bf0      	cmp	r3, #240	; 0xf0
    5e9c:	d108      	bne.n	5eb0 <CC_LibInitNoRng+0x3c>
    5e9e:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    5ea2:	4b0c      	ldr	r3, [pc, #48]	; (5ed4 <CC_LibInitNoRng+0x60>)
    5ea4:	429a      	cmp	r2, r3
    5ea6:	d00a      	beq.n	5ebe <CC_LibInitNoRng+0x4a>
    5ea8:	2407      	movs	r4, #7
    5eaa:	f000 f817 	bl	5edc <CC_HalTerminate>
    5eae:	e7e6      	b.n	5e7e <CC_LibInitNoRng+0xa>
    5eb0:	2406      	movs	r4, #6
    5eb2:	e7fa      	b.n	5eaa <CC_LibInitNoRng+0x36>
    5eb4:	2404      	movs	r4, #4
    5eb6:	4620      	mov	r0, r4
    5eb8:	bd38      	pop	{r3, r4, r5, pc}
    5eba:	2400      	movs	r4, #0
    5ebc:	e7f5      	b.n	5eaa <CC_LibInitNoRng+0x36>
    5ebe:	2001      	movs	r0, #1
    5ec0:	f000 f892 	bl	5fe8 <CC_PalPowerSaveModeSelect>
    5ec4:	4604      	mov	r4, r0
    5ec6:	2800      	cmp	r0, #0
    5ec8:	d1f7      	bne.n	5eba <CC_LibInitNoRng+0x46>
    5eca:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    5ece:	e7d8      	b.n	5e82 <CC_LibInitNoRng+0xe>
    5ed0:	5002b000 	.word	0x5002b000
    5ed4:	20e00000 	.word	0x20e00000

00005ed8 <CC_HalInit>:
    5ed8:	2000      	movs	r0, #0
    5eda:	4770      	bx	lr

00005edc <CC_HalTerminate>:
    5edc:	2000      	movs	r0, #0
    5ede:	4770      	bx	lr

00005ee0 <CC_HalMaskInterrupt>:
    5ee0:	4b01      	ldr	r3, [pc, #4]	; (5ee8 <CC_HalMaskInterrupt+0x8>)
    5ee2:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    5ee6:	4770      	bx	lr
    5ee8:	5002b000 	.word	0x5002b000

00005eec <CC_PalInit>:
    5eec:	b510      	push	{r4, lr}
    5eee:	4811      	ldr	r0, [pc, #68]	; (5f34 <CC_PalInit+0x48>)
    5ef0:	f000 f848 	bl	5f84 <CC_PalMutexCreate>
    5ef4:	b100      	cbz	r0, 5ef8 <CC_PalInit+0xc>
    5ef6:	bd10      	pop	{r4, pc}
    5ef8:	480f      	ldr	r0, [pc, #60]	; (5f38 <CC_PalInit+0x4c>)
    5efa:	f000 f843 	bl	5f84 <CC_PalMutexCreate>
    5efe:	2800      	cmp	r0, #0
    5f00:	d1f9      	bne.n	5ef6 <CC_PalInit+0xa>
    5f02:	4c0e      	ldr	r4, [pc, #56]	; (5f3c <CC_PalInit+0x50>)
    5f04:	4620      	mov	r0, r4
    5f06:	f000 f83d 	bl	5f84 <CC_PalMutexCreate>
    5f0a:	2800      	cmp	r0, #0
    5f0c:	d1f3      	bne.n	5ef6 <CC_PalInit+0xa>
    5f0e:	4b0c      	ldr	r3, [pc, #48]	; (5f40 <CC_PalInit+0x54>)
    5f10:	480c      	ldr	r0, [pc, #48]	; (5f44 <CC_PalInit+0x58>)
    5f12:	601c      	str	r4, [r3, #0]
    5f14:	f000 f836 	bl	5f84 <CC_PalMutexCreate>
    5f18:	4601      	mov	r1, r0
    5f1a:	2800      	cmp	r0, #0
    5f1c:	d1eb      	bne.n	5ef6 <CC_PalInit+0xa>
    5f1e:	f000 f82d 	bl	5f7c <CC_PalDmaInit>
    5f22:	4604      	mov	r4, r0
    5f24:	b108      	cbz	r0, 5f2a <CC_PalInit+0x3e>
    5f26:	4620      	mov	r0, r4
    5f28:	bd10      	pop	{r4, pc}
    5f2a:	f000 f83f 	bl	5fac <CC_PalPowerSaveModeInit>
    5f2e:	4620      	mov	r0, r4
    5f30:	e7fa      	b.n	5f28 <CC_PalInit+0x3c>
    5f32:	bf00      	nop
    5f34:	20000148 	.word	0x20000148
    5f38:	2000013c 	.word	0x2000013c
    5f3c:	20000144 	.word	0x20000144
    5f40:	2000014c 	.word	0x2000014c
    5f44:	20000140 	.word	0x20000140

00005f48 <CC_PalTerminate>:
    5f48:	b508      	push	{r3, lr}
    5f4a:	4808      	ldr	r0, [pc, #32]	; (5f6c <CC_PalTerminate+0x24>)
    5f4c:	f000 f824 	bl	5f98 <CC_PalMutexDestroy>
    5f50:	4807      	ldr	r0, [pc, #28]	; (5f70 <CC_PalTerminate+0x28>)
    5f52:	f000 f821 	bl	5f98 <CC_PalMutexDestroy>
    5f56:	4807      	ldr	r0, [pc, #28]	; (5f74 <CC_PalTerminate+0x2c>)
    5f58:	f000 f81e 	bl	5f98 <CC_PalMutexDestroy>
    5f5c:	4806      	ldr	r0, [pc, #24]	; (5f78 <CC_PalTerminate+0x30>)
    5f5e:	f000 f81b 	bl	5f98 <CC_PalMutexDestroy>
    5f62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5f66:	f000 b80b 	b.w	5f80 <CC_PalDmaTerminate>
    5f6a:	bf00      	nop
    5f6c:	20000148 	.word	0x20000148
    5f70:	2000013c 	.word	0x2000013c
    5f74:	20000144 	.word	0x20000144
    5f78:	20000140 	.word	0x20000140

00005f7c <CC_PalDmaInit>:
    5f7c:	2000      	movs	r0, #0
    5f7e:	4770      	bx	lr

00005f80 <CC_PalDmaTerminate>:
    5f80:	4770      	bx	lr
    5f82:	bf00      	nop

00005f84 <CC_PalMutexCreate>:
    5f84:	b508      	push	{r3, lr}
    5f86:	4b03      	ldr	r3, [pc, #12]	; (5f94 <CC_PalMutexCreate+0x10>)
    5f88:	6802      	ldr	r2, [r0, #0]
    5f8a:	681b      	ldr	r3, [r3, #0]
    5f8c:	6810      	ldr	r0, [r2, #0]
    5f8e:	4798      	blx	r3
    5f90:	2000      	movs	r0, #0
    5f92:	bd08      	pop	{r3, pc}
    5f94:	20000100 	.word	0x20000100

00005f98 <CC_PalMutexDestroy>:
    5f98:	b508      	push	{r3, lr}
    5f9a:	4b03      	ldr	r3, [pc, #12]	; (5fa8 <CC_PalMutexDestroy+0x10>)
    5f9c:	6802      	ldr	r2, [r0, #0]
    5f9e:	685b      	ldr	r3, [r3, #4]
    5fa0:	6810      	ldr	r0, [r2, #0]
    5fa2:	4798      	blx	r3
    5fa4:	2000      	movs	r0, #0
    5fa6:	bd08      	pop	{r3, pc}
    5fa8:	20000100 	.word	0x20000100

00005fac <CC_PalPowerSaveModeInit>:
    5fac:	b570      	push	{r4, r5, r6, lr}
    5fae:	4c09      	ldr	r4, [pc, #36]	; (5fd4 <CC_PalPowerSaveModeInit+0x28>)
    5fb0:	4d09      	ldr	r5, [pc, #36]	; (5fd8 <CC_PalPowerSaveModeInit+0x2c>)
    5fb2:	6920      	ldr	r0, [r4, #16]
    5fb4:	68ab      	ldr	r3, [r5, #8]
    5fb6:	4798      	blx	r3
    5fb8:	b118      	cbz	r0, 5fc2 <CC_PalPowerSaveModeInit+0x16>
    5fba:	4b08      	ldr	r3, [pc, #32]	; (5fdc <CC_PalPowerSaveModeInit+0x30>)
    5fbc:	4808      	ldr	r0, [pc, #32]	; (5fe0 <CC_PalPowerSaveModeInit+0x34>)
    5fbe:	685b      	ldr	r3, [r3, #4]
    5fc0:	4798      	blx	r3
    5fc2:	4a08      	ldr	r2, [pc, #32]	; (5fe4 <CC_PalPowerSaveModeInit+0x38>)
    5fc4:	68eb      	ldr	r3, [r5, #12]
    5fc6:	6920      	ldr	r0, [r4, #16]
    5fc8:	2100      	movs	r1, #0
    5fca:	6011      	str	r1, [r2, #0]
    5fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5fd0:	4718      	bx	r3
    5fd2:	bf00      	nop
    5fd4:	20000110 	.word	0x20000110
    5fd8:	20000100 	.word	0x20000100
    5fdc:	200000f0 	.word	0x200000f0
    5fe0:	00007d20 	.word	0x00007d20
    5fe4:	2000114c 	.word	0x2000114c

00005fe8 <CC_PalPowerSaveModeSelect>:
    5fe8:	b570      	push	{r4, r5, r6, lr}
    5fea:	4d1b      	ldr	r5, [pc, #108]	; (6058 <CC_PalPowerSaveModeSelect+0x70>)
    5fec:	4e1b      	ldr	r6, [pc, #108]	; (605c <CC_PalPowerSaveModeSelect+0x74>)
    5fee:	4604      	mov	r4, r0
    5ff0:	68b2      	ldr	r2, [r6, #8]
    5ff2:	6928      	ldr	r0, [r5, #16]
    5ff4:	4790      	blx	r2
    5ff6:	b9f8      	cbnz	r0, 6038 <CC_PalPowerSaveModeSelect+0x50>
    5ff8:	b15c      	cbz	r4, 6012 <CC_PalPowerSaveModeSelect+0x2a>
    5ffa:	4c19      	ldr	r4, [pc, #100]	; (6060 <CC_PalPowerSaveModeSelect+0x78>)
    5ffc:	6823      	ldr	r3, [r4, #0]
    5ffe:	b1b3      	cbz	r3, 602e <CC_PalPowerSaveModeSelect+0x46>
    6000:	2b01      	cmp	r3, #1
    6002:	d01b      	beq.n	603c <CC_PalPowerSaveModeSelect+0x54>
    6004:	3b01      	subs	r3, #1
    6006:	6023      	str	r3, [r4, #0]
    6008:	6928      	ldr	r0, [r5, #16]
    600a:	68f3      	ldr	r3, [r6, #12]
    600c:	4798      	blx	r3
    600e:	2000      	movs	r0, #0
    6010:	bd70      	pop	{r4, r5, r6, pc}
    6012:	4c13      	ldr	r4, [pc, #76]	; (6060 <CC_PalPowerSaveModeSelect+0x78>)
    6014:	6821      	ldr	r1, [r4, #0]
    6016:	b941      	cbnz	r1, 602a <CC_PalPowerSaveModeSelect+0x42>
    6018:	4b12      	ldr	r3, [pc, #72]	; (6064 <CC_PalPowerSaveModeSelect+0x7c>)
    601a:	2201      	movs	r2, #1
    601c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    6020:	4a11      	ldr	r2, [pc, #68]	; (6068 <CC_PalPowerSaveModeSelect+0x80>)
    6022:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6026:	2b00      	cmp	r3, #0
    6028:	d1fb      	bne.n	6022 <CC_PalPowerSaveModeSelect+0x3a>
    602a:	3101      	adds	r1, #1
    602c:	6021      	str	r1, [r4, #0]
    602e:	68f3      	ldr	r3, [r6, #12]
    6030:	6928      	ldr	r0, [r5, #16]
    6032:	4798      	blx	r3
    6034:	2000      	movs	r0, #0
    6036:	bd70      	pop	{r4, r5, r6, pc}
    6038:	480c      	ldr	r0, [pc, #48]	; (606c <CC_PalPowerSaveModeSelect+0x84>)
    603a:	bd70      	pop	{r4, r5, r6, pc}
    603c:	4a0a      	ldr	r2, [pc, #40]	; (6068 <CC_PalPowerSaveModeSelect+0x80>)
    603e:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    6042:	2b00      	cmp	r3, #0
    6044:	d1fb      	bne.n	603e <CC_PalPowerSaveModeSelect+0x56>
    6046:	4a07      	ldr	r2, [pc, #28]	; (6064 <CC_PalPowerSaveModeSelect+0x7c>)
    6048:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    604c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    6050:	f7ff ff46 	bl	5ee0 <CC_HalMaskInterrupt>
    6054:	6823      	ldr	r3, [r4, #0]
    6056:	e7d5      	b.n	6004 <CC_PalPowerSaveModeSelect+0x1c>
    6058:	20000110 	.word	0x20000110
    605c:	20000100 	.word	0x20000100
    6060:	2000114c 	.word	0x2000114c
    6064:	5002a000 	.word	0x5002a000
    6068:	5002b000 	.word	0x5002b000
    606c:	ffff8fe9 	.word	0xffff8fe9

00006070 <gpio_pin_configure_dt.constprop.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param extra_flags additional flags
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
    6070:	b4f0      	push	{r4, r5, r6, r7}
    6072:	4603      	mov	r3, r0
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    6074:	6800      	ldr	r0, [r0, #0]
    6076:	7919      	ldrb	r1, [r3, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
    6078:	88db      	ldrh	r3, [r3, #6]
	struct gpio_driver_data *data =
    607a:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
    607c:	6887      	ldr	r7, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    607e:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    6080:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    6082:	bf54      	ite	pl
    6084:	f443 13d0 	orrpl.w	r3, r3, #1703936	; 0x1a0000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    6088:	f483 13b0 	eormi.w	r3, r3, #1441792	; 0x160000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    608c:	2501      	movs	r5, #1
    608e:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    6090:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    6094:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6096:	bf4c      	ite	mi
    6098:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    609a:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
    609c:	683b      	ldr	r3, [r7, #0]
    609e:	6034      	str	r4, [r6, #0]
}
    60a0:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    60a2:	4718      	bx	r3

000060a4 <gpio_pin_toggle_dt.isra.0>:
 *     gpio_pin_toggle(spec->port, spec->pin);
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
    60a4:	4603      	mov	r3, r0
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    60a6:	2101      	movs	r1, #1
    60a8:	791b      	ldrb	r3, [r3, #4]
{
	return gpio_pin_toggle(spec->port, spec->pin);
    60aa:	6800      	ldr	r0, [r0, #0]
	return gpio_port_toggle_bits(port, (gpio_port_pins_t)BIT(pin));
    60ac:	4099      	lsls	r1, r3
	return api->port_toggle_bits(port, pins);
    60ae:	6883      	ldr	r3, [r0, #8]
    60b0:	695b      	ldr	r3, [r3, #20]
    60b2:	4718      	bx	r3

000060b4 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
    60b4:	4601      	mov	r1, r0
    60b6:	f240 30e7 	movw	r0, #999	; 0x3e7
    60ba:	b508      	push	{r3, lr}
    60bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    60c0:	2300      	movs	r3, #0
    60c2:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
    60c6:	1449      	asrs	r1, r1, #17
    60c8:	f7fa f81a 	bl	100 <__aeabi_uldivmod>
}
    60cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
    60d0:	f7ff bb90 	b.w	57f4 <z_impl_k_sleep>

000060d4 <cbpprintf_external>:
{
    60d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    60d8:	4607      	mov	r7, r0
    60da:	460e      	mov	r6, r1
    60dc:	4690      	mov	r8, r2
	if (buf == NULL) {
    60de:	461d      	mov	r5, r3
    60e0:	b30b      	cbz	r3, 6126 <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    60e2:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    60e4:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    60e6:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    60ea:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    60ec:	441c      	add	r4, r3
    60ee:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    60f2:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    60f4:	f04f 0900 	mov.w	r9, #0
    60f8:	45d1      	cmp	r9, sl
    60fa:	d308      	bcc.n	610e <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    60fc:	686a      	ldr	r2, [r5, #4]
    60fe:	f105 0308 	add.w	r3, r5, #8
    6102:	4641      	mov	r1, r8
    6104:	4638      	mov	r0, r7
    6106:	46b4      	mov	ip, r6
}
    6108:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    610c:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    610e:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    6112:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    6116:	4620      	mov	r0, r4
    6118:	f000 fc3f 	bl	699a <strlen>
    611c:	3001      	adds	r0, #1
    611e:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    6120:	f109 0901 	add.w	r9, r9, #1
    6124:	e7e8      	b.n	60f8 <cbpprintf_external+0x24>
}
    6126:	f06f 0015 	mvn.w	r0, #21
    612a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000612e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    612e:	4603      	mov	r3, r0
    6130:	b158      	cbz	r0, 614a <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6132:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6134:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6138:	2a01      	cmp	r2, #1
    613a:	d003      	beq.n	6144 <sys_notify_validate+0x16>
    613c:	2a03      	cmp	r2, #3
    613e:	d104      	bne.n	614a <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6140:	6802      	ldr	r2, [r0, #0]
    6142:	b112      	cbz	r2, 614a <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6144:	2000      	movs	r0, #0
    6146:	6098      	str	r0, [r3, #8]
    6148:	4770      	bx	lr
		return -EINVAL;
    614a:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    614e:	4770      	bx	lr

00006150 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6150:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    6152:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6154:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    6158:	2a03      	cmp	r2, #3
    615a:	f04f 0200 	mov.w	r2, #0
{
    615e:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6160:	bf0c      	ite	eq
    6162:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    6164:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6166:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6168:	4770      	bx	lr

0000616a <arch_printk_char_out>:
}
    616a:	2000      	movs	r0, #0
    616c:	4770      	bx	lr

0000616e <str_out>:
{
    616e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    6170:	688a      	ldr	r2, [r1, #8]
    6172:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    6174:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    6176:	b114      	cbz	r4, 617e <str_out+0x10>
    6178:	684b      	ldr	r3, [r1, #4]
    617a:	4293      	cmp	r3, r2
    617c:	dc01      	bgt.n	6182 <str_out+0x14>
		ctx->count++;
    617e:	608d      	str	r5, [r1, #8]
}
    6180:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    6182:	3b01      	subs	r3, #1
    6184:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    6186:	bf08      	it	eq
    6188:	2200      	moveq	r2, #0
    618a:	608d      	str	r5, [r1, #8]
    618c:	bf0c      	ite	eq
    618e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    6190:	54a0      	strbne	r0, [r4, r2]
    6192:	e7f5      	b.n	6180 <str_out+0x12>

00006194 <printk>:
{
    6194:	b40f      	push	{r0, r1, r2, r3}
    6196:	b507      	push	{r0, r1, r2, lr}
    6198:	a904      	add	r1, sp, #16
    619a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    619e:	9101      	str	r1, [sp, #4]
	vprintk(fmt, ap);
    61a0:	f7fa fb76 	bl	890 <vprintk>
}
    61a4:	b003      	add	sp, #12
    61a6:	f85d eb04 	ldr.w	lr, [sp], #4
    61aa:	b004      	add	sp, #16
    61ac:	4770      	bx	lr

000061ae <snprintk>:
{
    61ae:	b40c      	push	{r2, r3}
    61b0:	b507      	push	{r0, r1, r2, lr}
    61b2:	ab04      	add	r3, sp, #16
    61b4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    61b8:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    61ba:	f7fa fb77 	bl	8ac <vsnprintk>
}
    61be:	b003      	add	sp, #12
    61c0:	f85d eb04 	ldr.w	lr, [sp], #4
    61c4:	b002      	add	sp, #8
    61c6:	4770      	bx	lr

000061c8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    61c8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    61ca:	f013 0307 	ands.w	r3, r3, #7
    61ce:	d105      	bne.n	61dc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    61d0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    61d2:	2b00      	cmp	r3, #0
    61d4:	bf0c      	ite	eq
    61d6:	2000      	moveq	r0, #0
    61d8:	2003      	movne	r0, #3
    61da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    61dc:	2b02      	cmp	r3, #2
    61de:	d105      	bne.n	61ec <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    61e0:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    61e2:	2b00      	cmp	r3, #0
    61e4:	bf14      	ite	ne
    61e6:	2000      	movne	r0, #0
    61e8:	2004      	moveq	r0, #4
    61ea:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    61ec:	2b01      	cmp	r3, #1
    61ee:	d105      	bne.n	61fc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    61f0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    61f2:	2b00      	cmp	r3, #0
    61f4:	bf0c      	ite	eq
    61f6:	2000      	moveq	r0, #0
    61f8:	2005      	movne	r0, #5
    61fa:	4770      	bx	lr
	int evt = EVT_NOP;
    61fc:	2000      	movs	r0, #0
}
    61fe:	4770      	bx	lr

00006200 <notify_one>:
{
    6200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6204:	460d      	mov	r5, r1
    6206:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6208:	4619      	mov	r1, r3
    620a:	1d28      	adds	r0, r5, #4
{
    620c:	4690      	mov	r8, r2
    620e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6210:	f7ff ff9e 	bl	6150 <sys_notify_finalize>
	if (cb) {
    6214:	4604      	mov	r4, r0
    6216:	b138      	cbz	r0, 6228 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6218:	4633      	mov	r3, r6
    621a:	4642      	mov	r2, r8
    621c:	4629      	mov	r1, r5
    621e:	4638      	mov	r0, r7
    6220:	46a4      	mov	ip, r4
}
    6222:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6226:	4760      	bx	ip
}
    6228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000622c <transition_complete>:
{
    622c:	b410      	push	{r4}
	__asm__ volatile(
    622e:	f04f 0420 	mov.w	r4, #32
    6232:	f3ef 8211 	mrs	r2, BASEPRI
    6236:	f384 8812 	msr	BASEPRI_MAX, r4
    623a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    623e:	6141      	str	r1, [r0, #20]
}
    6240:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    6242:	2101      	movs	r1, #1
    6244:	f7fa bb46 	b.w	8d4 <process_event>

00006248 <validate_args>:
{
    6248:	b510      	push	{r4, lr}
    624a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    624c:	b140      	cbz	r0, 6260 <validate_args+0x18>
    624e:	b139      	cbz	r1, 6260 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    6250:	1d08      	adds	r0, r1, #4
    6252:	f7ff ff6c 	bl	612e <sys_notify_validate>
	if ((rv == 0)
    6256:	b928      	cbnz	r0, 6264 <validate_args+0x1c>
	    && ((cli->notify.flags
    6258:	68a3      	ldr	r3, [r4, #8]
    625a:	f033 0303 	bics.w	r3, r3, #3
    625e:	d001      	beq.n	6264 <validate_args+0x1c>
		rv = -EINVAL;
    6260:	f06f 0015 	mvn.w	r0, #21
}
    6264:	bd10      	pop	{r4, pc}

00006266 <onoff_manager_init>:
{
    6266:	b538      	push	{r3, r4, r5, lr}
    6268:	460c      	mov	r4, r1
	if ((mgr == NULL)
    626a:	4605      	mov	r5, r0
    626c:	b158      	cbz	r0, 6286 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    626e:	b151      	cbz	r1, 6286 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6270:	680b      	ldr	r3, [r1, #0]
    6272:	b143      	cbz	r3, 6286 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6274:	684b      	ldr	r3, [r1, #4]
    6276:	b133      	cbz	r3, 6286 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    6278:	221c      	movs	r2, #28
    627a:	2100      	movs	r1, #0
    627c:	f000 fba8 	bl	69d0 <memset>
    6280:	612c      	str	r4, [r5, #16]
	return 0;
    6282:	2000      	movs	r0, #0
}
    6284:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    6286:	f06f 0015 	mvn.w	r0, #21
    628a:	e7fb      	b.n	6284 <onoff_manager_init+0x1e>

0000628c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    628c:	b570      	push	{r4, r5, r6, lr}
    628e:	4604      	mov	r4, r0
    6290:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6292:	f7ff ffd9 	bl	6248 <validate_args>

	if (rv < 0) {
    6296:	1e05      	subs	r5, r0, #0
    6298:	db31      	blt.n	62fe <onoff_request+0x72>
    629a:	f04f 0320 	mov.w	r3, #32
    629e:	f3ef 8111 	mrs	r1, BASEPRI
    62a2:	f383 8812 	msr	BASEPRI_MAX, r3
    62a6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    62aa:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    62ac:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    62ae:	f64f 75ff 	movw	r5, #65535	; 0xffff
    62b2:	42ab      	cmp	r3, r5
    62b4:	f000 0207 	and.w	r2, r0, #7
    62b8:	d02e      	beq.n	6318 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    62ba:	2a02      	cmp	r2, #2
    62bc:	d10e      	bne.n	62dc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    62be:	3301      	adds	r3, #1
    62c0:	8363      	strh	r3, [r4, #26]
	rv = state;
    62c2:	4615      	mov	r5, r2
		notify = true;
    62c4:	2301      	movs	r3, #1
	__asm__ volatile(
    62c6:	f381 8811 	msr	BASEPRI, r1
    62ca:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    62ce:	b1b3      	cbz	r3, 62fe <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    62d0:	2300      	movs	r3, #0
    62d2:	4631      	mov	r1, r6
    62d4:	4620      	mov	r0, r4
    62d6:	f7ff ff93 	bl	6200 <notify_one>
    62da:	e010      	b.n	62fe <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    62dc:	0783      	lsls	r3, r0, #30
    62de:	d001      	beq.n	62e4 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    62e0:	2a06      	cmp	r2, #6
    62e2:	d10e      	bne.n	6302 <onoff_request+0x76>
	parent->next = child;
    62e4:	2300      	movs	r3, #0
    62e6:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    62e8:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    62ea:	b993      	cbnz	r3, 6312 <onoff_request+0x86>
	list->head = node;
    62ec:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    62f0:	4615      	mov	r5, r2
    62f2:	b962      	cbnz	r2, 630e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    62f4:	460a      	mov	r2, r1
    62f6:	4620      	mov	r0, r4
    62f8:	2102      	movs	r1, #2
    62fa:	f7fa faeb 	bl	8d4 <process_event>
		}
	}

	return rv;
}
    62fe:	4628      	mov	r0, r5
    6300:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    6302:	2a05      	cmp	r2, #5
    6304:	bf0c      	ite	eq
    6306:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    630a:	f06f 0504 	mvnne.w	r5, #4
    630e:	2300      	movs	r3, #0
    6310:	e7d9      	b.n	62c6 <onoff_request+0x3a>
	parent->next = child;
    6312:	601e      	str	r6, [r3, #0]
	list->tail = node;
    6314:	6066      	str	r6, [r4, #4]
}
    6316:	e7eb      	b.n	62f0 <onoff_request+0x64>
		rv = -EAGAIN;
    6318:	f06f 050a 	mvn.w	r5, #10
    631c:	e7f7      	b.n	630e <onoff_request+0x82>

0000631e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    631e:	4604      	mov	r4, r0
    6320:	b508      	push	{r3, lr}
    6322:	4608      	mov	r0, r1
    6324:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    6326:	461a      	mov	r2, r3
    6328:	47a0      	blx	r4
	return z_impl_z_current_get();
    632a:	f7ff fa7d 	bl	5828 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    632e:	f7fc fb69 	bl	2a04 <z_impl_k_thread_abort>

00006332 <encode_uint>:
{
    6332:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6336:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    6338:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    633a:	2b6f      	cmp	r3, #111	; 0x6f
{
    633c:	4680      	mov	r8, r0
    633e:	460f      	mov	r7, r1
    6340:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6342:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    6346:	d029      	beq.n	639c <encode_uint+0x6a>
    6348:	d824      	bhi.n	6394 <encode_uint+0x62>
		return 16;
    634a:	2b58      	cmp	r3, #88	; 0x58
    634c:	bf14      	ite	ne
    634e:	260a      	movne	r6, #10
    6350:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    6352:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    6356:	4632      	mov	r2, r6
    6358:	2300      	movs	r3, #0
    635a:	4640      	mov	r0, r8
    635c:	4639      	mov	r1, r7
    635e:	f7f9 fecf 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6362:	2a09      	cmp	r2, #9
    6364:	b2d4      	uxtb	r4, r2
    6366:	d81e      	bhi.n	63a6 <encode_uint+0x74>
    6368:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    636a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    636c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    636e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6372:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    6376:	d301      	bcc.n	637c <encode_uint+0x4a>
    6378:	45d1      	cmp	r9, sl
    637a:	d811      	bhi.n	63a0 <encode_uint+0x6e>
	if (conv->flag_hash) {
    637c:	782b      	ldrb	r3, [r5, #0]
    637e:	069b      	lsls	r3, r3, #26
    6380:	d505      	bpl.n	638e <encode_uint+0x5c>
		if (radix == 8) {
    6382:	2e08      	cmp	r6, #8
    6384:	d115      	bne.n	63b2 <encode_uint+0x80>
			conv->altform_0 = true;
    6386:	78ab      	ldrb	r3, [r5, #2]
    6388:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    638c:	70ab      	strb	r3, [r5, #2]
}
    638e:	4648      	mov	r0, r9
    6390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6394:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    6398:	2b70      	cmp	r3, #112	; 0x70
    639a:	e7d7      	b.n	634c <encode_uint+0x1a>
	switch (specifier) {
    639c:	2608      	movs	r6, #8
    639e:	e7d8      	b.n	6352 <encode_uint+0x20>
		value /= radix;
    63a0:	4680      	mov	r8, r0
    63a2:	460f      	mov	r7, r1
    63a4:	e7d7      	b.n	6356 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    63a6:	f1bb 0f19 	cmp.w	fp, #25
    63aa:	bf94      	ite	ls
    63ac:	3437      	addls	r4, #55	; 0x37
    63ae:	3457      	addhi	r4, #87	; 0x57
    63b0:	e7db      	b.n	636a <encode_uint+0x38>
		} else if (radix == 16) {
    63b2:	2e10      	cmp	r6, #16
    63b4:	d1eb      	bne.n	638e <encode_uint+0x5c>
			conv->altform_0c = true;
    63b6:	78ab      	ldrb	r3, [r5, #2]
    63b8:	f043 0310 	orr.w	r3, r3, #16
    63bc:	e7e6      	b.n	638c <encode_uint+0x5a>

000063be <outs>:
{
    63be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    63c2:	4607      	mov	r7, r0
    63c4:	4688      	mov	r8, r1
    63c6:	4615      	mov	r5, r2
    63c8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    63ca:	4614      	mov	r4, r2
    63cc:	42b4      	cmp	r4, r6
    63ce:	eba4 0005 	sub.w	r0, r4, r5
    63d2:	d302      	bcc.n	63da <outs+0x1c>
    63d4:	b93e      	cbnz	r6, 63e6 <outs+0x28>
    63d6:	7823      	ldrb	r3, [r4, #0]
    63d8:	b12b      	cbz	r3, 63e6 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    63da:	f814 0b01 	ldrb.w	r0, [r4], #1
    63de:	4641      	mov	r1, r8
    63e0:	47b8      	blx	r7
		if (rc < 0) {
    63e2:	2800      	cmp	r0, #0
    63e4:	daf2      	bge.n	63cc <outs+0xe>
}
    63e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000063ea <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    63ea:	4602      	mov	r2, r0
    63ec:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    63ee:	68c0      	ldr	r0, [r0, #12]
    63f0:	6814      	ldr	r4, [r2, #0]
    63f2:	42a0      	cmp	r0, r4
    63f4:	d904      	bls.n	6400 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    63f6:	3801      	subs	r0, #1
    63f8:	1b00      	subs	r0, r0, r4
    63fa:	6008      	str	r0, [r1, #0]

		return false;
    63fc:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    63fe:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    6400:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    6402:	b918      	cbnz	r0, 640c <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    6404:	3b01      	subs	r3, #1
    6406:	1b1b      	subs	r3, r3, r4
    6408:	600b      	str	r3, [r1, #0]
		return false;
    640a:	e7f8      	b.n	63fe <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    640c:	1b1b      	subs	r3, r3, r4
    640e:	600b      	str	r3, [r1, #0]
	return true;
    6410:	2001      	movs	r0, #1
    6412:	e7f4      	b.n	63fe <free_space+0x14>

00006414 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    6414:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    6416:	a901      	add	r1, sp, #4
{
    6418:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    641a:	f7ff ffe6 	bl	63ea <free_space>
    641e:	b120      	cbz	r0, 642a <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    6420:	9b01      	ldr	r3, [sp, #4]
    6422:	68e2      	ldr	r2, [r4, #12]
    6424:	3b01      	subs	r3, #1
    6426:	4413      	add	r3, r2
    6428:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    642a:	9801      	ldr	r0, [sp, #4]
    642c:	6a23      	ldr	r3, [r4, #32]
    642e:	43c0      	mvns	r0, r0
}
    6430:	4418      	add	r0, r3
    6432:	b002      	add	sp, #8
    6434:	bd10      	pop	{r4, pc}

00006436 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    6436:	b510      	push	{r4, lr}
    6438:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    643a:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    643c:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    643e:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    6440:	07d2      	lsls	r2, r2, #31
    6442:	d502      	bpl.n	644a <idx_inc+0x14>
		return i & (buffer->size - 1);
    6444:	3b01      	subs	r3, #1
    6446:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    6448:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    644a:	4298      	cmp	r0, r3
    644c:	bf28      	it	cs
    644e:	1ac0      	subcs	r0, r0, r3
    6450:	e7fa      	b.n	6448 <idx_inc+0x12>

00006452 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    6452:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6454:	69c2      	ldr	r2, [r0, #28]
{
    6456:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    6458:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    645a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    645c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6460:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6464:	462a      	mov	r2, r5
    6466:	6801      	ldr	r1, [r0, #0]
{
    6468:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    646a:	f7ff ffe4 	bl	6436 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    646e:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6470:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6472:	462a      	mov	r2, r5
    6474:	4620      	mov	r0, r4
    6476:	f7ff ffde 	bl	6436 <idx_inc>
    647a:	6060      	str	r0, [r4, #4]
}
    647c:	bd38      	pop	{r3, r4, r5, pc}

0000647e <max_utilization_update>:
{
    647e:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    6480:	6903      	ldr	r3, [r0, #16]
    6482:	075b      	lsls	r3, r3, #29
{
    6484:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    6486:	d506      	bpl.n	6496 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    6488:	6a45      	ldr	r5, [r0, #36]	; 0x24
    648a:	f7ff ffc3 	bl	6414 <get_usage>
    648e:	4285      	cmp	r5, r0
    6490:	d902      	bls.n	6498 <max_utilization_update+0x1a>
    6492:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6494:	6260      	str	r0, [r4, #36]	; 0x24
}
    6496:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    6498:	4620      	mov	r0, r4
    649a:	f7ff ffbb 	bl	6414 <get_usage>
    649e:	e7f9      	b.n	6494 <max_utilization_update+0x16>

000064a0 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    64a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    64a4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    64a8:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    64ac:	461f      	mov	r7, r3
	*user_packet = false;
    64ae:	2300      	movs	r3, #0
    64b0:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    64b2:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    64b6:	f003 0303 	and.w	r3, r3, #3
    64ba:	2b02      	cmp	r3, #2
{
    64bc:	4604      	mov	r4, r0
    64be:	468b      	mov	fp, r1
    64c0:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    64c2:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    64c6:	d103      	bne.n	64d0 <drop_item_locked+0x30>
		return item->skip.len;
    64c8:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    64cc:	08ad      	lsrs	r5, r5, #2
    64ce:	d12e      	bne.n	652e <drop_item_locked+0x8e>
    64d0:	69a3      	ldr	r3, [r4, #24]
    64d2:	4630      	mov	r0, r6
    64d4:	4798      	blx	r3
    64d6:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    64d8:	f1b8 0f00 	cmp.w	r8, #0
    64dc:	d036      	beq.n	654c <drop_item_locked+0xac>
		if (item->hdr.busy) {
    64de:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    64e2:	079b      	lsls	r3, r3, #30
    64e4:	d52f      	bpl.n	6546 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    64e6:	f10b 0101 	add.w	r1, fp, #1
    64ea:	4620      	mov	r0, r4
    64ec:	f7ff ffb1 	bl	6452 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    64f0:	6861      	ldr	r1, [r4, #4]
    64f2:	462a      	mov	r2, r5
    64f4:	4620      	mov	r0, r4
    64f6:	f7ff ff9e 	bl	6436 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    64fa:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    64fc:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    64fe:	462a      	mov	r2, r5
    6500:	4620      	mov	r0, r4
    6502:	f7ff ff98 	bl	6436 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    6506:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    6508:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    650a:	68e1      	ldr	r1, [r4, #12]
    650c:	4620      	mov	r0, r4
    650e:	f7ff ff92 	bl	6436 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    6512:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    6514:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    6518:	f002 0203 	and.w	r2, r2, #3
    651c:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    651e:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    6522:	d10c      	bne.n	653e <drop_item_locked+0x9e>
		return item->skip.len;
    6524:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    6528:	089b      	lsrs	r3, r3, #2
    652a:	d008      	beq.n	653e <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    652c:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    652e:	68e1      	ldr	r1, [r4, #12]
    6530:	462a      	mov	r2, r5
    6532:	4620      	mov	r0, r4
    6534:	f7ff ff7f 	bl	6436 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    6538:	e9c4 0002 	strd	r0, r0, [r4, #8]
    653c:	e007      	b.n	654e <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    653e:	69a3      	ldr	r3, [r4, #24]
    6540:	4630      	mov	r0, r6
    6542:	4798      	blx	r3
    6544:	4405      	add	r5, r0
			*user_packet = true;
    6546:	2301      	movs	r3, #1
    6548:	703b      	strb	r3, [r7, #0]
    654a:	e7f0      	b.n	652e <drop_item_locked+0x8e>
		item = NULL;
    654c:	4646      	mov	r6, r8
	}

	return item;
}
    654e:	4630      	mov	r0, r6
    6550:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006554 <mpsc_pbuf_init>:
{
    6554:	b538      	push	{r3, r4, r5, lr}
    6556:	460d      	mov	r5, r1
    6558:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    655a:	221c      	movs	r2, #28
    655c:	2100      	movs	r1, #0
    655e:	f000 fa37 	bl	69d0 <memset>
	buffer->get_wlen = cfg->get_wlen;
    6562:	68eb      	ldr	r3, [r5, #12]
    6564:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    6566:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
    6568:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
    656a:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    656c:	682b      	ldr	r3, [r5, #0]
    656e:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
    6570:	2300      	movs	r3, #0
    6572:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
    6574:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    6576:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    6578:	b122      	cbz	r2, 6584 <mpsc_pbuf_init+0x30>
    657a:	1e51      	subs	r1, r2, #1
    657c:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    657e:	bf08      	it	eq
    6580:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    6584:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    6586:	2201      	movs	r2, #1
    6588:	f104 0028 	add.w	r0, r4, #40	; 0x28
    658c:	2100      	movs	r1, #0
}
    658e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6592:	f000 bf9b 	b.w	74cc <z_impl_k_sem_init>

00006596 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    6596:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    659a:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    659c:	6a03      	ldr	r3, [r0, #32]
    659e:	3b01      	subs	r3, #1
    65a0:	428b      	cmp	r3, r1
{
    65a2:	b085      	sub	sp, #20
    65a4:	4604      	mov	r4, r0
    65a6:	460f      	mov	r7, r1
    65a8:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    65aa:	d364      	bcc.n	6676 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
    65ac:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    65ae:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    65b0:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
    65b4:	f04f 0320 	mov.w	r3, #32
    65b8:	f3ef 8611 	mrs	r6, BASEPRI
    65bc:	f383 8812 	msr	BASEPRI_MAX, r3
    65c0:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    65c4:	a903      	add	r1, sp, #12
    65c6:	4620      	mov	r0, r4
    65c8:	f7ff ff0f 	bl	63ea <free_space>
		if (free_wlen >= wlen) {
    65cc:	9903      	ldr	r1, [sp, #12]
    65ce:	42b9      	cmp	r1, r7
    65d0:	d321      	bcc.n	6616 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    65d2:	6821      	ldr	r1, [r4, #0]
			item =
    65d4:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    65d6:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    65da:	f022 0203 	bic.w	r2, r2, #3
    65de:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    65e2:	4620      	mov	r0, r4
    65e4:	463a      	mov	r2, r7
			item =
    65e6:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    65ea:	f7ff ff24 	bl	6436 <idx_inc>
		cont = false;
    65ee:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    65f0:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    65f2:	f386 8811 	msr	BASEPRI, r6
    65f6:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    65fa:	2b00      	cmp	r3, #0
    65fc:	d03d      	beq.n	667a <mpsc_pbuf_alloc+0xe4>
    65fe:	2d00      	cmp	r5, #0
    6600:	d0d8      	beq.n	65b4 <mpsc_pbuf_alloc+0x1e>
    6602:	f89d 300b 	ldrb.w	r3, [sp, #11]
    6606:	2b00      	cmp	r3, #0
    6608:	d0d4      	beq.n	65b4 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    660a:	4629      	mov	r1, r5
    660c:	6963      	ldr	r3, [r4, #20]
    660e:	4620      	mov	r0, r4
    6610:	4798      	blx	r3
			dropped_item = NULL;
    6612:	2500      	movs	r5, #0
    6614:	e7ce      	b.n	65b4 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    6616:	b128      	cbz	r0, 6624 <mpsc_pbuf_alloc+0x8e>
    6618:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    661a:	4620      	mov	r0, r4
    661c:	f7ff ff19 	bl	6452 <add_skip_item>
			cont = true;
    6620:	9b01      	ldr	r3, [sp, #4]
    6622:	e7e6      	b.n	65f2 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    6624:	ea58 0309 	orrs.w	r3, r8, r9
    6628:	d017      	beq.n	665a <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
    662a:	f000 ff2e 	bl	748a <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    662e:	b9a0      	cbnz	r0, 665a <mpsc_pbuf_alloc+0xc4>
    6630:	f386 8811 	msr	BASEPRI, r6
    6634:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    6638:	4642      	mov	r2, r8
    663a:	464b      	mov	r3, r9
    663c:	4658      	mov	r0, fp
    663e:	f7fe fdd9 	bl	51f4 <z_impl_k_sem_take>
	__asm__ volatile(
    6642:	f04f 0320 	mov.w	r3, #32
    6646:	f3ef 8611 	mrs	r6, BASEPRI
    664a:	f383 8812 	msr	BASEPRI_MAX, r3
    664e:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    6652:	fab0 f380 	clz	r3, r0
    6656:	095b      	lsrs	r3, r3, #5
    6658:	e7cb      	b.n	65f2 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    665a:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    665c:	9903      	ldr	r1, [sp, #12]
    665e:	f10d 030b 	add.w	r3, sp, #11
    6662:	f3c2 0240 	ubfx	r2, r2, #1, #1
    6666:	4620      	mov	r0, r4
    6668:	f7ff ff1a 	bl	64a0 <drop_item_locked>
			cont = dropped_item != NULL;
    666c:	1e03      	subs	r3, r0, #0
    666e:	4605      	mov	r5, r0
    6670:	bf18      	it	ne
    6672:	2301      	movne	r3, #1
    6674:	e7bd      	b.n	65f2 <mpsc_pbuf_alloc+0x5c>
		return NULL;
    6676:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    667a:	4650      	mov	r0, sl
    667c:	b005      	add	sp, #20
    667e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006682 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    6682:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    6684:	6983      	ldr	r3, [r0, #24]
{
    6686:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6688:	4608      	mov	r0, r1
{
    668a:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    668c:	4798      	blx	r3
    668e:	4602      	mov	r2, r0
    6690:	f04f 0320 	mov.w	r3, #32
    6694:	f3ef 8611 	mrs	r6, BASEPRI
    6698:	f383 8812 	msr	BASEPRI_MAX, r3
    669c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    66a0:	782b      	ldrb	r3, [r5, #0]
    66a2:	f043 0301 	orr.w	r3, r3, #1
    66a6:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    66a8:	6861      	ldr	r1, [r4, #4]
    66aa:	4620      	mov	r0, r4
    66ac:	f7ff fec3 	bl	6436 <idx_inc>
    66b0:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    66b2:	4620      	mov	r0, r4
    66b4:	f7ff fee3 	bl	647e <max_utilization_update>
	__asm__ volatile(
    66b8:	f386 8811 	msr	BASEPRI, r6
    66bc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    66c0:	bd70      	pop	{r4, r5, r6, pc}

000066c2 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    66c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66c6:	4604      	mov	r4, r0
	__asm__ volatile(
    66c8:	f04f 0320 	mov.w	r3, #32
    66cc:	f3ef 8611 	mrs	r6, BASEPRI
    66d0:	f383 8812 	msr	BASEPRI_MAX, r3
    66d4:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    66d8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    66dc:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    66de:	bf88      	it	hi
    66e0:	6a23      	ldrhi	r3, [r4, #32]
    66e2:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    66e4:	b1f3      	cbz	r3, 6724 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    66e6:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    66e8:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    66ec:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    66f0:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    66f4:	d016      	beq.n	6724 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    66f6:	2b02      	cmp	r3, #2
    66f8:	d103      	bne.n	6702 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    66fa:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    66fe:	08ad      	lsrs	r5, r5, #2
    6700:	d115      	bne.n	672e <mpsc_pbuf_claim+0x6c>
    6702:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    6704:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    6706:	d50f      	bpl.n	6728 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    6708:	f042 0202 	orr.w	r2, r2, #2
    670c:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    6710:	4640      	mov	r0, r8
    6712:	4798      	blx	r3
    6714:	4639      	mov	r1, r7
    6716:	4602      	mov	r2, r0
    6718:	4620      	mov	r0, r4
    671a:	f7ff fe8c 	bl	6436 <idx_inc>
		cont = false;
    671e:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    6720:	60a0      	str	r0, [r4, #8]
    6722:	e011      	b.n	6748 <mpsc_pbuf_claim+0x86>
			item = NULL;
    6724:	4698      	mov	r8, r3
    6726:	e00f      	b.n	6748 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    6728:	4640      	mov	r0, r8
    672a:	4798      	blx	r3
    672c:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    672e:	68a1      	ldr	r1, [r4, #8]
    6730:	462a      	mov	r2, r5
    6732:	4620      	mov	r0, r4
    6734:	f7ff fe7f 	bl	6436 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    6738:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    673a:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    673c:	462a      	mov	r2, r5
    673e:	4620      	mov	r0, r4
    6740:	f7ff fe79 	bl	6436 <idx_inc>
				cont = true;
    6744:	2301      	movs	r3, #1
				buffer->rd_idx =
    6746:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6748:	f386 8811 	msr	BASEPRI, r6
    674c:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    6750:	2b00      	cmp	r3, #0
    6752:	d1b9      	bne.n	66c8 <mpsc_pbuf_claim+0x6>

	return item;
}
    6754:	4640      	mov	r0, r8
    6756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000675a <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    675a:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    675c:	6983      	ldr	r3, [r0, #24]
{
    675e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6760:	4608      	mov	r0, r1
{
    6762:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6764:	4798      	blx	r3
    6766:	4602      	mov	r2, r0
	__asm__ volatile(
    6768:	f04f 0320 	mov.w	r3, #32
    676c:	f3ef 8611 	mrs	r6, BASEPRI
    6770:	f383 8812 	msr	BASEPRI_MAX, r3
    6774:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    6778:	782b      	ldrb	r3, [r5, #0]
    677a:	f36f 0300 	bfc	r3, #0, #1
    677e:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    6780:	6923      	ldr	r3, [r4, #16]
    6782:	079b      	lsls	r3, r3, #30
    6784:	d505      	bpl.n	6792 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    6786:	68e1      	ldr	r1, [r4, #12]
    6788:	69e3      	ldr	r3, [r4, #28]
    678a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    678e:	429d      	cmp	r5, r3
    6790:	d112      	bne.n	67b8 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    6792:	782b      	ldrb	r3, [r5, #0]
    6794:	f36f 0341 	bfc	r3, #1, #1
    6798:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    679a:	68e1      	ldr	r1, [r4, #12]
    679c:	4620      	mov	r0, r4
    679e:	f7ff fe4a 	bl	6436 <idx_inc>
    67a2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    67a4:	f386 8811 	msr	BASEPRI, r6
    67a8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    67ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    67b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    67b4:	f7fe bcfe 	b.w	51b4 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    67b8:	682b      	ldr	r3, [r5, #0]
    67ba:	f360 039f 	bfi	r3, r0, #2, #30
    67be:	602b      	str	r3, [r5, #0]
    67c0:	e7f0      	b.n	67a4 <mpsc_pbuf_free+0x4a>

000067c2 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    67c2:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    67c6:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    67c8:	bf8a      	itet	hi
    67ca:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    67cc:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    67ce:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    67d0:	1e18      	subs	r0, r3, #0
    67d2:	bf18      	it	ne
    67d4:	2001      	movne	r0, #1
    67d6:	4770      	bx	lr

000067d8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    67d8:	4770      	bx	lr

000067da <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    67da:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    67dc:	075b      	lsls	r3, r3, #29
    67de:	d40b      	bmi.n	67f8 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    67e0:	6803      	ldr	r3, [r0, #0]
    67e2:	8840      	ldrh	r0, [r0, #2]
    67e4:	f3c3 2349 	ubfx	r3, r3, #9, #10
    67e8:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    67ec:	4418      	add	r0, r3
    67ee:	3017      	adds	r0, #23
    67f0:	f020 0007 	bic.w	r0, r0, #7
    67f4:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    67f6:	4770      	bx	lr
	return 0;
    67f8:	2000      	movs	r0, #0
}
    67fa:	4770      	bx	lr

000067fc <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    67fc:	f000 bc72 	b.w	70e4 <sys_clock_cycle_get_32>

00006800 <dummy_timestamp>:
    6800:	2000      	movs	r0, #0
    6802:	4770      	bx	lr

00006804 <notify_drop>:
	z_log_dropped(true);
    6804:	2001      	movs	r0, #1
    6806:	f7fa bd8f 	b.w	1328 <z_log_dropped>

0000680a <get_msg>:
{
    680a:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    680c:	f7fa fe00 	bl	1410 <z_log_msg2_claim>
}
    6810:	bd08      	pop	{r3, pc}

00006812 <z_log_get_tag>:
}
    6812:	2000      	movs	r0, #0
    6814:	4770      	bx	lr

00006816 <buffer_write>:
{
    6816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6818:	4606      	mov	r6, r0
    681a:	460d      	mov	r5, r1
    681c:	4614      	mov	r4, r2
    681e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    6820:	4621      	mov	r1, r4
    6822:	4628      	mov	r0, r5
    6824:	463a      	mov	r2, r7
    6826:	47b0      	blx	r6
	} while (len != 0);
    6828:	1a24      	subs	r4, r4, r0
		buf += processed;
    682a:	4405      	add	r5, r0
	} while (len != 0);
    682c:	d1f8      	bne.n	6820 <buffer_write+0xa>
}
    682e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006830 <log_output_flush>:
		     output->control_block->offset,
    6830:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    6832:	6881      	ldr	r1, [r0, #8]
{
    6834:	b510      	push	{r4, lr}
    6836:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    6838:	e9d2 2300 	ldrd	r2, r3, [r2]
    683c:	6800      	ldr	r0, [r0, #0]
    683e:	f7ff ffea 	bl	6816 <buffer_write>
	output->control_block->offset = 0;
    6842:	6863      	ldr	r3, [r4, #4]
    6844:	2200      	movs	r2, #0
    6846:	601a      	str	r2, [r3, #0]
}
    6848:	bd10      	pop	{r4, pc}

0000684a <out_func>:
{
    684a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    684c:	684b      	ldr	r3, [r1, #4]
    684e:	681a      	ldr	r2, [r3, #0]
    6850:	68cb      	ldr	r3, [r1, #12]
    6852:	429a      	cmp	r2, r3
{
    6854:	4605      	mov	r5, r0
    6856:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    6858:	d102      	bne.n	6860 <out_func+0x16>
		log_output_flush(out_ctx);
    685a:	4608      	mov	r0, r1
    685c:	f7ff ffe8 	bl	6830 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6860:	6863      	ldr	r3, [r4, #4]
    6862:	f3bf 8f5b 	dmb	ish
    6866:	e853 2f00 	ldrex	r2, [r3]
    686a:	1c51      	adds	r1, r2, #1
    686c:	e843 1000 	strex	r0, r1, [r3]
    6870:	2800      	cmp	r0, #0
    6872:	d1f8      	bne.n	6866 <out_func+0x1c>
    6874:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    6878:	68a3      	ldr	r3, [r4, #8]
    687a:	549d      	strb	r5, [r3, r2]
}
    687c:	2000      	movs	r0, #0
    687e:	bd38      	pop	{r3, r4, r5, pc}

00006880 <cr_out_func>:
{
    6880:	b538      	push	{r3, r4, r5, lr}
    6882:	4605      	mov	r5, r0
    6884:	460c      	mov	r4, r1
	out_func(c, ctx);
    6886:	f7ff ffe0 	bl	684a <out_func>
	if (c == '\n') {
    688a:	2d0a      	cmp	r5, #10
    688c:	d103      	bne.n	6896 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    688e:	4621      	mov	r1, r4
    6890:	200d      	movs	r0, #13
    6892:	f7ff ffda 	bl	684a <out_func>
}
    6896:	2000      	movs	r0, #0
    6898:	bd38      	pop	{r3, r4, r5, pc}

0000689a <z_log_msg2_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
    689a:	b570      	push	{r4, r5, r6, lr}
    689c:	460e      	mov	r6, r1
    689e:	4615      	mov	r5, r2
    68a0:	4619      	mov	r1, r3
	if (!msg) {
    68a2:	4604      	mov	r4, r0
    68a4:	b918      	cbnz	r0, 68ae <z_log_msg2_finalize+0x14>
	}

	msg->hdr.desc = desc;
	msg->hdr.source = source;
	z_log_msg2_commit(msg);
}
    68a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    68aa:	f7fa bd3d 	b.w	1328 <z_log_dropped>
	if (data) {
    68ae:	b143      	cbz	r3, 68c2 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    68b0:	f100 0310 	add.w	r3, r0, #16
    68b4:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    68b8:	4418      	add	r0, r3
    68ba:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    68be:	f000 f87c 	bl	69ba <memcpy>
	msg->hdr.source = source;
    68c2:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    68c6:	4620      	mov	r0, r4
}
    68c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    68cc:	f7fa be62 	b.w	1594 <z_log_msg2_commit>

000068d0 <z_impl_z_log_msg2_static_create>:

void z_impl_z_log_msg2_static_create(const void *source,
			      const struct log_msg2_desc desc,
			      uint8_t *package, const void *data)
{
    68d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    68d4:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    68d8:	f3c1 2649 	ubfx	r6, r1, #9, #10
    68dc:	b089      	sub	sp, #36	; 0x24
    68de:	4681      	mov	r9, r0
    68e0:	460d      	mov	r5, r1
    68e2:	4690      	mov	r8, r2
    68e4:	469a      	mov	sl, r3
    68e6:	3417      	adds	r4, #23

	struct log_msg2_desc out_desc = desc;
	int inlen = desc.package_len;
	struct log_msg2 *msg;

	if (inlen > 0) {
    68e8:	b386      	cbz	r6, 694c <z_impl_z_log_msg2_static_create+0x7c>
		uint32_t flags = CBPRINTF_PACKAGE_COPY_RW_STR;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    68ea:	2302      	movs	r3, #2
    68ec:	9300      	str	r3, [sp, #0]
    68ee:	f04f 0b04 	mov.w	fp, #4
    68f2:	2300      	movs	r3, #0
    68f4:	af06      	add	r7, sp, #24
    68f6:	4631      	mov	r1, r6
    68f8:	461a      	mov	r2, r3
    68fa:	f8cd b008 	str.w	fp, [sp, #8]
    68fe:	9701      	str	r7, [sp, #4]
    6900:	4640      	mov	r0, r8
    6902:	9605      	str	r6, [sp, #20]
    6904:	f7f9 fe66 	bl	5d4 <cbprintf_package_copy>
					    strl, ARRAY_SIZE(strl));

		/* Update package length with calculated value (which may be extended
		 * when strings are copied into the package.
		 */
		out_desc.package_len = len;
    6908:	f3c0 0309 	ubfx	r3, r0, #0, #10
    690c:	1918      	adds	r0, r3, r4
    690e:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    6912:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    6914:	461e      	mov	r6, r3
    6916:	9304      	str	r3, [sp, #16]
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    6918:	f7fa fd72 	bl	1400 <z_log_msg2_alloc>
		if (msg) {
    691c:	4604      	mov	r4, r0
    691e:	b150      	cbz	r0, 6936 <z_impl_z_log_msg2_static_create+0x66>
			len = cbprintf_package_copy(package, inlen,
    6920:	2302      	movs	r3, #2
    6922:	9300      	str	r3, [sp, #0]
    6924:	f100 0210 	add.w	r2, r0, #16
    6928:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    692c:	9b04      	ldr	r3, [sp, #16]
    692e:	9905      	ldr	r1, [sp, #20]
    6930:	4640      	mov	r0, r8
    6932:	f7f9 fe4f 	bl	5d4 <cbprintf_package_copy>
		}
	} else {
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
	}

	z_log_msg2_finalize(msg, source, out_desc, data);
    6936:	f366 2552 	bfi	r5, r6, #9, #10
    693a:	4653      	mov	r3, sl
    693c:	462a      	mov	r2, r5
    693e:	4649      	mov	r1, r9
    6940:	4620      	mov	r0, r4
}
    6942:	b009      	add	sp, #36	; 0x24
    6944:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, out_desc, data);
    6948:	f7ff bfa7 	b.w	689a <z_log_msg2_finalize>
    694c:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    6950:	0880      	lsrs	r0, r0, #2
    6952:	f7fa fd55 	bl	1400 <z_log_msg2_alloc>
    6956:	4604      	mov	r4, r0
    6958:	e7ed      	b.n	6936 <z_impl_z_log_msg2_static_create+0x66>

0000695a <abort_function>:
{
    695a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    695c:	2000      	movs	r0, #0
    695e:	f7fa fc5b 	bl	1218 <sys_reboot>

00006962 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6962:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6964:	6800      	ldr	r0, [r0, #0]
    6966:	f7fb bb65 	b.w	2034 <z_arm_fatal_error>

0000696a <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    696a:	2100      	movs	r1, #0
    696c:	2001      	movs	r0, #1
    696e:	f7fb bb61 	b.w	2034 <z_arm_fatal_error>

00006972 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6972:	b508      	push	{r3, lr}
	handler();
    6974:	f7fb fbfa 	bl	216c <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6978:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    697c:	f7fb bcd2 	b.w	2324 <z_arm_exc_exit>

00006980 <z_log_msg2_static_create.constprop.0>:
    6980:	2300      	movs	r3, #0
    6982:	f7ff bfa5 	b.w	68d0 <z_impl_z_log_msg2_static_create>

00006986 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6986:	3901      	subs	r1, #1
    6988:	4603      	mov	r3, r0
    698a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    698e:	b90a      	cbnz	r2, 6994 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6990:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6992:	4770      	bx	lr
		*d = *s;
    6994:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6998:	e7f7      	b.n	698a <strcpy+0x4>

0000699a <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    699a:	4603      	mov	r3, r0
	size_t n = 0;
    699c:	2000      	movs	r0, #0

	while (*s != '\0') {
    699e:	5c1a      	ldrb	r2, [r3, r0]
    69a0:	b902      	cbnz	r2, 69a4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    69a2:	4770      	bx	lr
		n++;
    69a4:	3001      	adds	r0, #1
    69a6:	e7fa      	b.n	699e <strlen+0x4>

000069a8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    69a8:	4603      	mov	r3, r0
	size_t n = 0;
    69aa:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    69ac:	5c1a      	ldrb	r2, [r3, r0]
    69ae:	b10a      	cbz	r2, 69b4 <strnlen+0xc>
    69b0:	4288      	cmp	r0, r1
    69b2:	d100      	bne.n	69b6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    69b4:	4770      	bx	lr
		n++;
    69b6:	3001      	adds	r0, #1
    69b8:	e7f8      	b.n	69ac <strnlen+0x4>

000069ba <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    69ba:	b510      	push	{r4, lr}
    69bc:	1e43      	subs	r3, r0, #1
    69be:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    69c0:	4291      	cmp	r1, r2
    69c2:	d100      	bne.n	69c6 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    69c4:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    69c6:	f811 4b01 	ldrb.w	r4, [r1], #1
    69ca:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    69ce:	e7f7      	b.n	69c0 <memcpy+0x6>

000069d0 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    69d0:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    69d2:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    69d4:	4603      	mov	r3, r0
	while (n > 0) {
    69d6:	4293      	cmp	r3, r2
    69d8:	d100      	bne.n	69dc <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    69da:	4770      	bx	lr
		*(d_byte++) = c_byte;
    69dc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    69e0:	e7f9      	b.n	69d6 <memset+0x6>

000069e2 <_stdout_hook_default>:
}
    69e2:	f04f 30ff 	mov.w	r0, #4294967295
    69e6:	4770      	bx	lr

000069e8 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    69e8:	2806      	cmp	r0, #6
    69ea:	d108      	bne.n	69fe <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    69ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    69f0:	2201      	movs	r2, #1
    69f2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    69f6:	f3bf 8f4f 	dsb	sy
        __WFE();
    69fa:	bf20      	wfe
    while (true)
    69fc:	e7fd      	b.n	69fa <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    69fe:	4770      	bx	lr

00006a00 <pm_state_exit_post_ops>:
    6a00:	2300      	movs	r3, #0
    6a02:	f383 8811 	msr	BASEPRI, r3
    6a06:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6a0a:	4770      	bx	lr

00006a0c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6a0c:	6903      	ldr	r3, [r0, #16]
    6a0e:	b2c9      	uxtb	r1, r1
    6a10:	220c      	movs	r2, #12
    6a12:	fb01 3302 	mla	r3, r1, r2, r3
    6a16:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    6a18:	f000 0007 	and.w	r0, r0, #7
    6a1c:	4770      	bx	lr

00006a1e <set_on_state>:
	__asm__ volatile(
    6a1e:	f04f 0320 	mov.w	r3, #32
    6a22:	f3ef 8211 	mrs	r2, BASEPRI
    6a26:	f383 8812 	msr	BASEPRI_MAX, r3
    6a2a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6a2e:	6803      	ldr	r3, [r0, #0]
    6a30:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6a34:	f043 0302 	orr.w	r3, r3, #2
    6a38:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6a3a:	f382 8811 	msr	BASEPRI, r2
    6a3e:	f3bf 8f6f 	isb	sy
}
    6a42:	4770      	bx	lr

00006a44 <stop>:
{
    6a44:	4603      	mov	r3, r0
    6a46:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    6a48:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6a4a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6a4c:	f04f 0420 	mov.w	r4, #32
    6a50:	f3ef 8611 	mrs	r6, BASEPRI
    6a54:	f384 8812 	msr	BASEPRI_MAX, r4
    6a58:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6a5c:	250c      	movs	r5, #12
    6a5e:	fb05 0401 	mla	r4, r5, r1, r0
    6a62:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6a64:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6a68:	d001      	beq.n	6a6e <stop+0x2a>
    6a6a:	42a2      	cmp	r2, r4
    6a6c:	d111      	bne.n	6a92 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6a6e:	fb05 0001 	mla	r0, r5, r1, r0
    6a72:	2201      	movs	r2, #1
    6a74:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    6a76:	2000      	movs	r0, #0
	__asm__ volatile(
    6a78:	f386 8811 	msr	BASEPRI, r6
    6a7c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6a80:	b930      	cbnz	r0, 6a90 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    6a82:	685b      	ldr	r3, [r3, #4]
    6a84:	220c      	movs	r2, #12
    6a86:	fb02 3101 	mla	r1, r2, r1, r3
    6a8a:	684b      	ldr	r3, [r1, #4]
    6a8c:	4798      	blx	r3
	return 0;
    6a8e:	2000      	movs	r0, #0
}
    6a90:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    6a92:	f04f 30ff 	mov.w	r0, #4294967295
    6a96:	e7ef      	b.n	6a78 <stop+0x34>

00006a98 <api_stop>:
	return stop(dev, subsys, CTX_API);
    6a98:	2280      	movs	r2, #128	; 0x80
    6a9a:	f7ff bfd3 	b.w	6a44 <stop>

00006a9e <async_start>:
{
    6a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6aa0:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6aa2:	6904      	ldr	r4, [r0, #16]
{
    6aa4:	4605      	mov	r5, r0
    6aa6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6aa8:	f04f 0020 	mov.w	r0, #32
    6aac:	f3ef 8c11 	mrs	ip, BASEPRI
    6ab0:	f380 8812 	msr	BASEPRI_MAX, r0
    6ab4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6ab8:	260c      	movs	r6, #12
    6aba:	fb06 4601 	mla	r6, r6, r1, r4
    6abe:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6ac0:	f000 0e07 	and.w	lr, r0, #7
    6ac4:	f1be 0f01 	cmp.w	lr, #1
    6ac8:	d110      	bne.n	6aec <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6aca:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    6acc:	2600      	movs	r6, #0
	__asm__ volatile(
    6ace:	f38c 8811 	msr	BASEPRI, ip
    6ad2:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6ad6:	b93e      	cbnz	r6, 6ae8 <async_start+0x4a>
	subdata->cb = cb;
    6ad8:	200c      	movs	r0, #12
    6ada:	4341      	muls	r1, r0
    6adc:	440c      	add	r4, r1
	subdata->user_data = user_data;
    6ade:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6ae2:	686b      	ldr	r3, [r5, #4]
    6ae4:	585b      	ldr	r3, [r3, r1]
    6ae6:	4798      	blx	r3
}
    6ae8:	4630      	mov	r0, r6
    6aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6aec:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    6af0:	4287      	cmp	r7, r0
    6af2:	bf14      	ite	ne
    6af4:	f04f 36ff 	movne.w	r6, #4294967295
    6af8:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    6afc:	e7e7      	b.n	6ace <async_start+0x30>

00006afe <api_start>:
{
    6afe:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6b00:	2480      	movs	r4, #128	; 0x80
    6b02:	9400      	str	r4, [sp, #0]
    6b04:	f7ff ffcb 	bl	6a9e <async_start>
}
    6b08:	b002      	add	sp, #8
    6b0a:	bd10      	pop	{r4, pc}

00006b0c <onoff_started_callback>:
	return &data->mgr[type];
    6b0c:	6900      	ldr	r0, [r0, #16]
{
    6b0e:	b410      	push	{r4}
	return &data->mgr[type];
    6b10:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6b12:	241c      	movs	r4, #28
    6b14:	fb03 0004 	mla	r0, r3, r4, r0
    6b18:	2100      	movs	r1, #0
}
    6b1a:	bc10      	pop	{r4}
	notify(mgr, 0);
    6b1c:	4710      	bx	r2

00006b1e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6b1e:	2000      	movs	r0, #0
    6b20:	f000 bbc4 	b.w	72ac <nrfx_clock_start>

00006b24 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6b24:	2000      	movs	r0, #0
    6b26:	f000 bbfe 	b.w	7326 <nrfx_clock_stop>

00006b2a <blocking_start_callback>:
{
    6b2a:	4610      	mov	r0, r2
    6b2c:	f7fe bb42 	b.w	51b4 <z_impl_k_sem_give>

00006b30 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b30:	6843      	ldr	r3, [r0, #4]
    6b32:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6b34:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6b38:	600b      	str	r3, [r1, #0]
}
    6b3a:	2000      	movs	r0, #0
    6b3c:	4770      	bx	lr

00006b3e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b3e:	6843      	ldr	r3, [r0, #4]
    6b40:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6b42:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6b46:	4042      	eors	r2, r0
    6b48:	400a      	ands	r2, r1
    6b4a:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6b4c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    6b50:	2000      	movs	r0, #0
    6b52:	4770      	bx	lr

00006b54 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b54:	6843      	ldr	r3, [r0, #4]
    6b56:	685b      	ldr	r3, [r3, #4]
}
    6b58:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6b5a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6b5e:	4770      	bx	lr

00006b60 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b60:	6843      	ldr	r3, [r0, #4]
    6b62:	685b      	ldr	r3, [r3, #4]
}
    6b64:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6b66:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6b6a:	4770      	bx	lr

00006b6c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6b6c:	6843      	ldr	r3, [r0, #4]
    6b6e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6b70:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    6b74:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6b76:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    6b7a:	2000      	movs	r0, #0
    6b7c:	4770      	bx	lr

00006b7e <gpio_nrfx_manage_callback>:
	return port->data;
    6b7e:	6903      	ldr	r3, [r0, #16]
	return list->head;
    6b80:	6858      	ldr	r0, [r3, #4]
{
    6b82:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    6b84:	b158      	cbz	r0, 6b9e <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6b86:	2400      	movs	r4, #0
    6b88:	4281      	cmp	r1, r0
    6b8a:	d112      	bne.n	6bb2 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    6b8c:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    6b8e:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    6b90:	b954      	cbnz	r4, 6ba8 <gpio_nrfx_manage_callback+0x2a>
    6b92:	428d      	cmp	r5, r1
	list->head = node;
    6b94:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6b96:	d100      	bne.n	6b9a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    6b98:	6098      	str	r0, [r3, #8]
	parent->next = child;
    6b9a:	2000      	movs	r0, #0
    6b9c:	6008      	str	r0, [r1, #0]
	if (set) {
    6b9e:	b96a      	cbnz	r2, 6bbc <gpio_nrfx_manage_callback+0x3e>
	return 0;
    6ba0:	2000      	movs	r0, #0
}
    6ba2:	bd30      	pop	{r4, r5, pc}
    6ba4:	4628      	mov	r0, r5
    6ba6:	e7ef      	b.n	6b88 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    6ba8:	428d      	cmp	r5, r1
	parent->next = child;
    6baa:	6020      	str	r0, [r4, #0]
	list->tail = node;
    6bac:	bf08      	it	eq
    6bae:	609c      	streq	r4, [r3, #8]
}
    6bb0:	e7f3      	b.n	6b9a <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    6bb2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6bb4:	4604      	mov	r4, r0
    6bb6:	2d00      	cmp	r5, #0
    6bb8:	d1f4      	bne.n	6ba4 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    6bba:	b13a      	cbz	r2, 6bcc <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    6bbc:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    6bbe:	685a      	ldr	r2, [r3, #4]
    6bc0:	600a      	str	r2, [r1, #0]
	list->head = node;
    6bc2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6bc4:	2800      	cmp	r0, #0
    6bc6:	d1eb      	bne.n	6ba0 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    6bc8:	6099      	str	r1, [r3, #8]
}
    6bca:	e7ea      	b.n	6ba2 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    6bcc:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6bd0:	e7e7      	b.n	6ba2 <gpio_nrfx_manage_callback+0x24>

00006bd2 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    6bd2:	6902      	ldr	r2, [r0, #16]
{
    6bd4:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    6bd6:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    6bda:	e883 0003 	stmia.w	r3, {r0, r1}
}
    6bde:	2000      	movs	r0, #0
    6be0:	4770      	bx	lr

00006be2 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    6be2:	6843      	ldr	r3, [r0, #4]
    6be4:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    6be6:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    6bea:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    6bee:	4770      	bx	lr

00006bf0 <tx_start>:
{
    6bf0:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = dev->config;
    6bf2:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    6bf4:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6bf6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6bfa:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6bfe:	2200      	movs	r2, #0
    6c00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    6c04:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    6c08:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    6c0c:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6c10:	6862      	ldr	r2, [r4, #4]
    6c12:	06d2      	lsls	r2, r2, #27
    6c14:	d50f      	bpl.n	6c36 <tx_start+0x46>
	if (data->async) {
    6c16:	6902      	ldr	r2, [r0, #16]
    6c18:	68d2      	ldr	r2, [r2, #12]
    6c1a:	b12a      	cbz	r2, 6c28 <tx_start+0x38>
		data->async->low_power_mask |= mask;
    6c1c:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
    6c20:	f041 0101 	orr.w	r1, r1, #1
    6c24:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6c28:	2208      	movs	r2, #8
    6c2a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    6c2e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    6c32:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6c36:	2201      	movs	r2, #1
    6c38:	609a      	str	r2, [r3, #8]
}
    6c3a:	bd10      	pop	{r4, pc}

00006c3c <user_callback>:
	if (data->async->user_callback) {
    6c3c:	6903      	ldr	r3, [r0, #16]
    6c3e:	68da      	ldr	r2, [r3, #12]
    6c40:	6813      	ldr	r3, [r2, #0]
    6c42:	b10b      	cbz	r3, 6c48 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
    6c44:	6852      	ldr	r2, [r2, #4]
    6c46:	4718      	bx	r3
}
    6c48:	4770      	bx	lr

00006c4a <notify_uart_rx_rdy>:
{
    6c4a:	b570      	push	{r4, r5, r6, lr}
    6c4c:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = dev->data;
    6c4e:	6906      	ldr	r6, [r0, #16]
{
    6c50:	4604      	mov	r4, r0
    6c52:	460d      	mov	r5, r1
	struct uart_event evt = {
    6c54:	2214      	movs	r2, #20
    6c56:	2100      	movs	r1, #0
    6c58:	a801      	add	r0, sp, #4
    6c5a:	f7ff feb9 	bl	69d0 <memset>
    6c5e:	2302      	movs	r3, #2
    6c60:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
    6c64:	68f3      	ldr	r3, [r6, #12]
	struct uart_event evt = {
    6c66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    6c68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    6c6a:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
    6c6c:	a901      	add	r1, sp, #4
    6c6e:	4620      	mov	r0, r4
	struct uart_event evt = {
    6c70:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
    6c74:	f7ff ffe2 	bl	6c3c <user_callback>
}
    6c78:	b006      	add	sp, #24
    6c7a:	bd70      	pop	{r4, r5, r6, pc}

00006c7c <rx_buf_release>:
{
    6c7c:	b570      	push	{r4, r5, r6, lr}
	if (*buf) {
    6c7e:	680e      	ldr	r6, [r1, #0]
{
    6c80:	b086      	sub	sp, #24
    6c82:	4605      	mov	r5, r0
    6c84:	460c      	mov	r4, r1
	if (*buf) {
    6c86:	b17e      	cbz	r6, 6ca8 <rx_buf_release+0x2c>
		struct uart_event evt = {
    6c88:	2214      	movs	r2, #20
    6c8a:	2100      	movs	r1, #0
    6c8c:	a801      	add	r0, sp, #4
    6c8e:	f7ff fe9f 	bl	69d0 <memset>
    6c92:	2304      	movs	r3, #4
		user_callback(dev, &evt);
    6c94:	eb0d 0103 	add.w	r1, sp, r3
    6c98:	4628      	mov	r0, r5
		struct uart_event evt = {
    6c9a:	f88d 3004 	strb.w	r3, [sp, #4]
    6c9e:	9602      	str	r6, [sp, #8]
		user_callback(dev, &evt);
    6ca0:	f7ff ffcc 	bl	6c3c <user_callback>
		*buf = NULL;
    6ca4:	2300      	movs	r3, #0
    6ca6:	6023      	str	r3, [r4, #0]
}
    6ca8:	b006      	add	sp, #24
    6caa:	bd70      	pop	{r4, r5, r6, pc}

00006cac <notify_rx_disable>:
{
    6cac:	b510      	push	{r4, lr}
    6cae:	b086      	sub	sp, #24
    6cb0:	4604      	mov	r4, r0
	struct uart_event evt = {
    6cb2:	2214      	movs	r2, #20
    6cb4:	2100      	movs	r1, #0
    6cb6:	a801      	add	r0, sp, #4
    6cb8:	f7ff fe8a 	bl	69d0 <memset>
    6cbc:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
    6cbe:	a901      	add	r1, sp, #4
    6cc0:	4620      	mov	r0, r4
	struct uart_event evt = {
    6cc2:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
    6cc6:	f7ff ffb9 	bl	6c3c <user_callback>
}
    6cca:	b006      	add	sp, #24
    6ccc:	bd10      	pop	{r4, pc}

00006cce <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
    6cce:	6843      	ldr	r3, [r0, #4]
{
    6cd0:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
    6cd2:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = dev->data;
    6cd4:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
    6cd6:	f04f 0020 	mov.w	r0, #32
    6cda:	f3ef 8511 	mrs	r5, BASEPRI
    6cde:	f380 8812 	msr	BASEPRI_MAX, r0
    6ce2:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
    6ce6:	68e4      	ldr	r4, [r4, #12]
    6ce8:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6cea:	b190      	cbz	r0, 6d12 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
    6cec:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    6cee:	b998      	cbnz	r0, 6d18 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
    6cf0:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6cf4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6cf8:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
    6cfc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    6d00:	f042 0220 	orr.w	r2, r2, #32
    6d04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
    6d08:	f385 8811 	msr	BASEPRI, r5
    6d0c:	f3bf 8f6f 	isb	sy
}
    6d10:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
    6d12:	f06f 000c 	mvn.w	r0, #12
    6d16:	e7f7      	b.n	6d08 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
    6d18:	f06f 000f 	mvn.w	r0, #15
    6d1c:	e7f4      	b.n	6d08 <uarte_nrfx_rx_buf_rsp+0x3a>

00006d1e <uarte_nrfx_callback_set>:
	if (!data->async) {
    6d1e:	6903      	ldr	r3, [r0, #16]
    6d20:	68db      	ldr	r3, [r3, #12]
    6d22:	b11b      	cbz	r3, 6d2c <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
    6d24:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
    6d28:	2000      	movs	r0, #0
    6d2a:	4770      	bx	lr
		return -ENOTSUP;
    6d2c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    6d30:	4770      	bx	lr

00006d32 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = dev->data;
    6d32:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    6d34:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
    6d36:	68d0      	ldr	r0, [r2, #12]
	return config->uarte_regs;
    6d38:	681b      	ldr	r3, [r3, #0]
{
    6d3a:	b510      	push	{r4, lr}
	if (data->async) {
    6d3c:	b958      	cbnz	r0, 6d56 <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6d3e:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6d42:	b15c      	cbz	r4, 6d5c <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
    6d44:	7d52      	ldrb	r2, [r2, #21]
    6d46:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d48:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    6d4c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d50:	2201      	movs	r2, #1
    6d52:	601a      	str	r2, [r3, #0]
}
    6d54:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    6d56:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6d5a:	e7fb      	b.n	6d54 <uarte_nrfx_poll_in+0x22>
		return -1;
    6d5c:	f04f 30ff 	mov.w	r0, #4294967295
    6d60:	e7f8      	b.n	6d54 <uarte_nrfx_poll_in+0x22>

00006d62 <uarte_nrfx_rx_disable>:
{
    6d62:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = dev->data;
    6d64:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
    6d66:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
    6d68:	68e8      	ldr	r0, [r5, #12]
	return config->uarte_regs;
    6d6a:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
    6d6c:	6e03      	ldr	r3, [r0, #96]	; 0x60
    6d6e:	b1b3      	cbz	r3, 6d9e <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
    6d70:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    6d72:	b153      	cbz	r3, 6d8a <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
    6d74:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
    6d78:	f023 0320 	bic.w	r3, r3, #32
    6d7c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d80:	2300      	movs	r3, #0
    6d82:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    6d86:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
	z_impl_k_timer_stop(timer);
    6d8a:	3088      	adds	r0, #136	; 0x88
    6d8c:	f000 fcc5 	bl	771a <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
    6d90:	68eb      	ldr	r3, [r5, #12]
    6d92:	2000      	movs	r0, #0
    6d94:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d98:	2301      	movs	r3, #1
    6d9a:	6063      	str	r3, [r4, #4]
}
    6d9c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    6d9e:	f06f 000d 	mvn.w	r0, #13
    6da2:	e7fb      	b.n	6d9c <uarte_nrfx_rx_disable+0x3a>

00006da4 <rx_flush.isra.0>:
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    6da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return config->uarte_regs;
    6da6:	6807      	ldr	r7, [r0, #0]
static uint8_t rx_flush(const struct device *dev, uint8_t *buf, uint32_t len)
    6da8:	4615      	mov	r5, r2
    return p_reg->RXD.AMOUNT;
    6daa:	f8d7 653c 	ldr.w	r6, [r7, #1340]	; 0x53c
	size_t flush_len = buf ? len : sizeof(tmp_buf);
    6dae:	460c      	mov	r4, r1
    6db0:	bb31      	cbnz	r1, 6e00 <rx_flush.isra.0+0x5c>
    6db2:	2505      	movs	r5, #5
		flush_buf = tmp_buf;
    6db4:	466b      	mov	r3, sp
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6db6:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6dba:	2300      	movs	r3, #0
    p_reg->RXD.MAXCNT = length;
    6dbc:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6dc0:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6dc2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    6dc6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6dca:	62f9      	str	r1, [r7, #44]	; 0x2c
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6dcc:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
	while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    6dd0:	2900      	cmp	r1, #0
    6dd2:	d0fb      	beq.n	6dcc <rx_flush.isra.0+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6dd4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    6dd8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    return p_reg->RXD.AMOUNT;
    6ddc:	f8d7 053c 	ldr.w	r0, [r7, #1340]	; 0x53c
	if (!buf) {
    6de0:	b914      	cbnz	r4, 6de8 <rx_flush.isra.0+0x44>
			return rx_amount;
    6de2:	b2c0      	uxtb	r0, r0
}
    6de4:	b003      	add	sp, #12
    6de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rx_amount != prev_rx_amount) {
    6de8:	4286      	cmp	r6, r0
    6dea:	d1fa      	bne.n	6de2 <rx_flush.isra.0+0x3e>
    6dec:	1962      	adds	r2, r4, r5
	for (int i = 0; i < flush_len; i++) {
    6dee:	42a2      	cmp	r2, r4
    6df0:	d101      	bne.n	6df6 <rx_flush.isra.0+0x52>
	return 0;
    6df2:	2000      	movs	r0, #0
    6df4:	e7f6      	b.n	6de4 <rx_flush.isra.0+0x40>
		if (buf[i] != dirty) {
    6df6:	f814 3b01 	ldrb.w	r3, [r4], #1
    6dfa:	2b00      	cmp	r3, #0
    6dfc:	d0f7      	beq.n	6dee <rx_flush.isra.0+0x4a>
    6dfe:	e7f0      	b.n	6de2 <rx_flush.isra.0+0x3e>
		memset(buf, dirty, len);
    6e00:	2100      	movs	r1, #0
    6e02:	4620      	mov	r0, r4
    6e04:	f7ff fde4 	bl	69d0 <memset>
		flush_len = len;
    6e08:	4623      	mov	r3, r4
    6e0a:	e7d4      	b.n	6db6 <rx_flush.isra.0+0x12>

00006e0c <setup_tx_cache.isra.0>:
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
    6e0c:	68c2      	ldr	r2, [r0, #12]
    6e0e:	6a01      	ldr	r1, [r0, #32]
	if (!remaining) {
    6e10:	1a52      	subs	r2, r2, r1
static bool setup_tx_cache(struct uarte_nrfx_data *data)
    6e12:	b508      	push	{r3, lr}
    6e14:	4603      	mov	r3, r0
	if (!remaining) {
    6e16:	d00b      	beq.n	6e30 <setup_tx_cache.isra.0+0x24>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
    6e18:	2a08      	cmp	r2, #8
    6e1a:	bf28      	it	cs
    6e1c:	2208      	movcs	r2, #8
	data->async->xfer_len = len;
    6e1e:	6142      	str	r2, [r0, #20]
	data->async->xfer_buf = data->async->tx_cache;
    6e20:	3018      	adds	r0, #24
    6e22:	6118      	str	r0, [r3, #16]
	memcpy(data->async->tx_cache, &data->async->tx_buf[data->async->tx_cache_offset], len);
    6e24:	689b      	ldr	r3, [r3, #8]
    6e26:	4419      	add	r1, r3
    6e28:	f7ff fdc7 	bl	69ba <memcpy>
	return true;
    6e2c:	2001      	movs	r0, #1
}
    6e2e:	bd08      	pop	{r3, pc}
		return false;
    6e30:	4610      	mov	r0, r2
    6e32:	e7fc      	b.n	6e2e <setup_tx_cache.isra.0+0x22>

00006e34 <async_uart_release>:
{
    6e34:	b570      	push	{r4, r5, r6, lr}
	struct uarte_nrfx_data *data = dev->data;
    6e36:	6903      	ldr	r3, [r0, #16]
{
    6e38:	4604      	mov	r4, r0
	__asm__ volatile(
    6e3a:	f04f 0220 	mov.w	r2, #32
    6e3e:	f3ef 8611 	mrs	r6, BASEPRI
    6e42:	f382 8812 	msr	BASEPRI_MAX, r2
    6e46:	f3bf 8f6f 	isb	sy
	data->async->low_power_mask &= ~dir_mask;
    6e4a:	68dd      	ldr	r5, [r3, #12]
    6e4c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    6e50:	ea23 0301 	bic.w	r3, r3, r1
    6e54:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	if (!data->async->low_power_mask) {
    6e58:	b973      	cbnz	r3, 6e78 <async_uart_release+0x44>
		if (dir_mask == UARTE_LOW_POWER_RX) {
    6e5a:	2902      	cmp	r1, #2
    6e5c:	d107      	bne.n	6e6e <async_uart_release+0x3a>
				rx_flush(dev, data->async->rx_flush_buffer,
    6e5e:	6840      	ldr	r0, [r0, #4]
    6e60:	2205      	movs	r2, #5
    6e62:	f105 01cc 	add.w	r1, r5, #204	; 0xcc
    6e66:	f7ff ff9d 	bl	6da4 <rx_flush.isra.0>
			data->async->rx_flush_cnt =
    6e6a:	f885 00d1 	strb.w	r0, [r5, #209]	; 0xd1
	return config->uarte_regs;
    6e6e:	6863      	ldr	r3, [r4, #4]
    6e70:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6e72:	2200      	movs	r2, #0
    6e74:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    6e78:	f386 8811 	msr	BASEPRI, r6
    6e7c:	f3bf 8f6f 	isb	sy
}
    6e80:	bd70      	pop	{r4, r5, r6, pc}

00006e82 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    6e82:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    6e84:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e86:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6e8a:	b940      	cbnz	r0, 6e9e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    6e8c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    6e8e:	079b      	lsls	r3, r3, #30
    6e90:	d406      	bmi.n	6ea0 <is_tx_ready.isra.0+0x1e>
    6e92:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    6e96:	3800      	subs	r0, #0
    6e98:	bf18      	it	ne
    6e9a:	2001      	movne	r0, #1
    6e9c:	4770      	bx	lr
    6e9e:	2001      	movs	r0, #1
}
    6ea0:	4770      	bx	lr

00006ea2 <start_tx_locked>:
{
    6ea2:	b510      	push	{r4, lr}
    6ea4:	4604      	mov	r4, r0
	if (!is_tx_ready(dev)) {
    6ea6:	6840      	ldr	r0, [r0, #4]
    6ea8:	f7ff ffeb 	bl	6e82 <is_tx_ready.isra.0>
		data->async->pending_tx = true;
    6eac:	68cb      	ldr	r3, [r1, #12]
	if (!is_tx_ready(dev)) {
    6eae:	b918      	cbnz	r0, 6eb8 <start_tx_locked+0x16>
		data->async->pending_tx = true;
    6eb0:	2201      	movs	r2, #1
    6eb2:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
    6eb6:	bd10      	pop	{r4, pc}
		data->async->pending_tx = false;
    6eb8:	2200      	movs	r2, #0
    6eba:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
    6ebe:	f04f 32ff 	mov.w	r2, #4294967295
    6ec2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    6ec6:	4620      	mov	r0, r4
    6ec8:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
}
    6ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
    6ed0:	f7ff be8e 	b.w	6bf0 <tx_start>

00006ed4 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    6ed4:	b510      	push	{r4, lr}
    6ed6:	2200      	movs	r2, #0
    6ed8:	4604      	mov	r4, r0
    6eda:	2101      	movs	r1, #1
    6edc:	2028      	movs	r0, #40	; 0x28
    6ede:	f7fb f92d 	bl	213c <z_arm_irq_priority_set>
    6ee2:	2028      	movs	r0, #40	; 0x28
    6ee4:	f7fb f90c 	bl	2100 <arch_irq_enable>
    6ee8:	4620      	mov	r0, r4
    6eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6eee:	f7fc bad7 	b.w	34a0 <uarte_instance_init.constprop.0>

00006ef2 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    6ef2:	b510      	push	{r4, lr}
    6ef4:	2200      	movs	r2, #0
    6ef6:	4604      	mov	r4, r0
    6ef8:	2101      	movs	r1, #1
    6efa:	2002      	movs	r0, #2
    6efc:	f7fb f91e 	bl	213c <z_arm_irq_priority_set>
    6f00:	2002      	movs	r0, #2
    6f02:	f7fb f8fd 	bl	2100 <arch_irq_enable>
    6f06:	4620      	mov	r0, r4
    6f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6f0c:	f7fc bac8 	b.w	34a0 <uarte_instance_init.constprop.0>

00006f10 <uarte_nrfx_rx_enable>:
{
    6f10:	e92d 4fd0 	stmdb	sp!, {r4, r6, r7, r8, r9, sl, fp, lr}
	const struct uarte_nrfx_config *cfg = dev->config;
    6f14:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct uarte_nrfx_data *data = dev->data;
    6f18:	f8d0 b010 	ldr.w	fp, [r0, #16]
	return config->uarte_regs;
    6f1c:	f8da 8000 	ldr.w	r8, [sl]
{
    6f20:	4614      	mov	r4, r2
	if (cfg->disable_rx) {
    6f22:	f89a 2008 	ldrb.w	r2, [sl, #8]
{
    6f26:	4606      	mov	r6, r0
    6f28:	4689      	mov	r9, r1
	if (cfg->disable_rx) {
    6f2a:	2a00      	cmp	r2, #0
    6f2c:	d172      	bne.n	7014 <uarte_nrfx_rx_enable+0x104>
	if (data->async->rx_enabled) {
    6f2e:	f8db 100c 	ldr.w	r1, [fp, #12]
    6f32:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
    6f36:	2a00      	cmp	r2, #0
    6f38:	d16f      	bne.n	701a <uarte_nrfx_rx_enable+0x10a>
		MAX(timeout / RX_TIMEOUT_DIV,
    6f3a:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
    6f3e:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
    6f40:	bfd2      	itee	le
    6f42:	235c      	movle	r3, #92	; 0x5c
    6f44:	2205      	movgt	r2, #5
    6f46:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
    6f4a:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
    6f4e:	2300      	movs	r3, #0
	data->async->rx_next_buf = NULL;
    6f50:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
    6f54:	670b      	str	r3, [r1, #112]	; 0x70
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6f56:	f8da 3004 	ldr.w	r3, [sl, #4]
    6f5a:	06da      	lsls	r2, r3, #27
	data->async->rx_buf_len = len;
    6f5c:	e9c1 9418 	strd	r9, r4, [r1, #96]	; 0x60
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6f60:	d524      	bpl.n	6fac <uarte_nrfx_rx_enable+0x9c>
		if (data->async->rx_flush_cnt) {
    6f62:	f891 70d1 	ldrb.w	r7, [r1, #209]	; 0xd1
    6f66:	b30f      	cbz	r7, 6fac <uarte_nrfx_rx_enable+0x9c>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
    6f68:	42a7      	cmp	r7, r4
    6f6a:	bf28      	it	cs
    6f6c:	4627      	movcs	r7, r4
			memcpy(buf, data->async->rx_flush_buffer, cpy_len);
    6f6e:	4648      	mov	r0, r9
    6f70:	463a      	mov	r2, r7
    6f72:	31cc      	adds	r1, #204	; 0xcc
    6f74:	f7ff fd21 	bl	69ba <memcpy>
			if (!len) {
    6f78:	1be4      	subs	r4, r4, r7
			buf += cpy_len;
    6f7a:	44b9      	add	r9, r7
			if (!len) {
    6f7c:	d116      	bne.n	6fac <uarte_nrfx_rx_enable+0x9c>
				data->async->rx_flush_cnt -= cpy_len;
    6f7e:	f8db 200c 	ldr.w	r2, [fp, #12]
    6f82:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
    6f86:	1bdb      	subs	r3, r3, r7
    6f88:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
    6f8c:	4639      	mov	r1, r7
    6f8e:	4630      	mov	r0, r6
    6f90:	f7ff fe5b 	bl	6c4a <notify_uart_rx_rdy>
				rx_buf_release(dev, &data->async->rx_buf);
    6f94:	f8db 100c 	ldr.w	r1, [fp, #12]
    6f98:	4630      	mov	r0, r6
    6f9a:	3160      	adds	r1, #96	; 0x60
    6f9c:	f7ff fe6e 	bl	6c7c <rx_buf_release>
				notify_rx_disable(dev);
    6fa0:	4630      	mov	r0, r6
    6fa2:	f7ff fe83 	bl	6cac <notify_rx_disable>
	return 0;
    6fa6:	2000      	movs	r0, #0
}
    6fa8:	e8bd 8fd0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, sl, fp, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6fac:	2300      	movs	r3, #0
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6fae:	f8c8 9534 	str.w	r9, [r8, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6fb2:	f8c8 4538 	str.w	r4, [r8, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6fb6:	f8c8 3110 	str.w	r3, [r8, #272]	; 0x110
    6fba:	f8d8 2110 	ldr.w	r2, [r8, #272]	; 0x110
    6fbe:	f8c8 314c 	str.w	r3, [r8, #332]	; 0x14c
    6fc2:	f8d8 314c 	ldr.w	r3, [r8, #332]	; 0x14c
	data->async->rx_enabled = true;
    6fc6:	f8db 300c 	ldr.w	r3, [fp, #12]
    6fca:	2201      	movs	r2, #1
    6fcc:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6fd0:	f8da 3004 	ldr.w	r3, [sl, #4]
    6fd4:	06db      	lsls	r3, r3, #27
    6fd6:	d519      	bpl.n	700c <uarte_nrfx_rx_enable+0xfc>
	__asm__ volatile(
    6fd8:	f04f 0320 	mov.w	r3, #32
    6fdc:	f3ef 8111 	mrs	r1, BASEPRI
    6fe0:	f383 8812 	msr	BASEPRI_MAX, r3
    6fe4:	f3bf 8f6f 	isb	sy
	if (data->async) {
    6fe8:	6933      	ldr	r3, [r6, #16]
	const struct uarte_nrfx_config *config = dev->config;
    6fea:	6870      	ldr	r0, [r6, #4]
	if (data->async) {
    6fec:	68db      	ldr	r3, [r3, #12]
    6fee:	b12b      	cbz	r3, 6ffc <uarte_nrfx_rx_enable+0xec>
		data->async->low_power_mask |= mask;
    6ff0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
    6ff4:	f042 0202 	orr.w	r2, r2, #2
    6ff8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
    6ffc:	6803      	ldr	r3, [r0, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6ffe:	2208      	movs	r2, #8
    7000:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
    7004:	f381 8811 	msr	BASEPRI, r1
    7008:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    700c:	2301      	movs	r3, #1
    700e:	f8c8 3000 	str.w	r3, [r8]
    7012:	e7c8      	b.n	6fa6 <uarte_nrfx_rx_enable+0x96>
		return -ENOTSUP;
    7014:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7018:	e7c6      	b.n	6fa8 <uarte_nrfx_rx_enable+0x98>
		return -EBUSY;
    701a:	f06f 000f 	mvn.w	r0, #15
    701e:	e7c3      	b.n	6fa8 <uarte_nrfx_rx_enable+0x98>

00007020 <rx_timeout>:
{
    7020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return timer->user_data;
    7022:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
    7024:	68f3      	ldr	r3, [r6, #12]
    7026:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
    702a:	f002 07ff 	and.w	r7, r2, #255	; 0xff
    702e:	bb42      	cbnz	r2, 7082 <rx_timeout+0x62>
	const struct device *dev = data->dev;
    7030:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
    7032:	686a      	ldr	r2, [r5, #4]
    7034:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENCLR = mask;
    7036:	2110      	movs	r1, #16
    7038:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
    703c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
    7040:	6f59      	ldr	r1, [r3, #116]	; 0x74
    7042:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
    7044:	bf1e      	ittt	ne
    7046:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
    7048:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
    704a:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
    704e:	e9d3 421d 	ldrd	r4, r2, [r3, #116]	; 0x74
	if (!HW_RX_COUNTING_ENABLED(data) &&
    7052:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
    7054:	bf48      	it	mi
    7056:	f8c3 20c0 	strmi.w	r2, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    705a:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
		len = 0;
    705e:	bf48      	it	mi
    7060:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
    7062:	18a0      	adds	r0, r4, r2
    7064:	4288      	cmp	r0, r1
    7066:	d90d      	bls.n	7084 <rx_timeout+0x64>
		len = data->async->rx_buf_len - data->async->rx_offset;
    7068:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
    706a:	2c00      	cmp	r4, #0
    706c:	dd04      	ble.n	7078 <rx_timeout+0x58>
		clipped = true;
    706e:	2701      	movs	r7, #1
    7070:	e00e      	b.n	7090 <rx_timeout+0x70>
			data->async->rx_timeout_left -=
    7072:	1a52      	subs	r2, r2, r1
    7074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
    7078:	686b      	ldr	r3, [r5, #4]
    707a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    707c:	2210      	movs	r2, #16
    707e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
    7084:	2c00      	cmp	r4, #0
    7086:	d0f7      	beq.n	7078 <rx_timeout+0x58>
				< data->async->rx_timeout_slab)) {
    7088:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
    708c:	428a      	cmp	r2, r1
    708e:	daf0      	bge.n	7072 <rx_timeout+0x52>
			notify_uart_rx_rdy(dev, len);
    7090:	4628      	mov	r0, r5
    7092:	4621      	mov	r1, r4
    7094:	f7ff fdd9 	bl	6c4a <notify_uart_rx_rdy>
			data->async->rx_offset += len;
    7098:	68f0      	ldr	r0, [r6, #12]
    709a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    709c:	4423      	add	r3, r4
    709e:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
    70a0:	6f83      	ldr	r3, [r0, #120]	; 0x78
    70a2:	4423      	add	r3, r4
    70a4:	6783      	str	r3, [r0, #120]	; 0x78
		if (clipped) {
    70a6:	2f00      	cmp	r7, #0
    70a8:	d0e6      	beq.n	7078 <rx_timeout+0x58>
    70aa:	3088      	adds	r0, #136	; 0x88
    70ac:	f000 fb35 	bl	771a <z_impl_k_timer_stop>
}
    70b0:	e7e2      	b.n	7078 <rx_timeout+0x58>

000070b2 <uarte_nrfx_tx_abort>:
{
    70b2:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
    70b4:	6843      	ldr	r3, [r0, #4]
    70b6:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
    70b8:	6903      	ldr	r3, [r0, #16]
    70ba:	68d8      	ldr	r0, [r3, #12]
    70bc:	6883      	ldr	r3, [r0, #8]
    70be:	b14b      	cbz	r3, 70d4 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
    70c0:	2400      	movs	r4, #0
    70c2:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
    70c6:	3028      	adds	r0, #40	; 0x28
    70c8:	f000 fb27 	bl	771a <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    70cc:	2301      	movs	r3, #1
    70ce:	60eb      	str	r3, [r5, #12]
	return 0;
    70d0:	4620      	mov	r0, r4
}
    70d2:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
    70d4:	f06f 000d 	mvn.w	r0, #13
    70d8:	e7fb      	b.n	70d2 <uarte_nrfx_tx_abort+0x20>

000070da <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
    70da:	6b43      	ldr	r3, [r0, #52]	; 0x34
    70dc:	6818      	ldr	r0, [r3, #0]
    70de:	f7ff bfe8 	b.w	70b2 <uarte_nrfx_tx_abort>

000070e2 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    70e2:	4770      	bx	lr

000070e4 <sys_clock_cycle_get_32>:
{
    70e4:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    70e6:	f7fc fd3d 	bl	3b64 <z_nrf_rtc_timer_read>
}
    70ea:	bd08      	pop	{r3, pc}

000070ec <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    70ec:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    70ee:	6843      	ldr	r3, [r0, #4]
    70f0:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    70f2:	7a03      	ldrb	r3, [r0, #8]
    70f4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    70f8:	3b01      	subs	r3, #1
    70fa:	00db      	lsls	r3, r3, #3
    70fc:	6845      	ldr	r5, [r0, #4]
    70fe:	6814      	ldr	r4, [r2, #0]
    7100:	441d      	add	r5, r3
    7102:	42ac      	cmp	r4, r5
    7104:	d902      	bls.n	710c <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    7106:	f06f 0001 	mvn.w	r0, #1
}
    710a:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    710c:	7965      	ldrb	r5, [r4, #5]
    710e:	428d      	cmp	r5, r1
    7110:	d002      	beq.n	7118 <pinctrl_lookup_state+0x2c>
		(*state)++;
    7112:	3408      	adds	r4, #8
    7114:	6014      	str	r4, [r2, #0]
    7116:	e7f1      	b.n	70fc <pinctrl_lookup_state+0x10>
			return 0;
    7118:	2000      	movs	r0, #0
    711a:	e7f6      	b.n	710a <pinctrl_lookup_state+0x1e>

0000711c <nrf_gpio_pin_write>:
    if (value == 0)
    711c:	b909      	cbnz	r1, 7122 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    711e:	f7fc bed9 	b.w	3ed4 <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    7122:	f7fc bf09 	b.w	3f38 <nrf_gpio_pin_set>

00007126 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    7126:	b570      	push	{r4, r5, r6, lr}
    7128:	4615      	mov	r5, r2
    712a:	4604      	mov	r4, r0
    712c:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7130:	42a6      	cmp	r6, r4
    7132:	d101      	bne.n	7138 <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    7134:	2000      	movs	r0, #0
}
    7136:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    7138:	6823      	ldr	r3, [r4, #0]
    713a:	0c1a      	lsrs	r2, r3, #16
    713c:	2a22      	cmp	r2, #34	; 0x22
    713e:	f200 808e 	bhi.w	725e <pinctrl_configure_pins+0x138>
    7142:	e8df f002 	tbb	[pc, r2]
    7146:	1d12      	.short	0x1d12
    7148:	39294324 	.word	0x39294324
    714c:	8c8c8c43 	.word	0x8c8c8c43
    7150:	8c4d488c 	.word	0x8c4d488c
    7154:	8c8c8c8c 	.word	0x8c8c8c8c
    7158:	8c8c8c8c 	.word	0x8c8c8c8c
    715c:	68635e52 	.word	0x68635e52
    7160:	6d8c8c8c 	.word	0x6d8c8c8c
    7164:	827d7873 	.word	0x827d7873
    7168:	87          	.byte	0x87
    7169:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    716a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    716e:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    7172:	6820      	ldr	r0, [r4, #0]
    7174:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    7178:	f7fc fede 	bl	3f38 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    717c:	2201      	movs	r2, #1
    717e:	e015      	b.n	71ac <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    7180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7184:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7188:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    718a:	2100      	movs	r1, #0
    718c:	e00f      	b.n	71ae <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    718e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7192:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    7196:	e7ec      	b.n	7172 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    7198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    719c:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    71a0:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    71a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    71a6:	f7fc fe95 	bl	3ed4 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    71aa:	2200      	movs	r2, #0
    71ac:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    71ae:	6820      	ldr	r0, [r4, #0]
    71b0:	f7fc fea0 	bl	3ef4 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    71b4:	3404      	adds	r4, #4
    71b6:	e7bb      	b.n	7130 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    71b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    71bc:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    71c0:	6820      	ldr	r0, [r4, #0]
    71c2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    71c6:	f7fc fe85 	bl	3ed4 <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    71ca:	e7d7      	b.n	717c <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    71cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    71d0:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    71d4:	e7d8      	b.n	7188 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    71d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    71da:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    71de:	e7d3      	b.n	7188 <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    71e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    71e4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    71e8:	e7ce      	b.n	7188 <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    71ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    71ee:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    71f2:	6820      	ldr	r0, [r4, #0]
    71f4:	f3c0 3140 	ubfx	r1, r0, #13, #1
    71f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    71fc:	f7ff ff8e 	bl	711c <nrf_gpio_pin_write>
    7200:	e7bc      	b.n	717c <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    7202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7206:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    720a:	e7f2      	b.n	71f2 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    720c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7210:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7214:	e7ed      	b.n	71f2 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    7216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    721a:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    721e:	e7e8      	b.n	71f2 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    7220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7224:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7228:	2201      	movs	r2, #1
    722a:	e7ae      	b.n	718a <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    722c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7230:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7234:	e7f8      	b.n	7228 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    7236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    723a:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    723e:	e7f3      	b.n	7228 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    7240:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7244:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7248:	e7ee      	b.n	7228 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    724a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    724e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7252:	e7e9      	b.n	7228 <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    7254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7258:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    725c:	e7e4      	b.n	7228 <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    725e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7262:	e768      	b.n	7136 <pinctrl_configure_pins+0x10>

00007264 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    7264:	f7fe bd2e 	b.w	5cc4 <nrf_cc3xx_platform_init_no_rng>

00007268 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    7268:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    726a:	f7fa fdfb 	bl	1e64 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    726e:	f7fa fead 	bl	1fcc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    7272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    7276:	f7fe bd25 	b.w	5cc4 <nrf_cc3xx_platform_init_no_rng>

0000727a <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    727a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    727e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    7282:	f1a0 0308 	sub.w	r3, r0, #8
    7286:	4258      	negs	r0, r3
    7288:	4158      	adcs	r0, r3
    728a:	4770      	bx	lr

0000728c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    728c:	4700      	bx	r0

0000728e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    728e:	f000 ba34 	b.w	76fa <z_impl_k_busy_wait>

00007292 <nrfx_clock_enable>:
{
    7292:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7294:	2000      	movs	r0, #0
    7296:	f7fa ff43 	bl	2120 <arch_irq_is_enabled>
    729a:	b908      	cbnz	r0, 72a0 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    729c:	f7fa ff30 	bl	2100 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    72a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    72a4:	2200      	movs	r2, #0
    72a6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    72aa:	bd08      	pop	{r3, pc}

000072ac <nrfx_clock_start>:
{
    72ac:	b508      	push	{r3, lr}
    switch (domain)
    72ae:	b110      	cbz	r0, 72b6 <nrfx_clock_start+0xa>
    72b0:	2801      	cmp	r0, #1
    72b2:	d02d      	beq.n	7310 <nrfx_clock_start+0x64>
}
    72b4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    72b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    72ba:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    72be:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    72c2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    72c6:	d10b      	bne.n	72e0 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    72c8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    72cc:	07c9      	lsls	r1, r1, #31
    72ce:	d510      	bpl.n	72f2 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    72d0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    72d4:	079b      	lsls	r3, r3, #30
    72d6:	d408      	bmi.n	72ea <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    72d8:	2302      	movs	r3, #2
    72da:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    72de:	e7e9      	b.n	72b4 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    72e0:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    72e4:	2b01      	cmp	r3, #1
    72e6:	d004      	beq.n	72f2 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    72e8:	b11b      	cbz	r3, 72f2 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    72ea:	2000      	movs	r0, #0
    72ec:	f7fc ff96 	bl	421c <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    72f0:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    72f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    72f6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    72fa:	2300      	movs	r3, #0
    72fc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    7300:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    7304:	2302      	movs	r3, #2
    7306:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    730a:	2301      	movs	r3, #1
    730c:	6093      	str	r3, [r2, #8]
}
    730e:	e7d1      	b.n	72b4 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7314:	2200      	movs	r2, #0
    7316:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    731a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    731e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7322:	6018      	str	r0, [r3, #0]
}
    7324:	e7c6      	b.n	72b4 <nrfx_clock_start+0x8>

00007326 <nrfx_clock_stop>:
    clock_stop(domain);
    7326:	f7fc bf79 	b.w	421c <clock_stop>

0000732a <nrf_gpio_reconfigure>:
{
    732a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    732c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    732e:	a801      	add	r0, sp, #4
{
    7330:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
    7334:	4617      	mov	r7, r2
    7336:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    7338:	f7fd f808 	bl	434c <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    733c:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    733e:	2f00      	cmp	r7, #0
    7340:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7344:	bf14      	ite	ne
    7346:	2302      	movne	r3, #2
    7348:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    734a:	2900      	cmp	r1, #0
    734c:	bf18      	it	ne
    734e:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7352:	2d00      	cmp	r5, #0
    7354:	bf14      	ite	ne
    7356:	f04f 0c0c 	movne.w	ip, #12
    735a:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    735e:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7360:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7364:	bf14      	ite	ne
    7366:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
    736a:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    736e:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7370:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7374:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    7378:	bf14      	ite	ne
    737a:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
    737e:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7382:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
    7386:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    738a:	b101      	cbz	r1, 738e <nrf_gpio_reconfigure+0x64>
    738c:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    738e:	b10f      	cbz	r7, 7394 <nrf_gpio_reconfigure+0x6a>
    7390:	783f      	ldrb	r7, [r7, #0]
    7392:	007f      	lsls	r7, r7, #1
    7394:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7396:	b10d      	cbz	r5, 739c <nrf_gpio_reconfigure+0x72>
    7398:	782d      	ldrb	r5, [r5, #0]
    739a:	00ad      	lsls	r5, r5, #2
    739c:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    739e:	b10c      	cbz	r4, 73a4 <nrf_gpio_reconfigure+0x7a>
    73a0:	7822      	ldrb	r2, [r4, #0]
    73a2:	0214      	lsls	r4, r2, #8
    73a4:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    73a6:	b10e      	cbz	r6, 73ac <nrf_gpio_reconfigure+0x82>
    73a8:	7836      	ldrb	r6, [r6, #0]
    73aa:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    73ac:	432c      	orrs	r4, r5
    73ae:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
    73b0:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    73b4:	b003      	add	sp, #12
    73b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000073b8 <nrf_gpio_cfg_sense_set>:
{
    73b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    73ba:	f10d 030f 	add.w	r3, sp, #15
    73be:	9301      	str	r3, [sp, #4]
    73c0:	2300      	movs	r3, #0
{
    73c2:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    73c6:	9300      	str	r3, [sp, #0]
    73c8:	461a      	mov	r2, r3
    73ca:	4619      	mov	r1, r3
    73cc:	f7ff ffad 	bl	732a <nrf_gpio_reconfigure>
}
    73d0:	b005      	add	sp, #20
    73d2:	f85d fb04 	ldr.w	pc, [sp], #4

000073d6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    73d6:	f7fd bb1f 	b.w	4a18 <_DoInit>

000073da <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    73da:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    73dc:	f7ff fffb 	bl	73d6 <SEGGER_RTT_Init>

	return 0;
}
    73e0:	2000      	movs	r0, #0
    73e2:	bd08      	pop	{r3, pc}

000073e4 <z_device_state_init>:
}
    73e4:	4770      	bx	lr

000073e6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    73e6:	b138      	cbz	r0, 73f8 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    73e8:	68c3      	ldr	r3, [r0, #12]
    73ea:	8818      	ldrh	r0, [r3, #0]
    73ec:	f3c0 0008 	ubfx	r0, r0, #0, #9
    73f0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    73f4:	4258      	negs	r0, r3
    73f6:	4158      	adcs	r0, r3
}
    73f8:	4770      	bx	lr

000073fa <z_early_memset>:
	(void) memset(dst, c, n);
    73fa:	f7ff bae9 	b.w	69d0 <memset>

000073fe <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    73fe:	f7ff badc 	b.w	69ba <memcpy>

00007402 <k_mem_slab_init>:
{
    7402:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    7404:	2400      	movs	r4, #0
    7406:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7408:	ea41 0402 	orr.w	r4, r1, r2
    740c:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    7410:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
    7414:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    7416:	d10c      	bne.n	7432 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
    7418:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    741a:	42a3      	cmp	r3, r4
    741c:	d103      	bne.n	7426 <k_mem_slab_init+0x24>
	list->tail = (sys_dnode_t *)list;
    741e:	e9c0 0000 	strd	r0, r0, [r0]
}
    7422:	2000      	movs	r0, #0
}
    7424:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    7426:	6945      	ldr	r5, [r0, #20]
    7428:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    742a:	3401      	adds	r4, #1
		slab->free_list = p;
    742c:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    742e:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    7430:	e7f3      	b.n	741a <k_mem_slab_init+0x18>
		return -EINVAL;
    7432:	f06f 0015 	mvn.w	r0, #21
	return rc;
    7436:	e7f5      	b.n	7424 <k_mem_slab_init+0x22>

00007438 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    7438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    743a:	4604      	mov	r4, r0
    743c:	460d      	mov	r5, r1
	__asm__ volatile(
    743e:	f04f 0320 	mov.w	r3, #32
    7442:	f3ef 8611 	mrs	r6, BASEPRI
    7446:	f383 8812 	msr	BASEPRI_MAX, r3
    744a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    744e:	6947      	ldr	r7, [r0, #20]
    7450:	b977      	cbnz	r7, 7470 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    7452:	f000 f8f6 	bl	7642 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    7456:	b158      	cbz	r0, 7470 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    7458:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    745a:	6142      	str	r2, [r0, #20]
    745c:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    745e:	f000 f87f 	bl	7560 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    7462:	4631      	mov	r1, r6
    7464:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    7468:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    746c:	f7fd bf30 	b.w	52d0 <z_reschedule>
	**(char ***) mem = slab->free_list;
    7470:	682b      	ldr	r3, [r5, #0]
    7472:	6962      	ldr	r2, [r4, #20]
    7474:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    7476:	682b      	ldr	r3, [r5, #0]
    7478:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    747a:	69a3      	ldr	r3, [r4, #24]
    747c:	3b01      	subs	r3, #1
    747e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    7480:	f386 8811 	msr	BASEPRI, r6
    7484:	f3bf 8f6f 	isb	sy
}
    7488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000748a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    748a:	f3ef 8005 	mrs	r0, IPSR
}
    748e:	3800      	subs	r0, #0
    7490:	bf18      	it	ne
    7492:	2001      	movne	r0, #1
    7494:	4770      	bx	lr

00007496 <z_impl_k_thread_name_set>:
}
    7496:	f06f 0057 	mvn.w	r0, #87	; 0x57
    749a:	4770      	bx	lr

0000749c <k_thread_name_get>:
}
    749c:	2000      	movs	r0, #0
    749e:	4770      	bx	lr

000074a0 <z_pm_save_idle_exit>:
{
    74a0:	b508      	push	{r3, lr}
	pm_system_resume();
    74a2:	f7fa fbc7 	bl	1c34 <pm_system_resume>
}
    74a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    74aa:	f7ff be1a 	b.w	70e2 <sys_clock_idle_exit>

000074ae <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    74ae:	f990 300e 	ldrsb.w	r3, [r0, #14]
    74b2:	428b      	cmp	r3, r1
    74b4:	d001      	beq.n	74ba <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    74b6:	f7fe b873 	b.w	55a0 <z_set_prio>
}
    74ba:	2000      	movs	r0, #0
    74bc:	4770      	bx	lr

000074be <z_impl_k_mutex_init>:
{
    74be:	4603      	mov	r3, r0
	mutex->owner = NULL;
    74c0:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    74c2:	e9c3 0002 	strd	r0, r0, [r3, #8]
    74c6:	e9c3 3300 	strd	r3, r3, [r3]
}
    74ca:	4770      	bx	lr

000074cc <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    74cc:	b13a      	cbz	r2, 74de <z_impl_k_sem_init+0x12>
    74ce:	428a      	cmp	r2, r1
    74d0:	d305      	bcc.n	74de <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    74d2:	e9c0 1202 	strd	r1, r2, [r0, #8]
    74d6:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    74da:	2000      	movs	r0, #0
    74dc:	4770      	bx	lr
		return -EINVAL;
    74de:	f06f 0015 	mvn.w	r0, #21
}
    74e2:	4770      	bx	lr

000074e4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    74e4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    74e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    74ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    74ec:	2300      	movs	r3, #0
	node->prev = NULL;
    74ee:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    74f2:	4770      	bx	lr

000074f4 <unpend_thread_no_timeout>:
{
    74f4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    74f6:	f7ff fff5 	bl	74e4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    74fa:	7b43      	ldrb	r3, [r0, #13]
    74fc:	f023 0302 	bic.w	r3, r3, #2
    7500:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    7502:	2300      	movs	r3, #0
    7504:	6083      	str	r3, [r0, #8]
}
    7506:	bd08      	pop	{r3, pc}

00007508 <z_unpend_thread_no_timeout>:
{
    7508:	b508      	push	{r3, lr}
	__asm__ volatile(
    750a:	f04f 0320 	mov.w	r3, #32
    750e:	f3ef 8111 	mrs	r1, BASEPRI
    7512:	f383 8812 	msr	BASEPRI_MAX, r3
    7516:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    751a:	f7ff ffeb 	bl	74f4 <unpend_thread_no_timeout>
	__asm__ volatile(
    751e:	f381 8811 	msr	BASEPRI, r1
    7522:	f3bf 8f6f 	isb	sy
}
    7526:	bd08      	pop	{r3, pc}

00007528 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    7528:	4603      	mov	r3, r0
    752a:	b920      	cbnz	r0, 7536 <z_reschedule_irqlock+0xe>
    752c:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    7530:	b90a      	cbnz	r2, 7536 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    7532:	f7fa be3b 	b.w	21ac <arch_swap>
    7536:	f383 8811 	msr	BASEPRI, r3
    753a:	f3bf 8f6f 	isb	sy
}
    753e:	4770      	bx	lr

00007540 <z_reschedule_unlocked>:
	__asm__ volatile(
    7540:	f04f 0320 	mov.w	r3, #32
    7544:	f3ef 8011 	mrs	r0, BASEPRI
    7548:	f383 8812 	msr	BASEPRI_MAX, r3
    754c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7550:	f7ff bfea 	b.w	7528 <z_reschedule_irqlock>

00007554 <z_priq_dumb_best>:
{
    7554:	4603      	mov	r3, r0
	return list->head == list;
    7556:	6800      	ldr	r0, [r0, #0]
}
    7558:	4283      	cmp	r3, r0
    755a:	bf08      	it	eq
    755c:	2000      	moveq	r0, #0
    755e:	4770      	bx	lr

00007560 <z_ready_thread>:
{
    7560:	b510      	push	{r4, lr}
    7562:	f04f 0320 	mov.w	r3, #32
    7566:	f3ef 8411 	mrs	r4, BASEPRI
    756a:	f383 8812 	msr	BASEPRI_MAX, r3
    756e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    7572:	f7fd ff6f 	bl	5454 <ready_thread>
	__asm__ volatile(
    7576:	f384 8811 	msr	BASEPRI, r4
    757a:	f3bf 8f6f 	isb	sy
}
    757e:	bd10      	pop	{r4, pc}

00007580 <z_thread_timeout>:
{
    7580:	b510      	push	{r4, lr}
    7582:	4601      	mov	r1, r0
	__asm__ volatile(
    7584:	f04f 0320 	mov.w	r3, #32
    7588:	f3ef 8411 	mrs	r4, BASEPRI
    758c:	f383 8812 	msr	BASEPRI_MAX, r3
    7590:	f3bf 8f6f 	isb	sy
		if (!killed) {
    7594:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    7598:	f013 0f28 	tst.w	r3, #40	; 0x28
    759c:	d10d      	bne.n	75ba <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    759e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    75a2:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    75a4:	b10b      	cbz	r3, 75aa <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    75a6:	f7ff ffa5 	bl	74f4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    75aa:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    75ae:	f023 0314 	bic.w	r3, r3, #20
    75b2:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    75b6:	f7fd ff4d 	bl	5454 <ready_thread>
	__asm__ volatile(
    75ba:	f384 8811 	msr	BASEPRI, r4
    75be:	f3bf 8f6f 	isb	sy
}
    75c2:	bd10      	pop	{r4, pc}

000075c4 <add_to_waitq_locked>:
{
    75c4:	b538      	push	{r3, r4, r5, lr}
    75c6:	4604      	mov	r4, r0
    75c8:	460d      	mov	r5, r1
	unready_thread(thread);
    75ca:	f7fd ff97 	bl	54fc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    75ce:	7b63      	ldrb	r3, [r4, #13]
    75d0:	f043 0302 	orr.w	r3, r3, #2
    75d4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    75d6:	b195      	cbz	r5, 75fe <add_to_waitq_locked+0x3a>
    75d8:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    75da:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    75dc:	429d      	cmp	r5, r3
    75de:	d015      	beq.n	760c <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    75e0:	b1a3      	cbz	r3, 760c <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    75e2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    75e6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    75ea:	4291      	cmp	r1, r2
    75ec:	d008      	beq.n	7600 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    75ee:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    75f0:	2a00      	cmp	r2, #0
    75f2:	dd05      	ble.n	7600 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    75f4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    75f6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    75fa:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    75fc:	605c      	str	r4, [r3, #4]
}
    75fe:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    7600:	686a      	ldr	r2, [r5, #4]
    7602:	4293      	cmp	r3, r2
    7604:	d002      	beq.n	760c <add_to_waitq_locked+0x48>
    7606:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7608:	2b00      	cmp	r3, #0
    760a:	d1ec      	bne.n	75e6 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    760c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    760e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    7612:	601c      	str	r4, [r3, #0]
	list->tail = node;
    7614:	606c      	str	r4, [r5, #4]
}
    7616:	e7f2      	b.n	75fe <add_to_waitq_locked+0x3a>

00007618 <z_unpend1_no_timeout>:
{
    7618:	b510      	push	{r4, lr}
	__asm__ volatile(
    761a:	f04f 0320 	mov.w	r3, #32
    761e:	f3ef 8411 	mrs	r4, BASEPRI
    7622:	f383 8812 	msr	BASEPRI_MAX, r3
    7626:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    762a:	f7ff ff93 	bl	7554 <z_priq_dumb_best>
		if (thread != NULL) {
    762e:	4601      	mov	r1, r0
    7630:	b108      	cbz	r0, 7636 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    7632:	f7ff ff5f 	bl	74f4 <unpend_thread_no_timeout>
	__asm__ volatile(
    7636:	f384 8811 	msr	BASEPRI, r4
    763a:	f3bf 8f6f 	isb	sy
}
    763e:	4608      	mov	r0, r1
    7640:	bd10      	pop	{r4, pc}

00007642 <z_unpend_first_thread>:
{
    7642:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7644:	f04f 0320 	mov.w	r3, #32
    7648:	f3ef 8511 	mrs	r5, BASEPRI
    764c:	f383 8812 	msr	BASEPRI_MAX, r3
    7650:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    7654:	f7ff ff7e 	bl	7554 <z_priq_dumb_best>
		if (thread != NULL) {
    7658:	4604      	mov	r4, r0
    765a:	b120      	cbz	r0, 7666 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    765c:	f7ff ff4a 	bl	74f4 <unpend_thread_no_timeout>
    7660:	3018      	adds	r0, #24
    7662:	f000 f806 	bl	7672 <z_abort_timeout>
	__asm__ volatile(
    7666:	f385 8811 	msr	BASEPRI, r5
    766a:	f3bf 8f6f 	isb	sy
}
    766e:	4620      	mov	r0, r4
    7670:	bd38      	pop	{r3, r4, r5, pc}

00007672 <z_abort_timeout>:
{
    7672:	b510      	push	{r4, lr}
	__asm__ volatile(
    7674:	f04f 0220 	mov.w	r2, #32
    7678:	f3ef 8411 	mrs	r4, BASEPRI
    767c:	f382 8812 	msr	BASEPRI_MAX, r2
    7680:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    7684:	6803      	ldr	r3, [r0, #0]
    7686:	b13b      	cbz	r3, 7698 <z_abort_timeout+0x26>
			remove_timeout(to);
    7688:	f7fe f970 	bl	596c <remove_timeout>
			ret = 0;
    768c:	2000      	movs	r0, #0
	__asm__ volatile(
    768e:	f384 8811 	msr	BASEPRI, r4
    7692:	f3bf 8f6f 	isb	sy
}
    7696:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    7698:	f06f 0015 	mvn.w	r0, #21
    769c:	e7f7      	b.n	768e <z_abort_timeout+0x1c>

0000769e <z_get_next_timeout_expiry>:
{
    769e:	b510      	push	{r4, lr}
	__asm__ volatile(
    76a0:	f04f 0320 	mov.w	r3, #32
    76a4:	f3ef 8411 	mrs	r4, BASEPRI
    76a8:	f383 8812 	msr	BASEPRI_MAX, r3
    76ac:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    76b0:	f7fe f936 	bl	5920 <next_timeout>
	__asm__ volatile(
    76b4:	f384 8811 	msr	BASEPRI, r4
    76b8:	f3bf 8f6f 	isb	sy
}
    76bc:	bd10      	pop	{r4, pc}

000076be <z_set_timeout_expiry>:
{
    76be:	b570      	push	{r4, r5, r6, lr}
    76c0:	4604      	mov	r4, r0
    76c2:	460d      	mov	r5, r1
	__asm__ volatile(
    76c4:	f04f 0320 	mov.w	r3, #32
    76c8:	f3ef 8611 	mrs	r6, BASEPRI
    76cc:	f383 8812 	msr	BASEPRI_MAX, r3
    76d0:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    76d4:	f7fe f924 	bl	5920 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    76d8:	2801      	cmp	r0, #1
    76da:	dd05      	ble.n	76e8 <z_set_timeout_expiry+0x2a>
    76dc:	42a0      	cmp	r0, r4
    76de:	db03      	blt.n	76e8 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    76e0:	4629      	mov	r1, r5
    76e2:	4620      	mov	r0, r4
    76e4:	f7fc fbba 	bl	3e5c <sys_clock_set_timeout>
	__asm__ volatile(
    76e8:	f386 8811 	msr	BASEPRI, r6
    76ec:	f3bf 8f6f 	isb	sy
}
    76f0:	bd70      	pop	{r4, r5, r6, pc}

000076f2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    76f2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    76f4:	f7fe fa2a 	bl	5b4c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    76f8:	bd08      	pop	{r3, pc}

000076fa <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    76fa:	b108      	cbz	r0, 7700 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    76fc:	f7fb bacc 	b.w	2c98 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    7700:	4770      	bx	lr

00007702 <k_timer_init>:
	timer->status = 0U;
    7702:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    7704:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    7708:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    770c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    7710:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    7714:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    7716:	6343      	str	r3, [r0, #52]	; 0x34
}
    7718:	4770      	bx	lr

0000771a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    771a:	b510      	push	{r4, lr}
    771c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    771e:	f7ff ffa8 	bl	7672 <z_abort_timeout>

	if (inactive) {
    7722:	b9b0      	cbnz	r0, 7752 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    7724:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7726:	b10b      	cbz	r3, 772c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    7728:	4620      	mov	r0, r4
    772a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    772c:	f104 0018 	add.w	r0, r4, #24
    7730:	f7ff ff72 	bl	7618 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    7734:	b168      	cbz	r0, 7752 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    7736:	f7ff ff13 	bl	7560 <z_ready_thread>
	__asm__ volatile(
    773a:	f04f 0320 	mov.w	r3, #32
    773e:	f3ef 8011 	mrs	r0, BASEPRI
    7742:	f383 8812 	msr	BASEPRI_MAX, r3
    7746:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    774a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    774e:	f7ff beeb 	b.w	7528 <z_reschedule_irqlock>
    7752:	bd10      	pop	{r4, pc}

00007754 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7754:	4770      	bx	lr
	...

00007758 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    7758:	f7fc bc2e 	b.w	3fb8 <SystemInit>
